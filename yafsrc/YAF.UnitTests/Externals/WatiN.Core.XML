<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WatiN.Core</name>
    </assembly>
    <members>
        <member name="T:WatiN.Core.Exceptions.WatiNException">
            <summary>
            Base class for Exceptions thrown by WatiN.
            </summary>
        </member>
        <member name="T:WatiN.Core.Exceptions.ElementNotFoundException">
            <summary>
            Thrown if the searched for element can't be found.
            </summary>
        </member>
        <member name="P:WatiN.Core.Exceptions.ElementExceptionBase.Element">
            <summary>
            Element around which the exception is being thrown.
            Be advised that this property may be null.
            </summary>
        </member>
        <member name="T:WatiN.Core.Constraints.ProximityTextConstraint">
            <summary>
            Use this class to find a form field by text on the page that is 'nearby' the field.
            This constraint class is kindly donated by Seven Simple Machines.
            </summary>
            <example>
            This shows how to find a text field near the text "User name:".
            <code>
            ie.TextField(Find.Near("User name:")).TypeText("jsmythe")
            </code>
            </example>
            <remarks>
            <para>In building web applications, often the form elements and the text used to label them is 
            not intrinsically connected (with a &lt;label&gt; tag for instance). In addition the HTML
            that is rendered in ASP.NET can have changing id/name at each change to the ASPX page. 
            This makes it hard to find form elements and keep the test cases effective without a lot
            of re-coding and fixing.</para>
            <para>As a human we can look at a web page and (usually) know what information should go into
            a form field based on the label. This is because we visually associate nearby text to the
            field. This class uses the same concept by measuring proximity of the text to field elements
            and giving a "best guess" to the element desired.</para>
            <para>Some caveats:</para>
            <list type="number">
            <item>Currently this class assume left-to-right layout. A future enhancement could look at 
            the current CultureInfo or support setting a culture on the constructor.</item>
            <item>This will <em>always</em> find a form element (if any exist on the page) for the given text
            if the text can be found. This isn't exactly what we as humans do. A future enhancement could
            change the algorithm to identify the closest text that appears to label the field for all fields.</item>
            <item>This only supports &lt;input&gt; and &lt;textarea&gt; elements (text fields, check box, 
            radio button, etc.)</item>
            <item>The text to look for must be only text - it may not contain HTML elements. If it does,
            the search method will throw an exception to warn you.</item>
            </list>
            </remarks>
        </member>
        <member name="T:WatiN.Core.Constraints.Constraint">
            <summary>
            Describes a constraint that determines whether an object satisfies a given property.
            </summary>
            <remarks>
            <para>
            Constraints may maintain state across multiple match attempts so as to implement
            rules such as finding the Nth match.  The constraint itself should remain immutable.
            </para>
            <para>
            Constraints can be combined using &amp;&amp;, ||, and ! operators.
            </para>
            <para>
            Constraints can also be printed to a string using the <see cref="M:WatiN.Core.Constraints.Constraint.ToString"/> method.
            </para>
            </remarks>
            <example>
            <para>
            If you want to find a Button by it's English or Dutch value this example shows you how to use
            the Or method to do this:
            </para>
            <code> 
            IE ie = new IE("www.yourwebsite.com/yourpage.htm");
            
            Button myButton = ie.Button(Find.ByValue("Cancel").Or(Find.ByValue("Annuleren")));
            </code>
            <para>
            You can also use the | or || operators, resulting in a bit more readable code.
            </para>
            <code> 
            IE ie = new IE("www.yourwebsite.com/yourpage.htm");
            
            Button myButton = ie.Button(Find.ByValue("Cancel") || Find.ByValue("Annuleren"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.Matches(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <summary>
            Returns true if the constraint matches an object described by an attribute bag.
            </summary>
            <param name="attributeBag">The attribute bag</param>
            <param name="context">The constraint matching context</param>
            <returns>True if the constraint matches</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="attributeBag"/> or <paramref name="context"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.op_BitwiseAnd(WatiN.Core.Constraints.Constraint,WatiN.Core.Constraints.Constraint)">
            <summary>
            Combines two contraints to produce a new constraint that is satisfied only when
            both constraints are satisfied.
            </summary>
            <remarks>
            <para>
            The operation is short-circuiting: if the first constraint is not satisfied for
            a given value then the second constraint is not evaluated.
            </para>
            <para>
            This makes the Find.ByName() &amp; Find.By() syntax possible and is needed for the &amp;&amp; operator.
            </para>
            </remarks>
            <param name="first">The first constraint</param>
            <param name="second">The second constraint</param>
            <returns>The combined constraint</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="first"/> or <paramref name="second"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.op_BitwiseOr(WatiN.Core.Constraints.Constraint,WatiN.Core.Constraints.Constraint)">
            <summary>
            Combines two contraints to produce a new constraint that is satisfied only when
            either (or both) constraint is satisfied.
            </summary>
            <remarks>
            <para>
            The operation is short-circuiting: if the first constraint is satisfied for
            a given value then the second constraint is not evaluated.
            </para>
            <para>
            This makes the Find.ByName() | Find.By() syntax possible and is needed for the || operator.
            </para>
            </remarks>
            <param name="first">The first constraint</param>
            <param name="second">The second constraint</param>
            <returns>The combined constraint</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="first"/> or <paramref name="second"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.op_LogicalNot(WatiN.Core.Constraints.Constraint)">
            <summary>
            Returns a new constraint that evaluates to the opposite value of the specified constraint.
            </summary>
            <remarks>
            This makes the ! Find.ByName() syntax possible.
            </remarks>
            <param name="constraint">The constraint</param>
            <returns>The inverse constraint</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="constraint"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.op_True(WatiN.Core.Constraints.Constraint)">
            <summary>
            Syntax sugar to make the Find.ByName() &amp;&amp; Find.By() syntax possible.
            </summary>
            <param name="constraint">The constraint</param>
            <returns>Always false</returns>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.op_False(WatiN.Core.Constraints.Constraint)">
            <summary>
            Syntax sugar to make the Find.ByName() || Find.By() syntax possible.
            </summary>
            <param name="constraint">The constraint</param>
            <returns>Always false</returns>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.And(WatiN.Core.Constraints.Constraint)">
            <summary>
            Combines this constraint with another one to produce a new constraint that is satisfied
            only when both constraints are satisfied.
            </summary>
            <remarks>
            <para>
            The operation is short-circuiting: if the first constraint is not satisfied for
            a given value then the second constraint is not evaluated.
            </para>
            </remarks>
            <param name="constraint">The other constraint</param>
            <returns>The combined constraint</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="constraint"/> is null</exception>
            <seealso cref="M:WatiN.Core.Constraints.Constraint.Or(WatiN.Core.Constraints.Constraint)"/>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.Or(WatiN.Core.Constraints.Constraint)">
            <summary>
            Combines this constraint with another one to produce a new constraint that is satisfied only when
            either (or both) constraint is satisfied.
            </summary>
            <remarks>
            <para>
            The operation is short-circuiting: if the first constraint is satisfied for
            a given value then the second constraint is not evaluated.
            </para>
            </remarks>
            <param name="constraint">The other constraint</param>
            <returns>The combined constraint</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="constraint"/> is null</exception>
            <seealso cref="M:WatiN.Core.Constraints.Constraint.And(WatiN.Core.Constraints.Constraint)"/>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.Not">
            <summary>
            Returns a new constraint that evaluates to the opposite value of this constraint.
            </summary>
            <returns>The inverse constraint</returns>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.ToString">
            <summary>
            Returns a human-readable description of the constraint.
            </summary>
            <returns>The description</returns>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.WriteDescriptionTo(System.IO.TextWriter)">
            <summary>
            Writes a human-readable description of the constraint to a text writer.
            </summary>
            <param name="writer">The text writer for the description, not null</param>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <summary>
            Returns true if the constraint matches an object described by an attribute bag.
            </summary>
            <param name="attributeBag">The attribute bag, not null</param>
            <param name="context">The constraint matching context, not null</param>
            <returns>True if the constraint matches</returns>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.EnterMatch">
            <summary>
            Tracks when a constraint's Match method has been entered by the current thread.
            </summary>
            <exception cref="T:WatiN.Core.Exceptions.ReEntryException">Thrown if reentrance has been detected</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.Constraint.ExitMatch">
            <summary>
            Tracks when a constraint's Match method has been exited by the current thread.
            </summary>
        </member>
        <member name="M:WatiN.Core.Constraints.ProximityTextConstraint.#ctor(System.String)">
            <summary>
            Initializes a new promixity constraint.
            </summary>
            <param name="labelText">The text that represents the label for the form element.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="labelText"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.ProximityTextConstraint.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.ProximityTextConstraint.WriteDescriptionTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.ProximityTextConstraint.ProximityCache.CalculateSquaredDistance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Quick method to calculate squared distance between two points.
            </summary>
            <param name="x1">X-coordinate of the first point</param>
            <param name="y1">Y-coordinate of the first point</param>
            <param name="x2">X-coordinate of the second point</param>
            <param name="y2">Y-coordinate of the second point</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Constraints.ProximityTextConstraint.ProximityCache.DistanceBetweenRectangles(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Returns the shortest distance between two rectangles.
            </summary>
            <param name="r1">The first rectangle</param>
            <param name="r2">The seconed rectangle</param>
            <returns>The shoutest distance between the nearest faces or vetices</returns>
        </member>
        <member name="M:WatiN.Core.Native.INativeElement.GetAttributeValue(System.String)">
            <summary>
            This methode can be used if the attribute isn't available as a property of
            Element or a subclass of Element.
            </summary>
            <param name="attributeName">The attribute name. This could be different then named in
            the HTML. It should be the name of the property exposed by the element DOM object.</param>
            <returns>The value of the attribute if available; otherwise <c>null</c> is returned.</returns>
        </member>
        <member name="M:WatiN.Core.Native.INativeElement.Select">
            <summary>
            Should fire the (on)Select event on the element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.INativeElement.SubmitForm">
            <summary>
            Called when to submit the form.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.INativeElement.SetFileUploadFile(WatiN.Core.DialogHandlers.DialogWatcher,System.String)">
            <summary>
            Called when the file upload dialog should be filled in
            </summary>
            <param name="dialogWatcher">To inject a dialog handler into to handle the file upload dialog.</param>
            <param name="fileName">The file name to enter into the dialog filename field.</param>
        </member>
        <member name="M:WatiN.Core.Native.INativeElement.WaitUntilReady">
            <summary>
            Waits until the element is fully loaded in the DOM and/or ready to be used.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.INativeElement.GetElementBounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <returns>The element bounds in screen coordinates</returns>
        </member>
        <member name="M:WatiN.Core.Native.INativeElement.GetJavaScriptElementReference">
            <summary>
            Gets the java script element reference to this element.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WatiN.Core.Native.INativeElement.Children">
            <summary>
            Gets a collection consisting of the immediate children of this element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.INativeElement.AllDescendants">
            <summary>
            Gets a collection consisting of all descendants of this element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.INativeElement.TableRows">
            <summary>
            Gets a collection consisting of the immediate rows within a TABLE or TBODY element.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if applied to an element of the wrong type</exception>
        </member>
        <member name="P:WatiN.Core.Native.INativeElement.TableBodies">
            <summary>
            Gets a collection consisting of the immediate tbodies within a TABLE element.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if applied to an element of the wrong type</exception>
        </member>
        <member name="P:WatiN.Core.Native.INativeElement.TableCells">
            <summary>
            Gets a collection consisting of the immediate cells within a TR element.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if applied to an element of the wrong type</exception>
        </member>
        <member name="P:WatiN.Core.Native.INativeElement.Options">
            <summary>
            Gets a collection consisting of the options within a SELECT element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.INativeElement.TextAfter">
            <summary>
            Returns the text displayed after this element when it's wrapped
            in a Label element; otherwise it returns <c>null</c>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.INativeElement.TextBefore">
            <summary>
            Returns the text displayed before this element when it's wrapped
            in a Label element; otherwise it returns <c>null</c>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.INativeElement.NextSibling">
            <summary>
            Gets the next sibling of this element in the Dom of the HTML page.
            </summary>
            <value>The next sibling.</value>
        </member>
        <member name="P:WatiN.Core.Native.INativeElement.PreviousSibling">
            <summary>
            Gets the previous sibling of this element in the Dom of the HTML page.
            </summary>
            <value>The previous sibling.</value>
        </member>
        <member name="P:WatiN.Core.Native.INativeElement.Parent">
            <summary>
            Gets the parent element of this element.
            If the parent type is known you can cast it to that type.
            </summary>
            <value>The parent.</value>
            <example>
            The following example shows you how to use the parent property.
            Assume your web page contains a bit of html that looks something
            like this:
            
            div
              a id="watinlink" href="http://watin.sourceforge.net" /
              a href="http://sourceforge.net/projects/watin" /
            /div
            div
              a id="watinfixturelink" href="http://watinfixture.sourceforge.net" /
              a href="http://sourceforge.net/projects/watinfixture" /
            /div
            Now you want to click on the second link of the watin project. Using the 
            parent property the code to do this would be:
            
            <code>
            Div watinDiv = (Div) ie.Link("watinlink").Parent;
            watinDiv.Links[1].Click();
            </code>
            </example>
        </member>
        <member name="F:WatiN.Core.Native.JSElement.UsePropertyInsteadOfAttribute">
            <summary>
            List of html attributes that have to be retrieved as properties in order to get the correct value.
            I.e. for options myOption.getAttribute("selected"); returns nothing if it's selected. 
            However  myOption.selected returns true.
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.JSElement.WatiNAttributeMap">
            <summary>
            Mappings from attributnames used by WatiN to attribute/property names used by FireFox
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.JSElement.SetPropertyTransformations">
            <summary>
            Mappings from attributnames used by WatiN to attribute/property names used by FireFox
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.JSElement.GetProperty(System.String)">
            <summary>
            Gets the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Native.JSElement.SetProperty(System.String,System.String)">
            <summary>
            Sets the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WatiN.Core.Native.JSElement.ExecuteMethod(System.String)">
            <summary>
            Executes a method with no parameters.
            </summary>
            <param name="methodName">Name of the method to execute.</param>
        </member>
        <member name="M:WatiN.Core.Native.JSElement.GetElementByProperty(System.String)">
            <summary>
            Gets the element by property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Returns the element that is returned by the specified property</returns>
        </member>
        <member name="M:WatiN.Core.Native.JSElement.GetElementBounds">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.JSElement.GetJavaScriptElementReference">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.JSElement.InnerHtmlToInnerText(System.String)">
            <summary>
            Makes innerHtml inner text (IE) look a like. It comes close but it seems not to cover all
            conversions cause comparing browser.body.innertext between a IE and FireFox instances will 
            certainly fail on newlines and maybe some spaces.
            </summary>
            <param name="innerHtml">The value.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Native.JSElement.ExecuteEvent(System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Executes the event.
            </summary>
            <param name="eventName">Name of the event to fire.</param>
            <param name="eventProperties"></param>
            <param name="WaitForEventToComplete"></param>
        </member>
        <member name="M:WatiN.Core.Native.JSElement.Pin">
            <summary>
            This changes/pins the java script variable name <see cref="P:WatiN.Core.Native.JSElement.ElementReference"/> which is used to 
            execute commands on FireFox. 
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.JSElement.ClientPort">
            <summary>
            Gets the FireFox client port.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.JSElement.ElementReference">
            <summary>
            Gets the name of a variable that stores a reference to the element within FireFox.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.JSElement.TextAfter">
            <summary>
            This not supported in FireFox
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.JSElement.TextBefore">
            <summary>
            This not supported in FireFox
            </summary>
        </member>
        <member name="T:WatiN.Core.Area">
            <summary>
            Represents an area of an image map.
            </summary>
        </member>
        <member name="T:WatiN.Core.Element`1">
            <summary>
            This is the base class for all other element types in this project, like
            Button, Checkbox etc.. It provides common functionality to all these elements
            </summary>
        </member>
        <member name="T:WatiN.Core.Element">
            <summary>
            This is the base class for all other element types in this project, like
            Button, Checkbox etc.. It provides common functionality to all these elements
            </summary>
        </member>
        <member name="T:WatiN.Core.Component">
            <summary>
            Describes a WatiN component such as an element, document, browser or custom control
            which may be located using various constraints.
            </summary>
        </member>
        <member name="T:WatiN.Core.Interfaces.IAttributeBag">
            <summary>
            Provides values for attributes used during constraint matching.
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IAttributeBag.GetAttributeValue(System.String)">
            <summary>
            Gets the value of an attribute that can be used for constraint evaluation.
            </summary>
            <param name="attributeName">The name of the attribute</param>
            <returns>The attribute's associated value or null if none</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="attributeName"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Interfaces.IAttributeBag.GetAdapter``1">
            <summary>
            Gets an adapter for the object to a particular type, or null if the object
            cannot be adapted to that type.
            </summary>
            <typeparam name="T">The adapter type</typeparam>
            <returns>The adapter, or null if the object cannot be adapted as requested</returns>
        </member>
        <member name="T:WatiN.Core.IHasDescription">
            <summary>
            An interface for an object that supports user-specified descriptive text.
            </summary>
        </member>
        <member name="P:WatiN.Core.IHasDescription.Description">
            <summary>
            Gets or sets the description of the object, or null if none.
            </summary>
        </member>
        <member name="M:WatiN.Core.Component.Matches(WatiN.Core.Constraints.Constraint)">
            <summary>
            Returns true if the component matches the specified constraint.
            </summary>
            <remarks>
            <para>
            This method uses a new constraint context each time.  Note that doing so will
            prevent stateful constraints such as <see cref="T:WatiN.Core.Constraints.IndexConstraint"/> from working correctly.
            </para>
            </remarks>
            <param name="constraint">The constraint to match</param>
            <returns>True if the component matches the constraint</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="constraint"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Component.Matches(WatiN.Core.Constraints.Constraint,WatiN.Core.Constraints.ConstraintContext)">
            <summary>
            Returns true if the component matches the specified constraint.
            </summary>
            <param name="constraint">The constraint to match</param>
            <param name="context">The constraint context</param>
            <returns>True if the component matches the constraint</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="constraint"/> or
            <paramref name="context"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Component.GetAttributeValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Component.GetAdapter``1">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Component.GetValue(System.String)">
            <summary>
            Gets the value of an attribute that can be used for constraint evaluation.
            </summary>
            <param name="attributeName">The name of the attribute</param>
            <returns>The attribute's associated value or null if none</returns>
        </member>
        <member name="M:WatiN.Core.Component.MatchesImpl(WatiN.Core.Constraints.Constraint,WatiN.Core.Constraints.ConstraintContext)">
            <summary>
            Returns true if the component matches the specified constraint.
            </summary>
            <param name="constraint">The constraint to match, not null</param>
            <param name="context">The constraint context, not null</param>
            <returns>True if the component matches the constraint</returns>
        </member>
        <member name="M:WatiN.Core.Component.GetAttributeValueImpl(System.String)">
            <summary>
            Gets the value of an attribute that can be used for constraint evaluation.
            </summary>
            <param name="attributeName">The name of the attribute, not null</param>
            <returns>The attribute's associated value or null if none</returns>
        </member>
        <member name="P:WatiN.Core.Component.Description">
            <summary>
            Gets or sets the description of the component, or null if none.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.#ctor(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            This constructor is mainly used from within WatiN.
            </summary>
            <param name="domContainer"><see cref="P:WatiN.Core.Element.DomContainer"/> this element is located in</param>
            <param name="nativeElement">The element</param>
        </member>
        <member name="M:WatiN.Core.Element.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            This constructor is mainly used from within WatiN.
            </summary>
            <param name="domContainer"><see cref="P:WatiN.Core.Element.DomContainer"/> this element is located in</param>
            <param name="elementFinder">The element finder.</param>
        </member>
        <member name="M:WatiN.Core.Element.GetJavascriptElementReference">
            <summary>
            Gets the javascript element reference for this <see cref="T:WatiN.Core.Element"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Element.As``1">
            <summary>
            Wraps an element as a control of a particular type.
            </summary>
            <typeparam name="TControl">The <see cref="T:WatiN.Core.Control`1"/> subclass</typeparam>
            <returns>The control</returns>
        </member>
        <member name="M:WatiN.Core.Element.GetAttributeValueImpl(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Element.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Element.DefaultToString">
            <summary>
            Obtains a default description of the element to be used when <see cref="P:WatiN.Core.IHasDescription.Description"/> is null.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.Click">
            <summary>
            Clicks this element and waits till the event is completely finished (page is loaded 
            and ready) .
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.ClickNoWait">
            <summary>
            Clicks this instance and returns immediately. Use this method when you want to continue without waiting
            for the click event to be finished. Mostly used when a 
            HTMLDialog or javascript popup is displayed after clicking the element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.ClickImpl(System.Boolean)">
            <summary>
            Handles the implementation of Click and ClickNoWait
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.Focus">
            <summary>
            Gives the (input) focus to this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.DoubleClick">
            <summary>
            Doubleclicks this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyDown">
            <summary>
            Does a keydown on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyDownNoWait">
            <summary>
            Does a keydown on this element and does not wait for the page to finish loading.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyDown(System.Char)">
            <summary>
            Does a keydown on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyDownNoWait(System.Char)">
            <summary>
            Does a keydown on this element and does not wait for the page to finish loading.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyPress">
            <summary>
            Does a keypress on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyPressNoWait">
            <summary>
            Does a keypress on this element and does not wait for the page to finish loading.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyPress(System.Char)">
            <summary>
            Does a keypress on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyPressNoWait(System.Char)">
            <summary>
            Does a keypress on this element and does not wait for the page to finish loading.
            </summary>
            <param name="character">The character.</param>
        </member>
        <member name="M:WatiN.Core.Element.KeyUp">
            <summary>
            Does a keyup on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyUpNoWait">
            <summary>
            Does a keyup on this element and does not wait for the page to finish loading.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyUp(System.Char)">
            <summary>
            Does a keyup on this element.
            </summary>
            <param name="character">The character.</param>
        </member>
        <member name="M:WatiN.Core.Element.KeyUpNoWait(System.Char)">
            <summary>
            Does a keyup on this element and does not wait for the page to finish loading.
            </summary>
            <param name="character">The character.</param>
        </member>
        <member name="M:WatiN.Core.Element.Blur">
            <summary>
            Fires the blur event on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.Change">
            <summary>
            Fires the change event on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.MouseEnter">
            <summary>
            Fires the mouseenter event on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.MouseDown">
            <summary>
            Fires the mousedown event on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.MouseUp">
            <summary>
            Fires the mouseup event on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.FireEvent(System.String)">
            <summary>
            Fires the specified <paramref name="eventName"/> on this element
            and waits for it to complete.
            </summary>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:WatiN.Core.Element.FireEvent(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Fires the event. The <paramref name="eventProperties" /> collection
            can be used to set values of the event object in the browser to 
            full fill the needs of javascript attached to the event handler.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="eventProperties">The event properties that need to be set.</param>
        </member>
        <member name="M:WatiN.Core.Element.FireEventNoWait(System.String)">
            <summary>
            Only fires the specified <paramref name="eventName"/> on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.FireEventNoWait(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Only fires the event but doesn't wait for the action to complete. 
            The <paramref name="eventProperties" /> collection
            can be used to set values of the event object in the browser to 
            full fill the needs of javascript attached to the event handler.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="eventProperties">The event properties that need to be set.</param>
        </member>
        <member name="M:WatiN.Core.Element.Flash">
            <summary>
            Flashes this element 5 times.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.Flash(System.Int32)">
            <summary>
            Flashes this element the specified number of flashes.
            </summary>
            <param name="numberOfFlashes">The number of flashes.</param>
        </member>
        <member name="M:WatiN.Core.Element.Highlight(System.Boolean)">
            <summary>
            Highlights this element.
            </summary>
            <param name="doHighlight">if set to <c>true</c> the element is highlighted; otherwise it's not.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntilExists">
            <summary>
            Waits until the element exists or will time out after 30 seconds.
            To change the default time out, set <see cref="P:WatiN.Core.Settings.WaitUntilExistsTimeOut"/>
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntilExists(System.Int32)">
            <summary>
            Waits until the element exists. Wait will time out after <paramref name="timeout"/> seconds.
            </summary>
            <param name="timeout">The timeout in seconds.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntilRemoved">
            <summary>
            Waits until the element no longer exists or will time out after 30 seconds.
            To change the default time out, set <see cref="P:WatiN.Core.Settings.WaitUntilExistsTimeOut"/>
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntilRemoved(System.Int32)">
            <summary>
            Waits until the element no longer exists. Wait will time out after <paramref name="timeout"/> seconds.
            </summary>
            <param name="timeout">The timeout in seconds.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil(System.String,System.String)">
            <summary>
            Waits until the given <paramref name="attributename"/> matches <paramref name="expectedValue"/>.
            Wait will time out after <see cref="P:WatiN.Core.Settings.WaitUntilExistsTimeOut"/> seconds.
            </summary>
            <param name="attributename">The attributename.</param>
            <param name="expectedValue">The expected value.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil(System.String,System.String,System.Int32)">
            <summary>
            Waits until the given <paramref name="attributename" /> matches <paramref name="expectedValue" />.
            Wait will time out after <paramref name="timeout"/> seconds.
            </summary>
            <param name="attributename">The attributename.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Waits until the given <paramref name="attributename"/> matches <paramref name="expectedValue"/>.
            Wait will time out after <see cref="P:WatiN.Core.Settings.WaitUntilExistsTimeOut"/> seconds.
            </summary>
            <param name="attributename">The attributename.</param>
            <param name="expectedValue">The expected value.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil(System.String,System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Waits until the given <paramref name="attributename" /> matches <paramref name="expectedValue" />.
            Wait will time out after <paramref name="timeout"/> seconds.
            </summary>
            <param name="attributename">The attributename.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil(WatiN.Core.Constraints.Constraint)">
            <summary>
            Waits until the given <paramref name="constraint"/> matches.
            Wait will time out after <see cref="P:WatiN.Core.Settings.WaitUntilExistsTimeOut"/> seconds.
            </summary>
            <param name="constraint">The Constraint.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil``1(System.Predicate{``0})">
            <summary>
            Waits until the given <paramref name="predicate"/> matches.
            Wait will time out after <see cref="P:WatiN.Core.Settings.WaitUntilExistsTimeOut"/> seconds.
            </summary>
            <param name="predicate">The Constraint.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil(WatiN.Core.Constraints.Constraint,System.Int32)">
            <summary>
            Waits until the given <paramref name="constraint" /> matches.
            </summary>
            <param name="constraint">The Constraint.</param>
            <param name="timeout">The timeout in seconds.</param>
        </member>
        <member name="M:WatiN.Core.Element.Refresh">
            <summary>
            Call this method to make sure the cached reference to the html element on the web page
            is refreshed on the next call you make to a property or method of this element.
            When you want to check if an element still <see cref="P:WatiN.Core.Element.Exists"/> you don't need 
            to call the <see cref="M:WatiN.Core.Element.Refresh"/> method since <see cref="P:WatiN.Core.Element.Exists"/> calls it internally.
            </summary>
            <example>
            The following code shows in which situation you can make use of the refresh mode.
            The code selects an option of a selectlist and then checks if this option
            is selected.
            <code>
            SelectList select = ie.SelectList(id);
            
            // Lets assume calling Select causes a postback, 
            // which would invalidate the reference to the html selectlist.
            select.Select(val);
            
            // Refresh will clear the cached reference to the html selectlist.
            select.Refresh(); 
            
            // B.t.w. executing:
            // select = ie.SelectList(id); 
            // would have the same effect as calling: 
            // select.Refresh().
            
            // Assert against a freshly fetched reference to the html selectlist.
            Assert.AreEqual(val, select.SelectedItem);
            </code>
            If you need to use refresh on an element retrieved from a collection of elements you 
            need to rewrite your code a bit.
            <code>
            SelectList select = ie.Spans[1].SelectList(id);
            select.Refresh(); // this will not have the expected effect
            </code>
            Rewrite your code as follows:
            <code>
            SelectList select = ie.Span(Find.ByIndex(1)).SelectList(id);
            select.Refresh(); // this will have the expected effect
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Element.FindNativeElement">
            <summary>
            Finds the native element.
            </summary>
            <remarks>
            <para>
            This method caches the native element unless its reference becomes invalid
            in which case it will search for the element again.
            </para>
            <para>
            Unlike the <see cref="P:WatiN.Core.Element.NativeElement"/> property, this method does not wait
            for the native element to be found.  If the native element is not found then
            this method returns null.
            </para>
            </remarks>
            <returns>The native element, or null if not found.</returns>
        </member>
        <member name="M:WatiN.Core.Element.RefreshNativeElement">
            <summary>
            Clears the cached native element and finds it again.
            </summary>
            <returns>The native element, or null if not found.</returns>
        </member>
        <member name="M:WatiN.Core.Element.ClearCachedNativeElement">
            <summary>
            Clears the cached native element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.GetCachedNativeElement">
            <summary>
            Gets the cached native element immediately.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Element.WaitForComplete">
            <summary>
            Waits till the page load is complete. This should only be used on rare occasions
            because WatiN calls this function for you when it handles events (like Click etc..)
            To change the default time out, set <see cref="P:WatiN.Core.Settings.WaitForCompleteTimeOut"/>
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor``1">
             <summary>
             Gets the closest ancestor of the specified type.
             </summary>
             <returns>An instance of the ancestorType. If no ancestor of ancestorType is found <code>null</code> is returned.</returns>
            <example>
             The following example returns the Div a textfield is located in.
             <code>
             IE ie = new IE("http://www.example.com");
             Div mainDiv = ie.TextField("firstname").Ancestor&lt;Div&gt;;
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor``1(WatiN.Core.Constraints.Constraint)">
            <summary>
            Gets the closest ancestor of the specified Type and constraint.
            </summary>
            <param name="findBy">The constraint to match with.</param>
            <returns>
            An instance of the ancestorType. If no ancestor of ancestorType is found <code>null</code> is returned.
            </returns>
            <example>
            The following example returns the Div a textfield is located in.
            <code>
            IE ie = new IE("http://www.example.com");
            Div mainDiv = ie.TextField("firstname").Ancestor&lt;Div&gt;(Find.ByText("First name"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor``1(System.Predicate{``0})">
            <summary>
            Gets the closest ancestor of the specified Type and constraint.
            </summary>
            <param name="predicate">The constraint to match with.</param>
            <returns>
            An instance of the ancestorType. If no ancestor of ancestorType is found <code>null</code> is returned.
            </returns>
            <example>
            The following example returns the Div a textfield is located in.
            <code>
            IE ie = new IE("http://www.example.com");
            Div mainDiv = ie.TextField("firstname").Ancestor&lt;Div&gt;(div => div.Text == "First name");
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor(System.Type)">
             <summary>
             Gets the closest ancestor of the specified type.
             </summary>
             <param name="ancestorType">The ancestorType.</param>
             <returns>An instance of the ancestorType. If no ancestor of ancestorType is found <code>null</code> is returned.</returns>
            <example>
             The following example returns the Div a textfield is located in.
             <code>
             IE ie = new IE("http://www.example.com");
             Div mainDiv = ie.TextField("firstname").Ancestor(typeof(Div));
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor(WatiN.Core.Constraints.Constraint)">
             <summary>
             Gets the closest ancestor of the specified AttributConstraint.
             </summary>
             <param name="findBy">The AttributConstraint to match with.</param>
             <returns>An Element. If no ancestor of ancestorType is found <code>null</code> is returned.</returns>
            <example>
             The following example returns the Div a textfield is located in.
             <code>
             IE ie = new IE("http://www.example.com");
             Div mainDiv = ie.TextField("firstname").Ancestor(Find.ByText("First name"));
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor(System.Type,WatiN.Core.Constraints.Constraint)">
            <summary>
            Gets the closest ancestor of the specified Type and Constraint.
            </summary>
            <param name="ancestorType">Type of the ancestor.</param>
            <param name="findBy">The Constraint to match with.</param>
            <returns>
            An instance of the ancestorType. If no ancestor of ancestorType is found <code>null</code> is returned.
            </returns>
            <example>
            The following example returns the Div a textfield is located in.
            <code>
            IE ie = new IE("http://www.example.com");
            Div mainDiv = ie.TextField("firstname").Ancestor(typeof(Div), Find.ByText("First name"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor(System.String,WatiN.Core.Constraints.Constraint)">
            <summary>
            Gets the closest ancestor of the specified Tag and AttributConstraint.
            </summary>
            <param name="tagName">The tag of the ancestor.</param>
            <param name="findBy">The AttributConstraint to match with.</param>
            <returns>
            <returns>An typed instance of the element matching the Tag and the AttributeConstriant.
            If no specific type is available, an element of type ElementContainer will be returned. 
            If there is no ancestor that matches Tag and Constraint, <code>null</code> is returned.</returns>
            </returns>
            <example>
            The following example returns the Div a textfield is located in.
            <code>
            IE ie = new IE("http://www.example.com");
            Div mainDiv = ie.TextField("firstname").Ancestor("Div", Find.ByText("First name"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor(System.String,System.Predicate{WatiN.Core.Element})">
            <summary>
            Gets the closest ancestor of the specified Tag and AttributConstraint.
            </summary>
            <param name="tagName">The tag of the ancestor.</param>
            <param name="predicate">The constraint to match with.</param>
            <returns>
            <returns>An typed instance of the element matching the Tag and the AttributeConstriant.
            If no specific type is available, an element of type ElementContainer will be returned. 
            If there is no ancestor that matches Tag and Constraint, <code>null</code> is returned.</returns>
            </returns>
            <example>
            The following example returns the Div a textfield is located in.
            <code>
            IE ie = new IE("http://www.example.com");
            Div mainDiv = ie.TextField("firstname").Ancestor("Div", Find.ByText("First name"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor(System.String)">
             <summary>
             Gets the closest ancestor of the specified Tag.
             </summary>
             <param name="tagName">The tag of the ancestor.</param>
             <returns>An typed instance of the element matching the Tag. If no specific type is
             available, an element of type ElementContainer will be returned. 
             If there is no ancestor that matches Tag, <code>null</code> is returned.</returns>
            <example>
             The following example returns the Div a textfield is located in.
             <code>
             IE ie = new IE("http://www.example.com");
             Div mainDiv = ie.TextField("firstname").Ancestor("Div");
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.Element.CreateElementFinder``1(WatiN.Core.NativeElementCollectionFactory,WatiN.Core.Constraints.Constraint)">
            <summary>
            Creates an element finder for elements within specialized collections.
            </summary>
            <typeparam name="TElement">The element type</typeparam>
            <param name="nativeElementCollection">The native element collection</param>
            <param name="findBy">The constraint, or null if none</param>
            <returns>The native element finder</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nativeElementCollection"/> is null</exception>
        </member>
        <member name="P:WatiN.Core.Element.ClassName">
            <summary>
            Gets the name of the stylesheet class assigned to this ellement (if any).
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:WatiN.Core.Element.Complete">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Element"/> is completely loaded.
            </summary>
            <value><c>true</c> if complete; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Element.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Element"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Element.Id">
            <summary>
            Gets (or sets) the id of this element as specified in the HTML.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:WatiN.Core.Element.Name">
            <summary>
            Gets (or sets) the name of this element as specified in the HTML.
            </summary>
            <value>The name</value>
        </member>
        <member name="P:WatiN.Core.Element.IdOrName">
            <summary>
            Gets the id or name (id preferred) of this element as specified in the HTML.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:WatiN.Core.Element.Text">
            <summary>
            Gets the innertext of this element (and the innertext of all the elements contained
            in this element).
            </summary>
            <value>The innertext.</value>
        </member>
        <member name="P:WatiN.Core.Element.TextAfter">
            <summary>
            Returns the text displayed after this element when it's wrapped
            in a Label element; otherwise it returns <c>null</c>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Element.TextBefore">
            <summary>
            Returns the text displayed before this element when it's wrapped
            in a Label element; otherwise it returns <c>null</c>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Element.InnerHtml">
            <summary>
            Gets the inner HTML of this element.
            </summary>
            <value>The inner HTML.</value>
        </member>
        <member name="P:WatiN.Core.Element.OuterText">
            <summary>
            Gets the outer text.
            </summary>
            <value>The outer text.</value>
        </member>
        <member name="P:WatiN.Core.Element.OuterHtml">
            <summary>
            Gets the outer HTML.
            </summary>
            <value>The outer HTML.</value>
        </member>
        <member name="P:WatiN.Core.Element.TagName">
            <summary>
            Gets the tag name of this element.
            </summary>
            <value>The name of the tag.</value>
        </member>
        <member name="P:WatiN.Core.Element.Title">
            <summary>
            Gets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:WatiN.Core.Element.NextSibling">
            <summary>
            Gets the next sibling of this element in the Dom of the HTML page.
            </summary>
            <value>The next sibling.</value>
        </member>
        <member name="P:WatiN.Core.Element.PreviousSibling">
            <summary>
            Gets the previous sibling of this element in the Dom of the HTML page.
            </summary>
            <value>The previous sibling.</value>
        </member>
        <member name="P:WatiN.Core.Element.Parent">
            <summary>
            Gets the parent element of this element.
            If the parent type is known you can cast it to that type.
            </summary>
            <value>The parent.</value>
            <example>
            The following example shows you how to use the parent property.
            Assume your web page contains a bit of html that looks something
            like this:
            
            div
              a id="watinlink" href="http://watin.sourceforge.net" /
              a href="http://sourceforge.net/projects/watin" /
            /div
            div
              a id="watinfixturelink" href="http://watinfixture.sourceforge.net" /
              a href="http://sourceforge.net/projects/watinfixture" /
            /div
            Now you want to click on the second link of the watin project. Using the 
            parent property the code to do this would be:
            
            <code>
            Div watinDiv = (Div) ie.Link("watinlink").Parent;
            watinDiv.Links[1].Click();
            </code>
            </example>
        </member>
        <member name="P:WatiN.Core.Element.DomContainer">
            <summary>
            Gets the DomContainer for this element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Element.NativeElement">
            <summary>
            Gets a reference to the wrapper which incapsulates a native element in the browser.
            </summary>
        </member>
        <member name="P:WatiN.Core.Element.Exists">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Element"/> exists.
            </summary>
            <value><c>true</c> if exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:WatiN.Core.Element`1.WaitUntil(System.Predicate{`0})">
            <summary>
            Waits until the given expression is <c>true</c>.
            Wait will time out after <see cref="P:WatiN.Core.Settings.WaitUntilExistsTimeOut"/> seconds.
            </summary>
            <param name="predicate">The expression to use.</param>
        </member>
        <member name="M:WatiN.Core.Element`1.WaitUntil(System.Predicate{`0},System.Int32)">
            <summary>
            Waits until the given expression is <c>true</c>.
            </summary>
            <param name="predicate">The expression to use.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:WatiN.Core.Area.#ctor(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Area"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:WatiN.Core.Area.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Area"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="elementFinder">The element finder.</param>
        </member>
        <member name="P:WatiN.Core.Area.Alt">
            <summary>
            Gets the alt-text of the area element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Area.Url">
            <summary>
            Gets the target url of the area element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Area.Coords">
            <summary>
            Gets the coordinates the area element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Area.Shape">
            <summary>
            Gets the shape of the area element.
            </summary>
        </member>
        <member name="T:WatiN.Core.DialogHandlers.RefreshWarningDialogHandler">
            <summary>
            This class handles the Refresh Warning dialog and does press
            the retry or cancel button when the dialog shows up.
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IDialogHandler.HandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Handles the dialog and returns true when handled with succes
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window,System.IntPtr)">
            <summary>
            Indicates wheter the dialoghandler can handle the given dialog window
            </summary>
            <param name="window"></param>
            <param name="mainWindowHwnd"></param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.BaseDialogHandler.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.DialogHandlers.BaseDialogHandler.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.DialogHandlers.BaseDialogHandler.HandleDialog(WatiN.Core.Native.Windows.Window)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.DialogHandlers.BaseDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window,System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.DialogHandlers.RefreshWarningDialogHandler.HandleDialog(WatiN.Core.Native.Windows.Window)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.DialogHandlers.RefreshWarningDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines whether this instance can handle the specified window by checking <see cref="P:WatiN.Core.Native.Windows.Window.StyleInHex"/>
            equals "94C801C5".
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if this instance [can handle dialog] the specified window; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WatiN.Core.Constraints.NoneConstraint">
            <summary>
            A constraint that matches nothing.
            </summary>
        </member>
        <member name="M:WatiN.Core.Constraints.NoneConstraint.WriteDescriptionTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.NoneConstraint.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Constraints.NoneConstraint.Instance">
            <summary>
            Gets the singleton instance of the None constraint.
            </summary>
        </member>
        <member name="T:WatiN.Core.Constraints.PredicateConstraint`1">
            <summary>
            A predicate-based constraint.
            </summary>
        </member>
        <member name="M:WatiN.Core.Constraints.PredicateConstraint`1.#ctor(System.Predicate{`0})">
            <summary>
            Creates a predicate constraint.
            </summary>
            <param name="predicate">The predicate</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="predicate"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.PredicateConstraint`1.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.PredicateConstraint`1.WriteDescriptionTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Logging.BaseLogWriter">
            <summary>
            This logger class can be used as a base class for your specific log class.
            </summary>
        </member>
        <member name="T:WatiN.Core.Interfaces.ILogWriter">
            <summary>
            Implement this interface if you create your own Logger class.
            For example <c>Logger.LogWriter = new MyLogWriter</c>.
            </summary>
        </member>
        <member name="T:WatiN.Core.FindByAttribute">
            <summary>
            Finds a component based on its attributes.
            </summary>
            <remarks>
            <para>
            If multiple attributes are specified, then all of them must jointly match the component.
            If no attributes are specified, then the first component of the required type will be used.
            </para>
            </remarks>
            <example>
            <code><![CDATA[
            public class HomePage : Page
            {
                [FindBy(Name = "signIn")]
                [Description("Sign in button.")]
                public Button SignInButton;
            }
            ]]></code>
            </example>
        </member>
        <member name="T:WatiN.Core.ComponentFinderAttribute">
            <summary>
            Abstract base class for attributes that are used to find components based on a
            declarative description.
            </summary>
            <seealso cref="T:WatiN.Core.FindByAttribute"/>
        </member>
        <member name="M:WatiN.Core.ComponentFinderAttribute.FindComponent(System.Type,WatiN.Core.IElementContainer)">
            <summary>
            Finds a component of the specified type within a container.
            </summary>
            <param name="componentType">The component type, not null.</param>
            <param name="container">The container, not null.</param>
            <returns>The component that was found, or null if not found.</returns>
        </member>
        <member name="M:WatiN.Core.FindByAttribute.#ctor">
            <summary>
            Finds a component based on its attributes.
            </summary>
        </member>
        <member name="M:WatiN.Core.FindByAttribute.FindComponent(System.Type,WatiN.Core.IElementContainer)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.FindByAttribute.GetConstraint">
            <summary>
            Gets the constraint expressed by this attribute.
            </summary>
            <returns>The constraint</returns>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.Alt">
            <summary>
            Gets or sets the alt text to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByAlt(System.String)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.AltRegex">
            <summary>
            Gets or sets the regular expression for the alt text to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByAlt(System.Text.RegularExpressions.Regex)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.Class">
            <summary>
            Gets or sets the (CSS) class name to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByClass(System.String)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.ClassRegex">
            <summary>
            Gets or sets the regular expression for the (CSS) class name to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByClass(System.Text.RegularExpressions.Regex)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.For">
            <summary>
            Gets or sets the id of the linked label element to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByFor(System.String)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.ForRegex">
            <summary>
            Gets or sets the regular expression for the id of the linked label to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByFor(System.Text.RegularExpressions.Regex)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.Id">
            <summary>
            Gets or sets the element id to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ById(System.String)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.IdRegex">
            <summary>
            Gets or sets the regular expression for the element id to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ById(System.Text.RegularExpressions.Regex)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.Name">
            <summary>
            Gets or sets the element name to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByName(System.String)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.NameRegex">
            <summary>
            Gets or sets the regular expression for the element name to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByName(System.Text.RegularExpressions.Regex)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.Text">
            <summary>
            Gets or sets the (inner) text to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByText(System.String)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.TextRegex">
            <summary>
            Gets or sets the regular expression for the (inner) text to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByText(System.Text.RegularExpressions.Regex)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.Url">
            <summary>
            Gets or sets the Url to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByUrl(System.String)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.UrlRegex">
            <summary>
            Gets or sets the regular expression for the Url to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByUrl(System.Text.RegularExpressions.Regex)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.Title">
            <summary>
            Gets or sets the title to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByTitle(System.String)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.TitleRegex">
            <summary>
            Gets or sets the regular expression for the title to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByTitle(System.Text.RegularExpressions.Regex)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.Value">
            <summary>
            Gets or sets the value to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByValue(System.String)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.ValueRegex">
            <summary>
            Gets or sets the regular expression for the value to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByValue(System.Text.RegularExpressions.Regex)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.Src">
            <summary>
            Gets or sets the source Url to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.BySrc(System.String)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.SrcRegex">
            <summary>
            Gets or sets the regular expression for the source Url to find.
            </summary>
            <seealso cref="M:WatiN.Core.Find.BySrc(System.Text.RegularExpressions.Regex)"/>
        </member>
        <member name="P:WatiN.Core.FindByAttribute.Index">
            <summary>
            Gets or sets the zero-based index of the element to find, or -1 if not constrained by index.
            </summary>
            <seealso cref="M:WatiN.Core.Find.ByIndex(System.Int32)"/>
        </member>
        <member name="T:WatiN.Core.DescriptionAttribute">
            <summary>
            Associates a description with a component.
            </summary>
            <example>
            <code><![CDATA[
            public class HomePage : Page
            {
                [FindBy(Name = "signIn")]
                [Description("Sign in button.")]
                public Button SignInButton;
            }
            ]]></code>
            </example>
        </member>
        <member name="T:WatiN.Core.ComponentDecoratorAttribute">
            <summary>
            Abstract base class for attributes that decorate components based on declarative metadata.
            </summary>
            <seealso cref="T:WatiN.Core.DescriptionAttribute"/>
        </member>
        <member name="M:WatiN.Core.ComponentDecoratorAttribute.Decorate(WatiN.Core.Component)">
            <summary>
            Decorates the component.
            </summary>
            <param name="component">The component, not null</param>
        </member>
        <member name="M:WatiN.Core.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Associates a description with a component.
            </summary>
            <param name="description">The description.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="description"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.DescriptionAttribute.Decorate(WatiN.Core.Component)">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.DescriptionAttribute.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="T:WatiN.Core.TextField">
            <summary>
            This class provides specialized functionality for a HTML input element of type 
            text password textarea hidden and for a HTML textarea element.
            </summary>
        </member>
        <member name="M:WatiN.Core.TextField.DefaultToString">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.TextField.Text">
            <summary>
            Returns the same as the Value property
            </summary>
        </member>
        <member name="T:WatiN.Core.FileUploadCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.FileUpload"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.BaseElementCollection`2">
            <summary>
            This class is mainly used by Watin internally as the base class for all 
            of the element collections.
            </summary>
            <typeparam name="TElement">The element type</typeparam>
            <typeparam name="TCollection">The derived collection type</typeparam>
        </member>
        <member name="T:WatiN.Core.BaseComponentCollection`2">
            <summary>
            Represents a read-only list of components that can be enumerated, searched and filtered.
            </summary>
            <typeparam name="TComponent">The component type</typeparam>
            <typeparam name="TCollection">The derived collection type</typeparam>
        </member>
        <member name="T:WatiN.Core.Interfaces.IComponentCollection`1">
            <summary>
            Represents a read-only list of components that can be enumerated, searched and filtered.
            </summary>
            <typeparam name="T">The component type</typeparam>
        </member>
        <member name="M:WatiN.Core.Interfaces.IComponentCollection`1.Exists(WatiN.Core.Constraints.Constraint)">
            <summary>
            Returns true if there exists an element within the collection
            that matches the given constraint.
            </summary>
            <param name="findBy">The constraint to match</param>
            <returns>True if a matching element exists</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IComponentCollection`1.Exists(System.Predicate{`0})">
            <summary>
            Returns true if there exists an element within the collection
            that matches the given predicate.
            </summary>
            <param name="predicate">The predicate to match</param>
            <returns>True if a matching element exists</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IComponentCollection`1.First">
            <summary>
            Gets the first element in the collection.
            </summary>
            <returns>The first element</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IComponentCollection`1.First(WatiN.Core.Constraints.Constraint)">
            <summary>
            Gets the first element in the collection that matches the given constraint.
            </summary>
            <param name="findBy">The constraint to match</param>
            <returns>True if a matching element exists</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IComponentCollection`1.First(System.Predicate{`0})">
            <summary>
            Gets the first element in the collection that matches the given predicate.
            </summary>
            <param name="predicate">The predicate to match</param>
            <returns>True if a matching element exists</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IComponentCollection`1.Filter(WatiN.Core.Constraints.Constraint)">
            <summary>
            Returns a filtered view of the collection consisting only of the elements that
            match the given constraint.
            </summary>
            <param name="findBy">The constraint to match</param>
            <returns>The filtered element collection</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IComponentCollection`1.Filter(System.Predicate{`0})">
            <summary>
            Returns a filtered view of the collection consisting only of the elements that
            match the given predicate.
            </summary>
            <param name="predicate">The predicate to match</param>
            <returns>The filtered element collection</returns>
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.#ctor">
            <summary>
            Creates a base collection.
            </summary>
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.Exists(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.Exists(System.Predicate{`0})">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.First">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.First(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.First(System.Predicate{`0})">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.Filter(WatiN.Core.Constraints.Constraint)">
            <summary>
            Returned a filtered view of the collection consisting only of the components that
            match the given constraint.
            </summary>
            <param name="findBy">The constraint to match</param>
            <returns>The filtered component collection</returns>
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.Filter(System.Predicate{`0})">
            <summary>
            Returns a filtered view of the collection consisting only of the components that
            match the given predicate.
            </summary>
            <param name="predicate">The predicate to match</param>
            <returns>The filtered component collection</returns>
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.CreateFilteredCollection(WatiN.Core.Constraints.Constraint)">
            <summary>
            Creates a filtered instance of the collection.
            </summary>
            <param name="findBy">The constraint, not null</param>
            <returns>The component collection</returns>
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.GetComponents">
            <summary>
            Gets the components of the collection.
            </summary>
            <returns>The collection components</returns>
        </member>
        <member name="M:WatiN.Core.BaseComponentCollection`2.CreateConstraintFromPredicate(System.Predicate{`0})">
            <summary>
            Creates a new constraint from a given component-based predicate.
            </summary>
            <param name="predicate">The predicate</param>
            <returns>The constraint</returns>
        </member>
        <member name="P:WatiN.Core.BaseComponentCollection`2.Count">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.BaseComponentCollection`2.Item(System.Int32)">
            <summary>
            Gets the component at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index</param>
            <returns>The component</returns>
        </member>
        <member name="P:WatiN.Core.BaseComponentCollection`2.Length">
            <summary>
            Gets the number of components in the collection.
            </summary>
            <value>The number of components in the collection</value>
        </member>
        <member name="P:WatiN.Core.BaseComponentCollection`2.Cache">
            <summary>
            Gets a lazily-populated list of all components within the collection.
            </summary>
        </member>
        <member name="T:WatiN.Core.IElementCollection`1">
            <summary>
            Represents a read-only list of elements that can be enumerated, searched and filtered.
            </summary>
            <typeparam name="TElement">The element type</typeparam>
        </member>
        <member name="M:WatiN.Core.IElementCollection`1.As``1">
            <summary>
            Wraps all elements in the collection as controls of a particular type.
            </summary>
            <typeparam name="T">The <see cref="T:WatiN.Core.Control`1"/> subclass</typeparam>
            <returns>The collection of controls</returns>
        </member>
        <member name="M:WatiN.Core.IElementCollection`1.Exists(System.String)">
            <summary>
            Returns true if there exists an element within the collection
            that matches the given element id.
            </summary>
            <param name="elementId">The element id to match</param>
            <returns>True if a matching element exists</returns>
        </member>
        <member name="M:WatiN.Core.IElementCollection`1.Exists(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns true if there exists an element within the collection
            that matches the given element id regular expression.
            </summary>
            <param name="elementId">The element id regular expression to match</param>
            <returns>True if a matching element exists</returns>
        </member>
        <member name="M:WatiN.Core.IElementCollection`1.Filter(WatiN.Core.Constraints.Constraint)">
            <summary>
            Returns a filtered view of the collection consisting only of the elements that
            match the given constraint.
            </summary>
            <param name="findBy">The constraint to match</param>
            <returns>The filtered element collection</returns>
        </member>
        <member name="M:WatiN.Core.IElementCollection`1.Filter(System.Predicate{`0})">
            <summary>
            Returns a filtered view of the collection consisting only of the elements that
            match the given predicate.
            </summary>
            <param name="predicate">The predicate to match</param>
            <returns>The filtered element collection</returns>
        </member>
        <member name="M:WatiN.Core.BaseElementCollection`2.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Creates a base collection.
            </summary>
            <param name="domContainer">The DOM container</param>
            <param name="elementFinder">The element finder</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="domContainer"/>
            or <paramref name="elementFinder"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.BaseElementCollection`2.As``1">
            <summary>
            Wraps all elements in the collection as controls of a particular type.
            </summary>
            <typeparam name="TControl">The <see cref="T:WatiN.Core.Control`1"/> subclass</typeparam>
            <returns>The collection of controls</returns>
        </member>
        <member name="M:WatiN.Core.BaseElementCollection`2.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.BaseElementCollection`2.Exists(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.BaseElementCollection`2.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <summary>
            Creates a filtered instance of the collection with the given finder.
            </summary>
            <param name="elementFinder">The element finder, not null</param>
            <returns>The element collection</returns>
        </member>
        <member name="M:WatiN.Core.BaseElementCollection`2.CreateFilteredCollection(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.BaseElementCollection`2.GetComponents">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.BaseElementCollection`2.DomContainer">
            <summary>
            Gets the DOM container to which the collection belongs.
            </summary>
        </member>
        <member name="P:WatiN.Core.BaseElementCollection`2.ElementFinder">
            <summary>
            Gets the underlying element finder.
            </summary>
        </member>
        <member name="M:WatiN.Core.FileUploadCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.FileUploadCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.FileUploadCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.ElementContainer`1">
            <summary>
            Represents an element that can contain other elements.
            </summary>
        </member>
        <member name="T:WatiN.Core.IElementContainer">
            <summary>
            This interface is used by all classes which provide access to (sub)elements.
            </summary>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Area(System.String)">
            <summary>
            Finds an image map area by its id.
            </summary>
            <param name="elementId">The area id</param>
            <returns>The area</returns>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Area(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an image map area by its id using a regular expression.
            </summary>
            <param name="elementId">The area id regular expression</param>
            <returns>The area</returns>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Area(WatiN.Core.Constraints.Constraint)">
            <summary>
            Finds an image map area by an Constraint.
            </summary>
            <param name="findBy">The Constraint</param>
            <returns>The area</returns>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Button(System.String)">
            <summary>
            Gets the specified Button by its id.
            </summary>
            <param name="elementId">The id of the element.</param>
            <exception cref="T:WatiN.Core.Exceptions.ElementNotFoundException">Thrown if the given <paramref name="elementId"/> isn't found.</exception>
            <example>
            This example opens a webpage, types some text and submits it by clicking
            the submit button.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://www.example.net");
                   ie.TextField(Find.ById("textFieldComment")).TypeText("This is a comment to submit");
                   ie.Button("buttonSubmit").Click;
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Button(WatiN.Core.Constraints.Constraint)">
            <summary>
            Gets the specified Button by using the given <see cref="T:WatiN.Core.Constraints.Constraint"/> to find the Button.
            <seealso cref="T:WatiN.Core.Find"/>
            </summary>
            <param name="findBy">The <see cref="T:WatiN.Core.Constraints.Constraint"/> class or one of it's subclasses to find an element by. The <see cref="T:WatiN.Core.Find"/> class provides factory methodes to create specialized instances.</param>
            <exception cref="T:WatiN.Core.Exceptions.ElementNotFoundException">Thrown if the given <paramref name="findBy"/> doesn't match an element in the webpage.</exception>
            <example>
            This example opens a webpage, types some text and submits it by clicking
            the submit button.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://www.example.net");
                   Id textFieldId = new Id("textFieldComment");
                   ie.TextField(textFieldId).TypeText("This is a comment to submit");
                   ie.Button(Find.ByText("Submit")).Click;
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Child(System.String)">
            <summary>
            Child returns a child element with the specified id.
            </summary>
            <param name="elementId">The element id to match</param>
            <returns>The element</returns>
            <example>
            <code>
            ie.Child("id");
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Child(System.Text.RegularExpressions.Regex)">
            <summary>
            Child returns a child element with an id that matches the specified regular expression.
            </summary>
            <param name="elementId">The element id regular expression to match</param>
            <returns>The element</returns>
            <example>
            <code>
            ie.Child(new Regex("id"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Child(WatiN.Core.Constraints.Constraint)">
            <summary>
            Child returns a child element that matches the specified <see cref="T:WatiN.Core.Constraints.Constraint"/>.
            </summary>
            <param name="findBy">The constraint to match</param>
            <returns>The element</returns>
            <example>
            <code>
            ie.Child(Find.ById("id"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Child(System.Predicate{WatiN.Core.Element})">
            <summary>
            Child returns a child element that matches the specified <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="predicate">The predicate to match</param>
            <returns>The element</returns>
            <example>
            <code>
            ie.Child(div =&gt; div.Id == "id");
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Children">
            <summary>
            Gets a collection of all child elements.
            </summary>
            <returns>The child element collection</returns>
            <example>
            <code>
            ie.Children();
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.ChildOfType``1(System.String)">
            <summary>
            ChildOfType returns a child element of the desired type with the specified id.
            </summary>
            <remarks>
            <para>
            Ordinarily you should call the element-type specific method such as <see cref="M:WatiN.Core.IElementContainer.Div(System.String)"/>.
            This generic method is intended to be used in situations where the type of the element
            may vary and is specified by a type parameter in the calling code.
            </para>
            </remarks>
            <typeparam name="TElement">The element type</typeparam>
            <param name="elementId">The element id to match</param>
            <returns>The element</returns>
            <example>
            <code>
            ie.ChildOfType&lt;Div&gt;("id");
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.ChildOfType``1(System.Text.RegularExpressions.Regex)">
            <summary>
            ChildOfType returns a child element of the desired type with an id that matches the specified regular expression.
            </summary>
            <remarks>
            <para>
            Ordinarily you should call the element-type specific method such as <see cref="M:WatiN.Core.IElementContainer.Div(System.Text.RegularExpressions.Regex)"/>.
            This generic method is intended to be used in situations where the type of the element
            may vary and is specified by a type parameter in the calling code.
            </para>
            </remarks>
            <typeparam name="TElement">The element type</typeparam>
            <param name="elementId">The element id regular expression to match</param>
            <returns>The element</returns>
            <example>
            <code>
            ie.ChildOfType&lt;Div&gt;(new Regex("id"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.ChildOfType``1(WatiN.Core.Constraints.Constraint)">
            <summary>
            ChildOfType returns a child element of the desired type that matches the specified <see cref="T:WatiN.Core.Constraints.Constraint"/>.
            </summary>
            <remarks>
            <para>
            Ordinarily you should call the element-type specific method such as <see cref="M:WatiN.Core.IElementContainer.Div(WatiN.Core.Constraints.Constraint)"/>.
            This generic method is intended to be used in situations where the type of the element
            may vary and is specified by a type parameter in the calling code.
            </para>
            </remarks>
            <typeparam name="TElement">The element type</typeparam>
            <param name="findBy">The constraint to match</param>
            <returns>The element</returns>
            <example>
            <code>
            ie.ChildOfType&lt;Div&gt;(Find.ById("id"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.ChildOfType``1(System.Predicate{``0})">
            <summary>
            ChildOfType returns a child element of the desired type that matches the specified <see cref="T:System.Predicate`1"/>.
            </summary>
            <remarks>
            <para>
            Ordinarily you should call the element-type specific method such as <see cref="M:WatiN.Core.IElementContainer.Div(System.Predicate{WatiN.Core.Div})"/>.
            This generic method is intended to be used in situations where the type of the element
            may vary and is specified by a type parameter in the calling code.
            </para>
            </remarks>
            <typeparam name="TElement">The element type</typeparam>
            <param name="predicate">The predicate to match</param>
            <returns>The element</returns>
            <example>
            <code>
            ie.ChildOfType&lt;Div&gt;(div =&gt; div.Id == "id");
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.ChildrenOfType``1">
            <summary>
            Gets a collection of all child elements of the specified type.
            </summary>
            <remarks>
            <para>
            Ordinarily you should call the element-type specific method such as <see cref="P:WatiN.Core.IElementContainer.Divs"/>.
            This generic method is intended to be used in situations where the type of the element
            may vary and is specified by a type parameter in the calling code.
            </para>
            </remarks>
            <typeparam name="TElement">The element type</typeparam>
            <returns>The child element collection</returns>
            <example>
            <code>
            ie.ChildrenOfType&lt;Div&gt;();
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.ElementOfType``1(System.String)">
            <summary>
            ElementOfTypes an element of the desired type with the specified id.
            </summary>
            <remarks>
            <para>
            Ordinarily you should call the element-type specific method such as <see cref="M:WatiN.Core.IElementContainer.Div(System.String)"/>.
            This generic method is intended to be used in situations where the type of the element
            may vary and is specified by a type parameter in the calling code.
            </para>
            </remarks>
            <typeparam name="TElement">The element type</typeparam>
            <param name="elementId">The element id to match</param>
            <returns>The element</returns>
            <example>
            <code>
            ie.ElementOfType&lt;Div&gt;("id");
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.ElementOfType``1(System.Text.RegularExpressions.Regex)">
            <summary>
            ElementOfTypes an element of the desired type with an id that matches the specified regular expression.
            </summary>
            <remarks>
            <para>
            Ordinarily you should call the element-type specific method such as <see cref="M:WatiN.Core.IElementContainer.Div(System.Text.RegularExpressions.Regex)"/>.
            This generic method is intended to be used in situations where the type of the element
            may vary and is specified by a type parameter in the calling code.
            </para>
            </remarks>
            <typeparam name="TElement">The element type</typeparam>
            <param name="elementId">The element id regular expression to match</param>
            <returns>The element</returns>
            <example>
            <code>
            ie.ElementOfType&lt;Div&gt;(new Regex("id"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.ElementOfType``1(WatiN.Core.Constraints.Constraint)">
            <summary>
            ElementOfTypes an element of the desired type that matches the specified <see cref="T:WatiN.Core.Constraints.Constraint"/>.
            </summary>
            <remarks>
            <para>
            Ordinarily you should call the element-type specific method such as <see cref="M:WatiN.Core.IElementContainer.Div(WatiN.Core.Constraints.Constraint)"/>.
            This generic method is intended to be used in situations where the type of the element
            may vary and is specified by a type parameter in the calling code.
            </para>
            </remarks>
            <typeparam name="TElement">The element type</typeparam>
            <param name="findBy">The constraint to match</param>
            <returns>The element</returns>
            <example>
            <code>
            ie.ElementOfType&lt;Div&gt;(Find.ById("id"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.ElementOfType``1(System.Predicate{``0})">
            <summary>
            ElementOfTypes an element of the desired type that matches the specified <see cref="T:System.Predicate`1"/>.
            </summary>
            <remarks>
            <para>
            Ordinarily you should call the element-type specific method such as <see cref="M:WatiN.Core.IElementContainer.Div(System.Predicate{WatiN.Core.Div})"/>.
            This generic method is intended to be used in situations where the type of the element
            may vary and is specified by a type parameter in the calling code.
            </para>
            </remarks>
            <typeparam name="TElement">The element type</typeparam>
            <param name="predicate">The predicate to match</param>
            <returns>The element</returns>
            <example>
            <code>
            ie.ElementOfType&lt;Div&gt;(div =&gt; div.Id == "id");
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.ElementsOfType``1">
            <summary>
            Gets a collection of all elements of the specified type.
            </summary>
            <remarks>
            <para>
            Ordinarily you should call the element-type specific method such as <see cref="P:WatiN.Core.IElementContainer.Divs"/>.
            This generic method is intended to be used in situations where the type of the element
            may vary and is specified by a type parameter in the calling code.
            </para>
            </remarks>
            <typeparam name="TElement">The element type</typeparam>
            <returns>The element collection</returns>
            <example>
            <code>
            ie.ElementsOfType&lt;Div&gt;();
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Control``1">
            <summary>
            Gets a control object of the desired type that appears first within this element container.
            </summary>
            <typeparam name="TControl">The <see cref="T:WatiN.Core.Control`1"/> subclass</typeparam>
            <returns>The control object</returns>
            <example>
            <code>
            ie.Control&lt;Header&gt;().MyAccountTab.Click();
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Control``1(System.String)">
            <summary>
            Gets a control object of the desired type with the specified id.
            </summary>
            <param name="elementId">The element id to match</param>
            <typeparam name="TControl">The <see cref="T:WatiN.Core.Control`1"/> subclass</typeparam>
            <returns>The control object</returns>
            <example>
            <code>
            ie.Control&lt;CalendarControl&gt;("fromDateCalendar").SetDate(DateTime.Date);
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Control``1(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets a control object of the desired type with an id that matches the specified regular expression.
            </summary>
            <param name="elementId">The element id regular expression to match</param>
            <typeparam name="TControl">The <see cref="T:WatiN.Core.Control`1"/> subclass</typeparam>
            <returns>The control object</returns>
            <example>
            <code>
            ie.Control&lt;CalendarControl&gt;("fromDateCalendar").SetDate(DateTime.Date);
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Control``1(WatiN.Core.Constraints.Constraint)">
            <summary>
            Gets a control object of the desired type that matches the specified <see cref="T:WatiN.Core.Constraints.Constraint"/>.
            </summary>
            <param name="findBy">The constraint to match</param>
            <typeparam name="TControl">The <see cref="T:WatiN.Core.Control`1"/> subclass</typeparam>
            <returns>The control object</returns>
            <example>
            <code>
            ie.Control&lt;CalendarControl&gt;(Find.ById("fromDateCalendar")).SetDate(DateTime.Date);
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Control``1(System.Predicate{``0})">
            <summary>
            Gets a control object of the desired type that matches the specified <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="predicate">The predicate to match</param>
            <typeparam name="TControl">The <see cref="T:WatiN.Core.Control`1"/> subclass</typeparam>
            <returns>The control</returns>
            <example>
            <code>
            ie.Control&lt;CalendarControl&gt;(control =&gt; control.Name == "SomeName").SetDate(DateTime.Date);
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IElementContainer.Controls``1">
            <summary>
            Gets a collection of all controls of the desired type.
            </summary>
            <typeparam name="TControl">The <see cref="T:WatiN.Core.Control`1"/> subclass</typeparam>
            <returns>The control collection</returns>
            <example>
            <code>
            ie.Control&lt;CalendarControl&gt;(control =&gt; control.Name == "SomeName").SetDate(DateTime.Date);
            </code>
            </example>
        </member>
        <member name="P:WatiN.Core.IElementContainer.Areas">
            <summary>
            Gets the collection of areas.
            </summary>
        </member>
        <member name="P:WatiN.Core.IElementContainer.Buttons">
            <summary>
            Gets a typed collection of <see cref="T:WatiN.Core.Button"/> instances within this <see cref="T:WatiN.Core.Document"/>.
            </summary>
                /// <example>
            This example opens a webpage and writes out the text of each button to the
            debug window.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://www.example.net");
                  
                   ButtonCollection buttons = ie.Buttons;
            
                   foreach (Button button in buttons)
                   {
                     System.Diagnostics.Debug.Writeline(button.Text);
                   }
            
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ElementOfType``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ElementOfType``1(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ElementOfType``1(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ElementOfType``1(System.Predicate{``0})">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ElementsOfType``1">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.Control``1">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.Control``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.Control``1(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.Control``1(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.Control``1(System.Predicate{``0})">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.Controls``1">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.Child(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.Child(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.Child(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.Child(System.Predicate{WatiN.Core.Element})">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.Children">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ChildOfType``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ChildOfType``1(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ChildOfType``1(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ChildOfType``1(System.Predicate{``0})">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ChildrenOfType``1">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ChildWithTag(System.String,WatiN.Core.Constraints.Constraint,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ChildrenWithTag(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementContainer`1.ChildrenWithTag(System.Collections.Generic.IList{WatiN.Core.ElementTag})">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.DomContainer">
            <summary>
            This class hosts functionality for classes which are an entry point
            to a document and its elements and/or frames.
            </summary>
        </member>
        <member name="T:WatiN.Core.Document">
            <summary>
            This class gives access to all contained elements of the webpage or the
            frames within this webpage.
            </summary>
            <example>
            This example opens a webpage, types some text and submits it by clicking
            the submit button.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://www.example.net");
            
                   ie.TextField(Find.ById("textFieldComment")).TypeText("This is a comment to submit");
                   ie.Button(Find.ByText("Submit")).Click;
            
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Document"/> class.
            Mainly used by WatiN internally. You should override NativeDocument
            and set DomContainer before accessing any method or property of 
            this class.
            </summary>
        </member>
        <member name="M:WatiN.Core.Document.#ctor(WatiN.Core.DomContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Document"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
        </member>
        <member name="M:WatiN.Core.Document.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WatiN.Core.Document.ContainsText(System.String)">
            <summary>
            Determines whether the text inside the HTML Body element contains the given <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns>
                <c>true</c> if the specified text is contained in <see cref="P:WatiN.Core.Document.Html"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Document.ContainsText(System.Text.RegularExpressions.Regex)">
            <summary>
            Determines whether the text inside the HTML Body element contains the given <paramref name="regex"/>.
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>
                <c>true</c> if the specified text is contained in <see cref="P:WatiN.Core.Document.Html"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Document.WaitUntilContainsText(System.String)">
            <summary>
            Waits until the text is inside the HTML Body element contains the given <paramref name="text" />.
            Will time out after <see name="Settings.WaitUntilExistsTimeOut" />
            </summary>
            <param name="text">The text.</param>
            <returns>
                <see name="TimeoutException"/> if the specified text is not found within the time out period.
            </returns>
        </member>
        <member name="M:WatiN.Core.Document.WaitUntilContainsText(System.String,System.Int32)">
            <summary>
            Waits until the text is inside the HTML Body element contains the given <paramref name="text" />.
            </summary>
            <param name="text">The text.</param>
            <param name="timeOut">The number of seconds to wait</param>
            <returns>
                <see name="TimeoutException"/> if the specified text is not found within the time out period.
            </returns>
        </member>
        <member name="M:WatiN.Core.Document.WaitUntilContainsText(System.Text.RegularExpressions.Regex)">
            <summary>
            Waits until the <paramref name="regex" /> matches some text inside the HTML Body element.
            Will time out after <see name="Settings.WaitUntilExistsTimeOut" />
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>
                <see name="TimeoutException"/> if the specified text is not found within the time out period.
            </returns>
        </member>
        <member name="M:WatiN.Core.Document.WaitUntilContainsText(System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Waits until the <paramref name="regex" /> matches some text inside the HTML Body element.
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <param name="timeOut">The number of seconds to wait</param>
            <returns>
                <see name="TimeoutException"/> if the specified text is not found within the time out period.
            </returns>
        </member>
        <member name="M:WatiN.Core.Document.FindText(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the text inside the HTML Body element that matches the regular expression.
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>The matching text, or null if none.</returns>
        </member>
        <member name="M:WatiN.Core.Document.Frame(System.String)">
            <summary>
            Gets the specified frame by its id.
            </summary>
            <param name="id">The id of the frame.</param>
            <exception cref="T:WatiN.Core.Exceptions.FrameNotFoundException">Thrown if the given <paramref name="id"/> isn't found.</exception>
        </member>
        <member name="M:WatiN.Core.Document.Frame(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the specified frame by its id.
            </summary>
            <param name="id">The regular expression to match with the id of the frame.</param>
            <exception cref="T:WatiN.Core.Exceptions.FrameNotFoundException">Thrown if the given <paramref name="id"/> isn't found.</exception>
        </member>
        <member name="M:WatiN.Core.Document.Frame(WatiN.Core.Constraints.Constraint)">
            <summary>
            Gets the specified frame by its name.
            </summary>
            <param name="findBy">The name of the frame.</param>
            <exception cref="T:WatiN.Core.Exceptions.FrameNotFoundException">Thrown if the given name isn't found.</exception>
        </member>
        <member name="M:WatiN.Core.Document.RunScript(System.String)">
            <summary>
            Runs the javascript code in IE.
            </summary>
            <param name="javaScriptCode">The javascript code.</param>
        </member>
        <member name="M:WatiN.Core.Document.RunScript(System.String,System.String)">
            <summary>
            Runs the script code in IE.
            </summary>
            <param name="scriptCode">The script code.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:WatiN.Core.Document.Eval(System.String)">
            <summary>
            Evaluates the specified JavaScript code within the scope of this
            document. Returns the value computed by the last expression in the
            code block after implicit conversion to a string.
            </summary>
            <example>
            The following example shows an alert dialog then returns the string "4".
            <code>
            Eval("window.alert('Hello world!'); 2 + 2");
            </code>
            </example>
            <param name="javaScriptCode">The JavaScript code</param>
            <returns>The result converted to a string</returns>
            <exception cref="T:WatiN.Core.Exceptions.JavaScriptException">Thrown when the JavaScript code cannot be evaluated
            or throws an exception during evaluation</exception>
        </member>
        <member name="M:WatiN.Core.Document.Page``1">
            <summary>
            Gets a page object of the desired type that wraps this document.
            </summary>
            <typeparam name="TPage">The <see cref="M:WatiN.Core.Document.Page``1"/> subclass</typeparam>
            <returns>The page object</returns>
            <example>
            <code>
            browser.Page&lt;SignInPage&gt;&gt;().SignIn("somebody", "letmein");
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Document.ElementOfType``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.ElementOfType``1(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.ElementOfType``1(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.ElementOfType``1(System.Predicate{``0})">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.ElementsOfType``1">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.Control``1">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.Control``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.Control``1(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.Control``1(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.Control``1(System.Predicate{``0})">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.Controls``1">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.Child(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.Child(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.Child(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.Child(System.Predicate{WatiN.Core.Element})">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.Children">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.ChildOfType``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.ChildOfType``1(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.ChildOfType``1(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.ChildOfType``1(System.Predicate{``0})">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.ChildrenOfType``1">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.ChildWithTag(System.String,WatiN.Core.Constraints.Constraint,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.ChildrenWithTag(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Document.ChildrenWithTag(System.Collections.Generic.IList{WatiN.Core.ElementTag})">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Document.NativeDocument">
            <summary>
            Gives access to the wrapped INativeDocument interface. This makes it
            possible to get even more control of the webpage by using wrapped element.
            </summary>
            <value>The NativeDocument.</value>
        </member>
        <member name="P:WatiN.Core.Document.Html">
            <summary>
            Gets the HTML of the Body part of the webpage.
            </summary>
            <value>The HTML.</value>
        </member>
        <member name="P:WatiN.Core.Document.Body">
            <summary>
            Gets the Body element of the webpage, or null if none.
            </summary>
            <value>The body, or null if none.</value>
        </member>
        <member name="P:WatiN.Core.Document.Text">
            <summary>
            Gets the inner text of the Body part of the webpage.
            </summary>
            <value>The inner text.</value>
        </member>
        <member name="P:WatiN.Core.Document.Uri">
             <summary>
             Returns a System.Uri instance of the url displayed in the address bar of the browser, 
             of the currently displayed web page.
             </summary>
             <example>
             The following example creates a new Internet Explorer instances, navigates to
             the WatiN Project website on SourceForge and writes the Uri of the
             currently displayed webpage to the debug window.
             <code>
             using WatiN.Core;
             using System.Diagnostics;
            
             namespace NewIEExample
             {
                public class WatiNWebsite
                {
                  public WatiNWebsite()
                  {
                    IE ie = new IE("http://watin.sourceforge.net");
                    Debug.WriteLine(ie.Uri.ToString());
                  }
                }
              }
             </code>
             </example>
        </member>
        <member name="P:WatiN.Core.Document.Url">
             <summary>
             Returns the url, as displayed in the address bar of the browser, of the currently
             displayed web page.
             </summary>
             <example>
             The following example creates a new Internet Explorer instances, navigates to
             the WatiN Project website on SourceForge and writes the Url of the
             currently displayed webpage to the debug window.
             <code>
             using WatiN.Core;
             using System.Diagnostics;
            
             namespace NewIEExample
             {
                public class WatiNWebsite
                {
                  public WatiNWebsite()
                  {
                    IE ie = new IE("http://watin.sourceforge.net");
                    Debug.WriteLine(ie.Url);
                  }
                }
              }
             </code>
             </example>
        </member>
        <member name="P:WatiN.Core.Document.Title">
            <summary>
            Gets the title of the webpage.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:WatiN.Core.Document.ActiveElement">
            <summary>
            Gets the active element in the webpage.
            </summary>
            <value>The active element or <c>null</c> if no element has the focus.</value>
        </member>
        <member name="P:WatiN.Core.Document.Frames">
            <summary>
            Gets a typed collection of <see cref="T:WatiN.Core.Frame"/> opend within this <see cref="T:WatiN.Core.Document"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Document.DomContainer">
            <summary>
            Gets the document's DOM container.
            </summary>
        </member>
        <member name="M:WatiN.Core.DomContainer.OnGetNativeDocument">
            <summary>
            Gets the native document.
            </summary>
            <returns>The native document.</returns>
        </member>
        <member name="M:WatiN.Core.DomContainer.StartDialogWatcher">
            <summary>
            Call this function (from a subclass) as soon as the process is started.
            </summary>
        </member>
        <member name="M:WatiN.Core.DomContainer.AddDialogHandler(WatiN.Core.Interfaces.IDialogHandler)">
            <summary>
            Adds the dialog handler.
            </summary>
            <param name="handler">The dialog handler.</param>
        </member>
        <member name="M:WatiN.Core.DomContainer.RemoveDialogHandler(WatiN.Core.Interfaces.IDialogHandler)">
            <summary>
            Removes the dialog handler.
            </summary>
            <param name="handler">The dialog handler.</param>
        </member>
        <member name="M:WatiN.Core.DomContainer.Dispose(System.Boolean)">
            <summary>
            This method must be called by its inheritor to dispose references
            to internal resources.
            </summary>
        </member>
        <member name="M:WatiN.Core.DomContainer.WaitForComplete">
            <summary>
            Waits for the page to be completely loaded using the Settings.WaitForCompleteTimeOut setting
            </summary>
        </member>
        <member name="M:WatiN.Core.DomContainer.WaitForComplete(System.Int32)">
            <summary>
            Waits for the page to be completely loaded.
            </summary>
            <param name="waitForCompleteTimeOut">The number of seconds to wait before timing out</param>
        </member>
        <member name="M:WatiN.Core.DomContainer.WaitForComplete(WatiN.Core.Interfaces.IWait)">
            <summary>
            Waits for the page to be completely loaded
            </summary>
            <param name="waitForComplete">The wait for complete.</param>
        </member>
        <member name="M:WatiN.Core.DomContainer.CaptureWebPageToFile(System.String)">
            <summary>
            Captures the web page to file. The file extension is used to 
            determine the image format. The following image formats are
            supported (if the encoder is available on the machine):
            jpg, tif, gif, png, bmp.
            If you want more control over the output, use the <see cref="T:WatiN.Core.UtilityClasses.CaptureWebPage"/> class.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:WatiN.Core.DomContainer.Recycle">
            <summary>
            Recycles the DomContainer to its initially created state so that it can be reused.
            </summary>
        </member>
        <member name="P:WatiN.Core.DomContainer.IsDisposed">
            <summary>
            <c>true</c> if the <see cref="M:WatiN.Core.DomContainer.Dispose(System.Boolean)"/> method has been called to release resources.
            </summary>
        </member>
        <member name="P:WatiN.Core.DomContainer.ProcessID">
            <summary>
            Gets the process ID the Internet Explorer or HTMLDialog is running in.
            </summary>
            <value>The process ID.</value>
        </member>
        <member name="P:WatiN.Core.DomContainer.NativeDocument">
            <summary>
            Returns a browser specific <see cref="T:WatiN.Core.Native.INativeDocument"/> instance.
            </summary>
        </member>
        <member name="P:WatiN.Core.DomContainer.DialogWatcher">
            <summary>
            Gets the dialog watcher.
            </summary>
            <value>The dialog watcher.</value>
        </member>
        <member name="M:WatiN.Core.Interfaces.ISettings.Reset">
            <summary>
            Resets this instance to the initial defaults.
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.ISettings.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISettings.AttachToBrowserTimeOut">
            <summary>
            Get or set the default time out used when calling IE ie = IE.AttachToIE(findBy).
            The default value is 30 seconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISettings.WaitUntilExistsTimeOut">
            <summary>
            Get or set the default time out used when calling Element.WaitUntilExists().
            The default value is 30 seconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISettings.WaitForCompleteTimeOut">
            <summary>
            Get or set the default time out used when calling ie.WaitForComplete().
            The default value is 30 seconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISettings.SleepTime">
            <summary>
            Get or set the default sleep time used when WatiN is waiting for something in a (retry) loop.
            The default value is 100 milliseconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISettings.HighLightElement">
            <summary>
            Turn highlighting of elements by WatiN on (<c>true</c>) or off (<c>false</c>).
            Highlighting of an element is done when WatiN fires an event on an
            element or executes a methode (like TypeText).
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISettings.HighLightColor">
            <summary>
            Set or get the color to highlight elements. Will be used if
            HighLightElement is set to <c>true</c>.
            Visit http://msdn.microsoft.com/workshop/author/dhtml/reference/colors/colors_name.asp
            for a full list of supported RGB colors and their names.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISettings.AutoCloseDialogs">
            <summary>
            Turn auto closing of dialogs on (<c>true</c>) or off (<c>false</c>).
            You need to set this value before creating or attaching to any 
            Internet Explorer to have effect.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISettings.AutoStartDialogWatcher">
            <summary>
            Gets or sets a value indicating whether to auto start the dialog watcher at all.
            This value is evaluated everytime a new IE instance is created
            </summary>
            <value>
            	<c>true</c> if dialog watcher should be started when a new IE instance is created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISettings.AutoMoveMousePointerToTopLeft">
            <summary>
            Gets or sets a value indicating whether to move the cursor to the top left
            of the screen everytime a new IE instance is created.
            </summary>
            <value>
            	<c>true</c> when mouse should be moved to top left; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISettings.MakeNewIeInstanceVisible">
            <summary>
            Gets or sets a value indicating whether to make a new <see cref="T:WatiN.Core.IE"/> instance visible.
            </summary>
            <value>
            	<c>true</c> if you want to make a new <see cref="T:WatiN.Core.IE"/> instance visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISettings.MakeNewIe8InstanceNoMerge">
            <summary>
            Gets or sets a value indicating whether to make a new <see cref="T:WatiN.Core.IE"/> instance without session cookie merging.
            </summary>
            <value>
            	<c>true</c> if you want to make a new <see cref="T:WatiN.Core.IE"/> instance with cookie merging; otherwise, <c>false</c>.
            </value>
            <remarks>read the section on NoMerge at http://blogs.msdn.com/ie/archive/2008/07/28/ie8-and-reliability.aspx</remarks>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISettings.CloseExistingFireFoxInstances">
            <summary>
            Gets or sets a value indicating whether existing firefox instances will be closed before creating a new instance.
            </summary>
            <value>
            	<c>true</c> if existing firefox instances need to be closed otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WatiN.Core.DefaultSettings.Reset">
            <summary>
            Resets this instance to the initial defaults.
            </summary>
        </member>
        <member name="M:WatiN.Core.DefaultSettings.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WatiN.Core.DefaultSettings.AttachToBrowserTimeOut">
            <summary>
            Get or set the default time out used when calling IE ie = IE.AttachToIE(findBy).
            The default value is 30 seconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.DefaultSettings.WaitUntilExistsTimeOut">
            <summary>
            Get or set the default time out used when calling Element.WaitUntilExists().
            The default value is 30 seconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.DefaultSettings.WaitForCompleteTimeOut">
            <summary>
            Get or set the default time out used when calling ie.WaitForComplete().
            The default value is 30 seconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.DefaultSettings.SleepTime">
            <summary>
            Get or set the default sleep time used when WatiN is waiting for something in a (retry) loop.
            The default value is 100 milliseconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.DefaultSettings.HighLightElement">
            <summary>
            Turn highlighting of elements by WatiN on (<c>true</c>) or off (<c>false</c>).
            Highlighting of an element is done when WatiN fires an event on an
            element or executes a methode (like TypeText).
            </summary>
        </member>
        <member name="P:WatiN.Core.DefaultSettings.HighLightColor">
            <summary>
            Set or get the color to highlight elements. Will be used if
            HighLightElement is set to <c>true</c>.
            Visit http://msdn.microsoft.com/workshop/author/dhtml/reference/colors/colors_name.asp
            for a full list of supported RGB colors and their names.
            </summary>
        </member>
        <member name="P:WatiN.Core.DefaultSettings.AutoCloseDialogs">
            <summary>
            Turn auto closing of dialogs on (<c>true</c>) or off (<c>false</c>).
            You need to set this value before creating or attaching to any 
            Internet Explorer to have effect.
            </summary>
        </member>
        <member name="P:WatiN.Core.DefaultSettings.AutoStartDialogWatcher">
            <summary>
            Gets or sets a value indicating whether to auto start the dialog watcher at all.
            This value is evaluated everytime a new IE instance is created
            </summary>
            <value>
            	<c>true</c> if dialog watcher should be started when a new IE instance is created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.DefaultSettings.AutoMoveMousePointerToTopLeft">
            <summary>
            Gets or sets a value indicating whether to move the cursor to the top left
            of the screen everytime a new IE instance is created.
            </summary>
            <value>
            	<c>true</c> when mouse should be moved to top left; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.DefaultSettings.MakeNewIeInstanceVisible">
            <summary>
            Gets or sets a value indicating whether to make a new <see cref="T:WatiN.Core.IE"/> instance visible.
            </summary>
            <value>
            	<c>true</c> if you want to make a new <see cref="T:WatiN.Core.IE"/> instance visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.DefaultSettings.MakeNewIe8InstanceNoMerge">
            <summary>
            Gets or sets a value indicating whether to make a new <see cref="T:WatiN.Core.IE"/> instance without session cookie merging.
            </summary>
            <value>
            	<c>true</c> if you want to make a new <see cref="T:WatiN.Core.IE"/> instance with cookie merging; otherwise, <c>false</c>.
            </value>
            <remarks>read the section on NoMerge at http://blogs.msdn.com/ie/archive/2008/07/28/ie8-and-reliability.aspx</remarks>
        </member>
        <member name="T:WatiN.Core.Constraints.ElementConstraint">
            <summary>
            An element-based constraint.
            </summary>
        </member>
        <member name="M:WatiN.Core.Constraints.ElementConstraint.#ctor(WatiN.Core.Comparers.Comparer{WatiN.Core.Element})">
            <summary>
            Creates an element constraint.
            </summary>
            <param name="comparer">The comparer</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="comparer"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.ElementConstraint.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.ElementConstraint.WriteDescriptionTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Constraints.ElementConstraint.Comparer">
            <summary>
            Gets the element comparer.
            </summary>
        </member>
        <member name="T:WatiN.Core.Native.JSElementCollectionBase">
            <summary>
            Base element collection common to all browsers that communicate with WatiN using javascript.
            </summary>
        </member>
        <member name="T:WatiN.Core.Native.INativeElementCollection">
            <summary>
            Provides access to the native elements contained within an element or document.
            </summary>
            <remarks>
            <para>
            The collection recursively enumerates all elements within a subtree of the document.
            </para>
            </remarks>
        </member>
        <member name="M:WatiN.Core.Native.INativeElementCollection.GetElements">
            <summary>
            Gets the native elements within the collection.
            </summary>
            <returns>The enumeration of native elements</returns>
        </member>
        <member name="M:WatiN.Core.Native.INativeElementCollection.GetElementsByTag(System.String)">
            <summary>
            Gets the native elements within the collection by tag name.
            </summary>
            <param name="tagName">The tag name to search for</param>
            <returns>The enumeration of native elements</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="tagName"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Native.INativeElementCollection.GetElementsById(System.String)">
            <summary>
            Gets the native elements within the collection by id.
            </summary>
            <param name="id">The id to find</param>
            <returns>The enumeration of native elements</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Native.JSElementCollectionBase.GetElements">
            <summary>
            Gets all the native elements.
            </summary>
            <returns>Enumeration of native elements</returns>
        </member>
        <member name="M:WatiN.Core.Native.JSElementCollectionBase.GetElementByTagImpl(System.String)">
            <summary>
            Gets a collection of elements by tag name.
            </summary>
            <param name="tagName">Name of the tag.</param>
            <returns>Collection of elements for the given <paramref name="tagName"/>.</returns>
        </member>
        <member name="M:WatiN.Core.Native.JSElementCollectionBase.GetElementsByIdImpl(System.String)">
            <summary>
            Gets a collection of elements by id.
            </summary>
            <param name="id">The id of the element.</param>
            <returns>Collection of elements for the given <paramref name="id"/>.</returns>
        </member>
        <member name="M:WatiN.Core.Native.JSElementCollectionBase.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.JSElementCollectionBase.GetElementsById(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.JSElementCollectionBase.GetElementsByTag(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Browser.BringToFront">
            <summary>
            Brings the referenced Internet Explorer to the front (makes it the top window)
            </summary>
        </member>
        <member name="M:WatiN.Core.Browser.GetWindowStyle">
            <summary>
            Gets the window style.
            </summary>
            <returns>The style currently applied to the ie window.</returns>
        </member>
        <member name="M:WatiN.Core.Browser.ShowWindow(WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle)">
            <summary>
            Make the referenced Internet Explorer full screen, minimized, maximized and more.
            </summary>
            <param name="showStyle">The style to apply.</param>
        </member>
        <member name="M:WatiN.Core.Browser.PressTab">
            <summary>
            Sends a Tab key to the IE window to simulate tabbing through
            the elements (and adres bar).
            </summary>
        </member>
        <member name="M:WatiN.Core.Browser.GoTo(System.Uri)">
            <summary>
            Navigates Internet Explorer to the given <paramref name="url" />.
            </summary>
            <param name="url">The URL specified as a wel formed Uri.</param>
            <example>
            The following example creates an Uri and Internet Explorer instance and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            using System;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   Uri URL = new Uri("http://watin.sourceforge.net");
                   IE ie = new IE();
                   ie.GoTo(URL);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.GoToNoWait(System.String)">
            <summary>
            Navigates the browser to the given <paramref name="url" /> 
            without waiting for the page load to be finished.
            </summary>
            <param name="url">The URL to GoTo.</param>
            <example>
            The following example creates a new Internet Explorer instance and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE();
                   ie.GoToNoWait("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.GoToNoWait(System.Uri)">
            <summary>
            Navigates the browser to the given <paramref name="url" /> 
            without waiting for the page load to be finished.
            </summary>
            <param name="url">The URL to GoTo.</param>
            <example>
            The following example creates a new Internet Explorer instance and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   Uri URL = new Uri("http://watin.sourceforge.net");
                   IE ie = new IE();
                   ie.GoToNoWait(URL);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.GoTo(System.String)">
            <summary>
            Navigates Internet Explorer to the given <paramref name="url" />.
            </summary>
            <param name="url">The URL to GoTo.</param>
            <example>
            The following example creates a new Internet Explorer instance and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE();
                   ie.GoTo("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.Back">
            <summary>
            Navigates the browser back to the previously displayed Url (like the back
            button in Internet Explorer).
            </summary>
            <returns><c>true</c> if navigating back to a previous url was possible, otherwise <c>false</c></returns>
        </member>
        <member name="M:WatiN.Core.Browser.Forward">
            <summary>
            Navigates the browser forward to the next displayed Url (like the forward
            button in Internet Explorer). 
            </summary>
            <returns><c>true</c> if navigating forward to a previous url was possible, otherwise <c>false</c></returns>
        </member>
        <member name="M:WatiN.Core.Browser.Reopen">
            <summary>
            Closes and then reopens the browser with a blank page.
            </summary>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge and then reopens the browser.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"), logon);
                   ie.Reopen();
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.Refresh">
            <summary>
            Reloads the currently displayed webpage (like the Refresh/reload button in 
            a browser).
            </summary>
        </member>
        <member name="M:WatiN.Core.Browser.Close">
            <summary>
            Closes the browser.
            </summary>
        </member>
        <member name="M:WatiN.Core.Browser.OnGetNativeDocument">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Browser.GetAttributeValueImpl(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Browser.AttachTo``1(WatiN.Core.Constraints.Constraint)">
            <summary>
            Attach to an existing browser instance. 
            The first instance that matches the given <paramref name="constraint"/> will be returned.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.Constraint"/> of the browser window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <returns>An <see cref="T:WatiN.Core.Browser"/> instance of the specified type T.</returns>
            <exception cref="T:WatiN.Core.Exceptions.BrowserNotFoundException">
            BrowserNotFoundException will be thrown if a browser window with the given <paramref name="constraint"/> isn't found within 30 seconds.
            To change this default, set <see cref="P:WatiN.Core.Settings.AttachToBrowserTimeOut"/>
            </exception>
            <example>
            The following example searches for an Internet Exlorer instance with "Example"
            in it's titlebar (showing up as "Example - Microsoft Internet Explorer").
            When found, ieExample will hold a pointer to this Internet Explorer instance and
            can be used to test the Example page.
            <code>
            IE ieExample = IE.AttachTo&lt;IE&gt;(Find.ByTitle("Example"));
            </code>
            A partial match should also work
            <code>
            IE ieExample = IE.AttachTo&lt;IE&gt;(Find.ByTitle("Exa"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.AttachTo(System.Type,WatiN.Core.Constraints.Constraint)">
            <summary>
            Attach to an existing browser instance. 
            The first instance that matches the given <paramref name="constraint"/> will be returned.
            </summary>
            <param name="browserType">The WatiN browser type to attach to.</param>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.Constraint"/> of the browser window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <returns>An <see cref="T:WatiN.Core.Browser"/> instance of the specified type T.</returns>
            <exception cref="T:WatiN.Core.Exceptions.BrowserNotFoundException">
            BrowserNotFoundException will be thrown if a browser window with the given <paramref name="constraint"/> isn't found within 30 seconds.
            To change this default, set <see cref="P:WatiN.Core.Settings.AttachToBrowserTimeOut"/>
            </exception>
            <example>
            The following example searches for an Internet Exlorer instance with "Example"
            in it's titlebar (showing up as "Example - Microsoft Internet Explorer").
            When found, browser will hold a pointer to this Internet Explorer instance and
            can be used to test the Example page.
            <code>
            var browser = Browser.AttachTo(typeof(IE), Find.ByTitle("Example"));
            </code>
            A partial match should also work
            <code>
            var browser = Browser.AttachTo(typeof(IE), Find.ByTitle("Exa"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.AttachTo``1(WatiN.Core.Constraints.Constraint,System.Int32)">
            <summary>
            Attach to an existing browser instance. 
            The first instance that matches the given <paramref name="constraint"/> will be returned.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.Constraint"/> of the browser window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <param name="timeout">The number of seconds to wait before timing out</param>
            <returns>A <see cref="T:WatiN.Core.Browser"/> instance of the specified type.</returns>
            <exception cref="T:WatiN.Core.Exceptions.BrowserNotFoundException">
            BrowserNotFoundException will be thrown if a browser window with the given 
            <paramref name="constraint"/> isn't found within <paramref name="timeout"/> seconds.
            </exception>
            <example>
            The following example searches for an Internet Exlorer instance with "Example"
            in it's titlebar (showing up as "Example - Microsoft Internet Explorer").
            It will try to find an Internet Exlorer instance for 60 seconds maxs.
            When found, ieExample will hold a pointer to this Internet Explorer instance and
            can be used to test the Example page.
            <code>
            IE ieExample = IE.AttachTo&lt;IE&gt;(Find.ByTitle("Example"), 60);
            </code>
            A partial match should also work
            <code>
            IE ieExample = IE.AttachTo&lt;IE&gt;(Find.ByTitle("Exa"), 60);
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.AttachTo(System.Type,WatiN.Core.Constraints.Constraint,System.Int32)">
            <summary>
            Attach to an existing browser instance. 
            The first instance that matches the given <paramref name="constraint"/> will be returned.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.Constraint"/> of the browser window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <param name="timeout">The number of seconds to wait before timing out</param>
            <param name="browserType">The WatiN browser type to attach to.</param>
            <returns>A <see cref="T:WatiN.Core.Browser"/> instance of the specified type.</returns>
            <exception cref="T:WatiN.Core.Exceptions.BrowserNotFoundException">
            BrowserNotFoundException will be thrown if a browser window with the given 
            <paramref name="constraint"/> isn't found within <paramref name="timeout"/> seconds.
            </exception>
            <example>
            The following example searches for an Internet Exlorer instance with "Example"
            in it's titlebar (showing up as "Example - Microsoft Internet Explorer").
            It will try to find an Internet Exlorer instance for 60 seconds maxs.
            When found, browser will hold a pointer to this Internet Explorer instance and
            can be used to test the Example page.
            <code>
            var browser = Browser.AttachTo(typeof(IE), Find.ByTitle("Example"), 60);
            </code>
            A partial match should also work
            <code>
            var browser = Browser.AttachTo(typeof(IE), Find.ByTitle("Exa"), 60);
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.AttachToNoWait``1(WatiN.Core.Constraints.Constraint)">
            <summary>
            Attach to an existing browser instance. 
            The first instance that matches the given <paramref name="constraint"/> will be returned.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.Constraint"/> of the browser window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <returns>An <see cref="T:WatiN.Core.Browser"/> instance of the given type.</returns>
            <exception cref="T:WatiN.Core.Exceptions.BrowserNotFoundException">
            BrowserNotFoundException will be thrown if a browser window with the given <paramref name="constraint"/> isn't found within 30 seconds.
            To change this default, set <see cref="P:WatiN.Core.Settings.AttachToBrowserTimeOut"/>
            </exception>
            <example>
            The following example searches for an Internet Exlorer instance with "Example"
            in it's titlebar (showing up as "Example - Microsoft Internet Explorer").
            When found, ieExample will hold a pointer to this Internet Explorer instance and
            can be used to test the Example page.
            <code>
            IE ieExample = IE.AttachTo&lt;IE&gt;(Find.ByTitle("Example"));
            </code>
            A partial match should also work
            <code>
            IE ieExample = IE.AttachTo&lt;IE&gt;(Find.ByTitle("Exa"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.AttachToNoWait(System.Type,WatiN.Core.Constraints.Constraint)">
            <summary>
            Attach to an existing browser instance. 
            The first instance that matches the given <paramref name="constraint"/> will be returned.
            </summary>
            <param name="browserType">The WatiN browser type to attach to.</param>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.Constraint"/> of the browser window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <returns>An <see cref="T:WatiN.Core.Browser"/> instance of the given type.</returns>
            <exception cref="T:WatiN.Core.Exceptions.BrowserNotFoundException">
            BrowserNotFoundException will be thrown if a browser window with the given <paramref name="constraint"/> isn't found within 30 seconds.
            To change this default, set <see cref="P:WatiN.Core.Settings.AttachToBrowserTimeOut"/>
            </exception>
            <example>
            The following example searches for an Internet Exlorer instance with "Example"
            in it's titlebar (showing up as "Example - Microsoft Internet Explorer").
            When found, browser will hold a pointer to this Internet Explorer instance and
            can be used to test the Example page.
            <code>
            var browser = Browser.AttachTo(typeof(IE), Find.ByTitle("Example"));
            </code>
            A partial match should also work
            <code>
            var browser = Browser.AttachTo(typeof(IE), Find.ByTitle("Exa"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.AttachToNoWait``1(WatiN.Core.Constraints.Constraint,System.Int32)">
            <summary>
            Attach to an existing browser but don't wait until the whole page is loaded. 
            The first instance that matches the given <paramref name="constraint"/> will be returned.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.Constraint"/> of the browser window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <param name="timeout">The number of seconds to wait before timing out</param>
            <returns>An <see cref="T:WatiN.Core.Browser"/> instance of the specified type.</returns>
            <exception cref="T:WatiN.Core.Exceptions.BrowserNotFoundException">
            BrowserNotFoundException will be thrown if a browser window with the given 
            <paramref name="constraint"/> isn't found within <paramref name="timeout"/> seconds.
            </exception>
            <example>
            The following example searches for an Internet Exlorer instance with "Example"
            in it's titlebar (showing up as "Example - Microsoft Internet Explorer").
            It will try to find an Internet Exlorer instance for 60 seconds maxs.
            When found, ieExample will hold a pointer to this Internet Explorer instance and
            can be used to test the Example page.
            <code>
            IE ieExample = IE.AttachToNoWait&lt;IE&gt;(Find.ByTitle("Example"), 60);
            </code>
            A partial match should also work
            <code>
            IE ieExample = IE.AttachToNoWait&lt;IE&gt;(Find.ByTitle("Exa"), 60);
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.AttachToNoWait(System.Type,WatiN.Core.Constraints.Constraint,System.Int32)">
            <summary>
            Attach to an existing browser but don't wait until the whole page is loaded. 
            The first instance that matches the given <paramref name="constraint"/> will be returned.
            </summary>
            <param name="browserType">The WatiN browser type to attach to.</param>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.Constraint"/> of the browser window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <param name="timeout">The number of seconds to wait before timing out</param>
            <returns>An <see cref="T:WatiN.Core.Browser"/> instance of the specified type.</returns>
            <exception cref="T:WatiN.Core.Exceptions.BrowserNotFoundException">
            BrowserNotFoundException will be thrown if a browser window with the given 
            <paramref name="constraint"/> isn't found within <paramref name="timeout"/> seconds.
            </exception>
            <example>
            The following example searches for an Internet Exlorer instance with "Example"
            in it's titlebar (showing up as "Example - Microsoft Internet Explorer").
            It will try to find an Internet Exlorer instance for 60 seconds maxs.
            When found, ieExample will hold a pointer to this Internet Explorer instance and
            can be used to test the Example page.
            <code>
            var browser = Browser.AttachToNoWait(typeof(IE), Find.ByTitle("Example"), 60);
            </code>
            A partial match should also work
            <code>
            var browser = Browser.AttachToNoWait(typeof(IE), Find.ByTitle("Exa"), 60);
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Browser.Exists``1(WatiN.Core.Constraints.Constraint)">
            <summary>
            Does the specified browser type exist.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.Constraint"/> of the browser window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <returns><c>true</c> if a browser instance matches the given <see cref="T:WatiN.Core.Constraints.Constraint"/>. Otherwise it returns <c>false</c>. </returns>
        </member>
        <member name="M:WatiN.Core.Browser.Exists(System.Type,WatiN.Core.Constraints.Constraint)">
            <summary>
            Does the specified browser type exist.
            </summary>
            <param name="browserType">The WatiN browser type to attach to.</param>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.Constraint"/> of the browser window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <returns><c>true</c> if a browser instance matches the given <see cref="T:WatiN.Core.Constraints.Constraint"/>. Otherwise it returns <c>false</c>. </returns>
        </member>
        <member name="M:WatiN.Core.Browser.RegisterAttachToHelper(System.Type,WatiN.Core.Interfaces.IAttachTo)">
            <summary>
            Register a specific helper to attacht to .
            </summary>
            <param name="browserType">Type of the browser.</param>
            <param name="attachToHelper">The attach to helper.</param>
        </member>
        <member name="M:WatiN.Core.FireFox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.FireFox"/> class.
            </summary>
        </member>
        <member name="M:WatiN.Core.FireFox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.FireFox"/> class.
            </summary>
            <param name="url">The url to go to</param>
        </member>
        <member name="M:WatiN.Core.FireFox.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.FireFox"/> class.
            </summary>
            <param name="uri">The url to go to</param>
        </member>
        <member name="M:WatiN.Core.FireFox.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:WatiN.Core.FireFox"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:WatiN.Core.FireFox.GetExecutablePath">
            <summary>
            Initalizes the executable path.
            </summary>
        </member>
        <member name="M:WatiN.Core.FireFox.GetExecutablePathUsingRegistry(Microsoft.Win32.RegistryKey)">
            <summary>
            Initializes the executable path to FireFox using the registry.
            </summary>
            <param name="mozillaKey">The mozilla key.</param>
        </member>
        <member name="M:WatiN.Core.FireFox.WaitForComplete(System.Int32)">
            <summary>
            Waits until the page is completely loaded
            </summary>
        </member>
        <member name="M:WatiN.Core.FireFox.Close">
            <summary>
            Closes the browser.
            </summary>
        </member>
        <member name="M:WatiN.Core.FireFox.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WatiN.Core.FireFox.CurrentProcess">
            <summary>
            Gets the current FireFox process (all instances run under 1 process).
            </summary>
            <value>The current FireFox process or null if none is found.</value>
        </member>
        <member name="P:WatiN.Core.FireFox.PathToExe">
            <summary>
            Gets or sets the path to FireFox executable. By default the registry and common
            file locations will be used to find the the firefox executable.
            When manually setting this property make sure to also include the path and name
            of the executable (c:\somedirectory\firefox.exe)
            </summary>
            <value>The path to exe.</value>
        </member>
        <member name="F:WatiN.Core.UtilityClasses.VariableNameHelper._elementCounter">
            <summary>
            Used by CreateElementVariableName
            </summary>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.VariableNameHelper.CreateVariableName">
            <summary>
            Creates a unique variable name, i.e. doc.watin23
            </summary>
            <returns>A unique variable.</returns>
        </member>
        <member name="T:WatiN.Core.UtilityClasses.EmptyArray`1">
            <summary>
            Provides a singleton empty array instance.
            </summary>
            <typeparam name="T">The type of array to provide.</typeparam>
        </member>
        <member name="F:WatiN.Core.UtilityClasses.EmptyArray`1.Instance">
            <summary>
            An empty array of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.Find">
            <summary>
            This class provides factory methods for de most commonly used attributes
            to find an element on a web page.
            </summary>
        </member>
        <member name="M:WatiN.Core.Find.ByAlt(System.String)">
            <summary>
            Finds an element by its alt text.
            </summary>
            <param name="alt">The alt text to find.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>ie.Image(Find.ByAlt("alt text")).Name</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByAlt(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element by its alt text.
            </summary>
            <param name="regex">The regular expression for the alt text to find.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>ie.Image(Find.ByAlt(new Regex("pattern goes here")))).Name</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByAlt(WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Finds an element by its alt text.
            </summary>
            <param name="compare">The compare.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            	<code>Image img = ie.Image(Find.ByAlt(new StringContainsAndCaseInsensitiveComparer("alt text")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByAlt(System.Predicate{System.String})">
            <summary>
            Finds an element by its alt text.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            	<code>Image img = ie.Image(Find.ByAlt(MyOwnCompareMethod));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByClass(System.String)">
            <summary>
            Finds an element having an exact match with the (CSS) class name of the element.
            </summary>
            <param name="classname">The class name to find.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>ie.Div(Find.ByClass("HighlightedHeader")).Name</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByClass(System.String,System.Boolean)">
            <summary>
            Finds an element with the (CSS) class name containing <paramref name="classname"/> when
            <paramref name="exactMatch"/> is set to <code>false</code>.
            </summary>
            <param name="classname">The class name to find.</param>
            <param name="exactMatch">When false, class name should contain given <paramref name="classname"/> otherwise it should match exactly.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            To find the first div with a class attribute containing 'HighlightedHeader'
            <code>ie.Div(Find.ByClass("HighlightedHeader", false)).Name</code>
            To find the first div with a class attribute having an exact match with 'HighlightedHeader'
            <code>ie.Div(Find.ByClass("HighlightedHeader", true)).Name</code>
            or just call
            <code>ie.Div(Find.ByClass("HighlightedHeader")).Name</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByClass(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element by its (CSS) class name text.
            </summary>
            <param name="regex">The regular expression for the class name to find.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>ie.Div(Find.ByClass(new Regex("HighlightedHeader")))).Name</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByClass(WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Finds an element by its (CSS) class name text.
            </summary>
            <param name="compare">The comparer.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            	<code>Div div = ie.Div(Find.ByClass(new StringContainsAndCaseInsensitiveComparer("Highlighted")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByClass(System.Predicate{System.String})">
            <summary>
            Finds an element by its (CSS) class name text.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            	<code>Div div = ie.Div(Find.ByClass(MyOwnCompareMethod));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByFor(System.String)">
            <summary>
            Finds a Label element by the id of the element it's linked with.
            </summary>
            <param name="forId">Id of the element the label is linked with.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Label(Find.ByFor("optionbuttonid")).Text</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByFor(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a Label element by the id of the element it's linked with.
            </summary>
            <param name="regex">Regular expression to find the matching Id of the element
             the label is linked with.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Label(Find.ByFor(new Regex("pattern goes here")).Text</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByFor(WatiN.Core.Element)">
            <summary>
            Finds a Label element by the id of the element it's linked with.
            </summary>
            <param name="element">The element to which the Label element is attached. This element must an Id value.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>
            CheckBox checkbox = ie.CheckBox("checkboxid");
            ie.Label(Find.ByFor(checkbox).Text</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByFor(WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Finds a Label element by the id of the element it's linked with.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            	<code>
            Label label = ie.Label(Find.ByFor(new StringContainsAndCaseInsensitiveComparer("optionbuttonid")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByFor(System.Predicate{System.String})">
            <summary>
            Finds a Label element by the id of the element it's linked with.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Label label = ie.Label(Find.ByFor(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ById(System.String)">
            <summary>
            Finds an element by its id.
            </summary>
            <param name="id">Element id to find.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ById("testlinkid")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ById(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element by its id.
            </summary>
            <param name="regex">Regular expression to find a matching Id.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ById(new Regex("pattern goes here"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ById(WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Finds an element by its id.
            </summary>
            <param name="compare">The compare.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            	<code>Link link = ie.Link(Find.ById(new StringContainsAndCaseInsensitiveComparer("linkId1")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ById(System.Predicate{System.String})">
            <summary>
            Finds an element by its id.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Link link = ie.Link(Find.ById(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByIndex(System.Int32)">
            <summary>
            Finds an element by its index.
            </summary>
            <param name="index">The zero-based index.</param>
            <returns></returns>
            <example>
            <code>
            // Returns the 3rd link with class "link".
            Link link = ie.Link(Find.ByClass("link") &amp; Find.ByIndex(2));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByName(System.String)">
            <summary>
            Finds an element by its name.
            </summary>
            <param name="name">Name to find.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByName("testlinkname")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByName(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element by its name.
            </summary>
            <param regex="regex">Regular expression to find a matching Name.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByName(new Regex("pattern goes here")))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByName(WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Finds an element by its name.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            	<code>ie.Link(Find.ByName(new StringContainsAndCaseInsensitiveComparer("linkname")))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByName(System.Predicate{System.String})">
            <summary>
            Finds an element by its name.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Link link = ie.Link(Find.ByName(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByText(System.String)">
            <summary>
            Finds an element by its (inner) text.
            </summary>
            <param name="text">Element text</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByText("my link")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByText(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element by its (inner) text.
            </summary>
            <param name="regex">Regular expression to find a matching Text.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByText(new Regex("pattern goes here"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByText(WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Finds an element by its (inner) text.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            	<code>Link link = ie.Link(Find.ByText(new StringContainsAndCaseInsensitiveComparer("my li"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByText(System.Predicate{System.String})">
            <summary>
            Finds an element by its (inner) text.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Link link = ie.Link(Find.ByText(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(System.String)">
            <summary>
            Finds an element, frame, IE instance or HTMLDialog by its Url.
            </summary>
            <param name="url">The well-formed url to find.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByUrl("http://watin.sourceforge.net")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(System.String,System.Boolean)">
            <summary>
            Finds an element, frame, IE instance or HTMLDialog by its Url.
            </summary>
            <param name="url">The well-formed url to find.</param>
            <param name="ignoreQuery">Set to true to ignore querystring when matching.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByUrl("http://watin.sourceforge.net", true)).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(System.Uri)">
            <summary>
            Finds an element, frame, IE instance or HTMLDialog by its Url.
            </summary>
            <param name="uri">The uri to find.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByUrl(new Uri("watin.sourceforge.net"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(System.Uri,System.Boolean)">
            <summary>
            Finds an element, frame, IE instance or HTMLDialog by its Url.
            </summary>
            <param name="uri">The uri to find.</param>
            <param name="ignoreQuery">Set to true to ignore querystring when matching.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByUrl(new Uri("watin.sourceforge.net", true))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element, frame, IE instance or HTMLDialog by its Url.
            </summary>
            <param name="regex">Regular expression to find a matching Url.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByUrl(new Regex("pattern goes here"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Finds an element, frame, IE instance or HTMLDialog by its Url.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            	<code>ie.Link(Find.ByUrl(new UriComparer(uri, ignoreQuery))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(System.Predicate{System.String})">
            <summary>
            Finds an element, frame, IE instance or HTMLDialog by its Url.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Link link = ie.Link(Find.ByUrl(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByTitle(System.String)">
            <summary>
            Finds an element, frame, IE instance or HTMLDialog by its Title.
            </summary>
            <param name="title">The title to match partially.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>IE ie = IE.AttachToIE(Find.ByTitle("WatiN Home Page"))</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByTitle(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element, frame, IE instance or HTMLDialog by its Title.
            </summary>
            <param name="regex">Regular expression to find a matching Title.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>IE ie = IE.AttachToIE(Find.ByTitle(new Regex("pattern goes here")))</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByTitle(WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Finds an element, frame, IE instance or HTMLDialog by its Title.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            	<code>IE ie = IE.AttachToIE(Find.ByTitle(new StringContainsAndCaseInsensitiveComparer("part of the title")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByTitle(System.Predicate{System.String})">
            <summary>
            Finds an element, frame, IE instance or HTMLDialog by its Title.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            IE ie = IE.AttachToIE(Find.ByTitle(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByValue(System.String)">
            <summary>
            Finds an element by its value attribute.
            </summary>
            <param name="value">The value to find.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>
            Button button = ie.Button(Find.ByValue("My Button"))
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByValue(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element by its value attribute.
            </summary>
            <param name="regex">Regular expression to find a matching Value.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>
            Button button = ie.Button(Find.ByValue(new Regex("pattern goes here")))
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByValue(WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Finds an element by its value attribute.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>
            Button button = ie.Button(Find.ByValue(new StringContainsAndCaseInsensitiveComparer("pattern goes here")));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByValue(System.Predicate{System.String})">
            <summary>
            Finds an element by its value attribute.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Button button = ie.Button(Find.ByValue(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.BySrc(System.String)">
            <summary>
            Finds an <see cref="T:WatiN.Core.Image"/> by its source (src) attribute.
            </summary>
            <param name="src">Src to find.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Image(Find.BySrc("image.gif"))</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.BySrc(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an <see cref="T:WatiN.Core.Image"/> by its source (src) attribute.
            </summary>
            <param regex="regex">Regular expression to find a matching Src.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Image(Find.BySrc(new Regex("pattern goes here"))))</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.BySrc(WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Finds an <see cref="T:WatiN.Core.Image"/> by its source (src) attribute.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            	<code>Image image = ie.Image(Find.BySrc(new StringContainsAndCaseInsensitiveComparer("watin/sourceforge")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.BySrc(System.Predicate{System.String})">
            <summary>
            Finds an <see cref="T:WatiN.Core.Image"/> by its source (src) attribute.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Image image = ie.Image(Find.BySrc(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.By(System.String,System.String)">
            <summary>
            Finds an element by an attribute.
            </summary>
            <param name="attributeName">The attribute name to compare the value with.</param>
            <param name="value">The exact matching value of the attribute.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.By("id", "testlinkid")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.By(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element by an attribute.
            </summary>
            <param name="attributeName">The attribute name to compare the value with.</param>
            <param name="regex">Regular expression to find a matching value of the given attribute.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.By("id", new Regex("pattern goes here"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.By(System.String,WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Finds an element by an attribute.
            </summary>
            <param name="attributeName">The attribute to compare the value with.</param>
            <param name="comparer">The comparer to be used.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            	<code>Link link = ie.Link(Find.By("innertext", new StringContainsAndCaseInsensitiveComparer("pattern goes here")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.By(System.String,System.Predicate{System.String})">
            <summary>
            Finds an element by an attribute.
            </summary>
            <param name="attributeName">The attribute to compare the value with.</param>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Link link = ie.Link(Find.By("innertext", MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByStyle(System.String,System.String)">
            <summary>
            Finds an element by a style attribute.
            </summary>
            <param name="styleAttributeName">Name of the style attribute.</param>
            <param name="value">The exact matching value of the attribute.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            	<code>ie.Span(Find.ByStyle("background-color", "red"))</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByStyle(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element by a style attribute.
            </summary>
            <param name="styleAttributeName">Name of the style attribute.</param>
            <param name="value">Regular expression to find a matching value of the given style attribute.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            	<code>ie.Link(Find.ByStyle("font-family", new Regex("pattern goes here")))</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByStyle(System.String,WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Finds an element by a style attribute.
            </summary>
            <param name="styleAttributeName">Name of the style attribute.</param>
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            	<code>Link link = ie.Link(Find.ByStyle("font-family", new StringContainsAndCaseInsensitiveComparer("aria")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByStyle(System.String,System.Predicate{System.String})">
            <summary>
            Finds an element by a style attribute.
            </summary>
            <param name="styleAttributeName">Name of the style attribute.</param>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Link link = ie.Link(Find.ByStyle("font-family", MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByElement(WatiN.Core.Comparers.Comparer{WatiN.Core.Element})">
            <summary>
            Finds an Element by using a specialized Element comparer.
            </summary>
            <param name="comparer">The comparer</param>
            <returns>An ElementConstraint instance</returns>
        </member>
        <member name="M:WatiN.Core.Find.ByElement(System.Predicate{WatiN.Core.Element})">
            <summary>
            Finds an Element by calling the predicate for each element that
            needs to be evaluated.
            </summary>
            <param name="predicate">The predicate</param>
            <returns>An ElementConstraint instance</returns>
        </member>
        <member name="M:WatiN.Core.Find.ByElement``1(System.Predicate{``0})">
            <summary>
            Finds an Element by calling the predicate for each element that
            needs to be evaluated.
            </summary>
            <param name="predicate">The predicate</param>
            <returns>An ElementConstraint instance</returns>
        </member>
        <member name="M:WatiN.Core.Find.ByExistenceOfRelatedElement``1(WatiN.Core.ElementSelector{``0})">
            <summary>
            Finds an Element by determining whether there exists some other element
            in a position relative to it, such as an ancestor or descendant.
            </summary>
            <param name="selector">The relative selector</param>
            <returns>An ElementConstraint instance</returns>
            <example>
            <code>
            // Finds a row by the fact that it contains a table cell with particular text content.
            ie.TableRow(Find.ByExistenceOfRelatedElement&lt;TableRow&gt;(row => row.TableCell(Find.ByText("foo")))
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.First">
            <summary>
            Finds the first element of the expected type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Find.Near(System.String)">
            <summary>
            Finds a form element by looking for specific text on the page near the field.
            </summary>
            <param name="labelText">The text near the field</param>
            <returns><see cref="T:WatiN.Core.Constraints.ProximityTextConstraint"/></returns>
            <example>
            <code>TextField = ie.TextField(Find.Near("User Name"));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByLabelText(System.String)">
            <summary>
            Finds a form element by looking for the &lt;label&gt; associated with it by searching the label text.
            </summary>
            <param name="labelText">The text of the label element</param>
            <returns><see cref="T:WatiN.Core.Constraints.LabelTextConstraint"/></returns>
            <example>
            This will look for a checkbox that has a label element with the innerText "User enabled"
            <code>var checkbox = ie.CheckBox(Find.ByLabelText("User Name:"));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByLabelText(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a form element by looking for the &lt;label&gt; associated with it by searching the label text.
            </summary>
            <param name="labelText">The regular expression that should match the text of the label element</param>
            <returns><see cref="T:WatiN.Core.Constraints.LabelTextConstraint"/></returns>
            <example>
            This will look for a checkbox that has a label element with innerText starting with "User"
            <code>var checkbox = ie.CheckBox(Find.ByLabelText(new Regex("^User")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByLabelText(System.Predicate{System.String})">
            <summary>
            Finds a form element by looking for the &lt;label&gt; associated with it by searching the label text.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns><see cref="T:WatiN.Core.Constraints.LabelTextConstraint"/></returns>
            <example>
            This will look for a checkbox that has a label element with innerText starting with "User"
            <code>var checkbox = ie.CheckBox(Find.ByLabelText(text =&gt; text !=null &amp;&amp; text.StartsWith("User")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByDefault(System.String)">
            <summary>
            Finds an element by its default characteristics as defined by <see cref="P:WatiN.Core.Settings.FindByDefaultFactory"/>.
            </summary>
            <param name="value">The string to match against</param>
            <returns>A constraint</returns>
        </member>
        <member name="M:WatiN.Core.Find.ByDefault(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element by its default characteristics as defined by <see cref="P:WatiN.Core.Settings.FindByDefaultFactory"/>.
            </summary>
            <param name="value">The regular expression to match against</param>
            <returns>A constraint</returns>
        </member>
        <member name="M:WatiN.Core.Find.ByTextInColumn(System.String,System.Int32)">
            <summary>
            Finds a <see cref="T:WatiN.Core.TableRow"/> element by the (inner) text of one of its cells.
            </summary>
            <param name="text">Element text</param>
            <param name="columnIndex">The zero-based column index</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.TableRow(Find.ByTextInColumn("my link")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByTextInColumn(System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Finds a <see cref="T:WatiN.Core.TableRow"/> element by the (inner) text of one of its cells.
            </summary>
            <param name="regex">Regular expression to find a matching Text.</param>
            <param name="columnIndex">The zero-based column index</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.TableRow(Find.ByTextInColumn(new Regex("my link"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByTextInColumn(WatiN.Core.Comparers.Comparer{System.String},System.Int32)">
            <summary>
            Finds a <see cref="T:WatiN.Core.TableRow"/> element by the (inner) text of one of its cells.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="columnIndex">The zero-based column index</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.TableRow(Find.ByTextInColumn(new StringContainsAndCaseInsensitiveComparer("my li"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByTextInColumn(System.Predicate{System.String},System.Int32)">
            <summary>
            Finds a <see cref="T:WatiN.Core.TableRow"/> element by the (inner) text of one of its cells.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <param name="columnIndex">The zero-based column index</param>
            <returns><see cref="T:WatiN.Core.Constraints.AttributeConstraint"/></returns>
            <example>
            <code>ie.TableRow(Find.ByTextInColumn(MyOwnCompareMethod)).Url</code>
            </example>
        </member>
        <member name="P:WatiN.Core.Find.Any">
            <summary>
            Finds anything.
            </summary>
        </member>
        <member name="P:WatiN.Core.Find.None">
            <summary>
            Finds nothing.
            </summary>
        </member>
        <member name="T:WatiN.Core.FileUpload">
            <summary>
            This class provides specialized functionality for a HTML input element 
            of type file. 
            </summary>
        </member>
        <member name="T:WatiN.Core.ElementTagAttribute">
            <summary>
            Specifies the HTML tags associated with a given <see cref="T:WatiN.Core.Element"/> class.
            </summary>
        </member>
        <member name="M:WatiN.Core.ElementTagAttribute.#ctor(System.String)">
            <summary>
            Associates a tag with an <see cref="T:WatiN.Core.Element"/> class.
            </summary>
            <param name="tagName">The tag name</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="tagName"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.ElementTagAttribute.ToElementTag">
            <summary>
            Creates an <see cref="T:WatiN.Core.ElementTag"/> object from the contents of the attribute.
            </summary>
            <returns>The element tag</returns>
        </member>
        <member name="P:WatiN.Core.ElementTagAttribute.TagName">
            <summary>
            Gets the tag name.
            </summary>
        </member>
        <member name="P:WatiN.Core.ElementTagAttribute.InputType">
            <summary>
            Gets or sets the "type" attribute value to qualify which variations of an INPUT tag are supported.
            </summary>
        </member>
        <member name="P:WatiN.Core.ElementTagAttribute.Index">
            <summary>
            Gets or sets the "index" attribute value to force a specific order of the ElementTag in a list of ElementTags.
            </summary>
        </member>
        <member name="T:WatiN.Core.DialogHandlers.SecurityAlertDialogHandler">
            <summary>
            This class handles the Security Warning dialog and does press
            the OK button when the dialog shows up.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.SecurityAlertDialogHandler.HandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Handles the dialog if the <paramref name="window" /> is a
            security alert dialog.
            </summary>
            <param name="window">The window.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.SecurityAlertDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines whether the specified window is a security alert dialog by checking <see cref="P:WatiN.Core.Native.Windows.Window.StyleInHex"/>.
            Valid value is "94C80AC4" or "94C808C4".
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if the specified window is a security alert dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileUploadDialogHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.FileUploadDialogHandler"/> class.
            </summary>
            <param name="fileName">Name of the file which should be uploaded.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileUploadDialogHandler.HandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Handles the File upload dialog.
            </summary>
            <param name="window">The window.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileUploadDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines whether this instance can handle the specified window.
            It check <see cref="P:WatiN.Core.Native.Windows.Window.StyleInHex"/> for the value "96CC20C4"
            , "96CC02C4" or "97CC02C4".
            </summary>
            <param name="window">The window to validate.</param>
            <returns>
            	<c>true</c> if this instance can handle the dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WatiN.Core.Native.Windows.NativeMethods">
            <summary>
            Class that contains native win32 API support.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.Windows.NativeMethods.GetForegroundWindow">
            <summary>
            The GetForegroundWindow function returns a handle to the foreground window.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.Windows.NativeMethods.ShowWindow(System.IntPtr,System.Int32)">
             <summary>Shows a Window</summary>
             <remarks>
             <para>To perform certain special effects when showing or hiding a 
             window, use AnimateWindow.</para>
            <para>The first time an application calls ShowWindow, it should use 
            the WinMain function's nCmdShow parameter as its nCmdShow parameter. 
            Subsequent calls to ShowWindow must use one of the values in the 
            given list, instead of the one specified by the WinMain function's 
            nCmdShow parameter.</para>
            <para>As noted in the discussion of the nCmdShow parameter, the 
            nCmdShow value is ignored in the first call to ShowWindow if the 
            program that launched the application specifies startup information 
            in the structure. In this case, ShowWindow uses the information 
            specified in the STARTUPINFO structure to show the window. On 
            subsequent calls, the application must call ShowWindow with nCmdShow 
            set to SW_SHOWDEFAULT to use the startup information provided by the 
            program that launched the application. This behavior is designed for 
            the following situations: </para>
            <list type="">
                <item>Applications create their main window by calling CreateWindow 
                with the WS_VISIBLE flag set. </item>
                <item>Applications create their main window by calling CreateWindow 
                with the WS_VISIBLE flag cleared, and later call ShowWindow with the 
                SW_SHOW flag set to make it visible.</item>
            </list></remarks>
             <param name="hWnd">Handle to the window.</param>
             <param name="nCmdShow">Specifies how the window is to be shown. 
             This parameter is ignored the first time an application calls 
             ShowWindow, if the program that launched the application provides a 
             STARTUPINFO structure. Otherwise, the first time ShowWindow is called, 
             the value should be the value obtained by the WinMain function in its 
             nCmdShow parameter. In subsequent calls, this parameter can be one of 
             the WindowShowStyle members.</param>
             <returns>
             If the window was previously visible, the return value is nonzero. 
             If the window was previously hidden, the return value is zero.
             </returns>
        </member>
        <member name="M:WatiN.Core.Native.Windows.NativeMethods.GetWindowText(System.IntPtr)">
            <summary>
            This method incapsulates all the details of getting
            the full length text in a StringBuffer and returns
            the StringBuffer contents as a string.
            </summary>
            <param name="hwnd">The handle to the window</param>
            <returns>Text of the window</returns>
        </member>
        <member name="M:WatiN.Core.Native.Windows.NativeMethods.GetClassName(System.IntPtr)">
            <summary>
            This method incapsulates all the details of getting
            the full length classname in a StringBuffer and returns
            the StringBuffer contents as a string.
            </summary>
            <param name="hwnd">The handle to the window</param>
            <returns>Text of the window</returns>
        </member>
        <member name="M:WatiN.Core.Native.Windows.NativeMethods.CompareClassNames(System.IntPtr,System.String)">
            <summary>
            Compares the class names.
            </summary>
            <param name="hWnd">The hWND of the window if which the class name should be retrieved.</param>
            <param name="expectedClassName">Expected name of the class.</param>
            <returns></returns>
        </member>
        <member name="T:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle">
            <summary>
            Enumeration of the different ways of showing a window using 
            ShowWindow
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.Hide">
            <summary>Hides the window and activates another window.</summary>
            <remarks>See SW_HIDE</remarks>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.ShowNormal">
            <summary>Activates and displays a window. If the window is minimized 
            or maximized, the system restores it to its original size and 
            position. An application should specify this flag when displaying 
            the window for the first time.</summary>
            <remarks>See SW_SHOWNORMAL</remarks>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.ShowMinimized">
            <summary>Activates the window and displays it as a minimized window.</summary>
            <remarks>See SW_SHOWMINIMIZED</remarks>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.ShowMaximized">
            <summary>Activates the window and displays it as a maximized window.</summary>
            <remarks>See SW_SHOWMAXIMIZED</remarks>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.Maximize">
            <summary>Maximizes the specified window.</summary>
            <remarks>See SW_MAXIMIZE</remarks>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.ShowNormalNoActivate">
            <summary>Displays a window in its most recent size and position. 
            This value is similar to "ShowNormal", except the window is not 
            actived.</summary>
            <remarks>See SW_SHOWNOACTIVATE</remarks>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.Show">
            <summary>Activates the window and displays it in its current size 
            and position.</summary>
            <remarks>See SW_SHOW</remarks>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.Minimize">
            <summary>Minimizes the specified window and activates the next 
            top-level window in the Z order.</summary>
            <remarks>See SW_MINIMIZE</remarks>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.ShowMinNoActivate">
            <summary>Displays the window as a minimized window. This value is 
            similar to "ShowMinimized", except the window is not activated.</summary>
            <remarks>See SW_SHOWMINNOACTIVE</remarks>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.ShowNoActivate">
            <summary>Displays the window in its current size and position. This 
            value is similar to "Show", except the window is not activated.</summary>
            <remarks>See SW_SHOWNA</remarks>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.Restore">
            <summary>Activates and displays the window. If the window is 
            minimized or maximized, the system restores it to its original size 
            and position. An application should specify this flag when restoring 
            a minimized window.</summary>
            <remarks>See SW_RESTORE</remarks>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.ShowDefault">
            <summary>Sets the show state based on the SW_ value specified in the 
            STARTUPINFO structure passed to the CreateProcess function by the 
            program that started the application.</summary>
            <remarks>See SW_SHOWDEFAULT</remarks>
        </member>
        <member name="F:WatiN.Core.Native.Windows.NativeMethods.WindowShowStyle.ForceMinimized">
            <summary>Windows 2000/XP: Minimizes a window, even if the thread 
            that owns the window is hung. This flag should only be used when 
            minimizing windows from a different thread.</summary>
            <remarks>See SW_FORCEMINIMIZE</remarks>
        </member>
        <member name="T:WatiN.Core.ElementFinder">
            <summary>
            Expresses an algorithm for finding elements.
            </summary>
        </member>
        <member name="M:WatiN.Core.ElementFinder.#ctor(System.Collections.Generic.IList{WatiN.Core.ElementTag},WatiN.Core.Constraints.Constraint)">
            <summary>
            Creates an element finder.
            </summary>
            <param name="elementTags">The element tags considered by the finder, or null if all tags considered</param>
            <param name="findBy">The constraint used by the finder to filter elements, or null if no additional constraint</param>
        </member>
        <member name="M:WatiN.Core.ElementFinder.Exists">
            <summary>
            Returns true if there exists at least one element that matches the finder's constraint.
            </summary>
            <returns>True if there is at least one matching element</returns>
        </member>
        <member name="M:WatiN.Core.ElementFinder.FindFirst">
            <summary>
            Finds the first element that matches the finder's constraint.
            </summary>
            <returns>The first matching element, or null if none</returns>
        </member>
        <member name="M:WatiN.Core.ElementFinder.FindAll">
            <summary>
            Finds all elements that match the finder's constraint.
            </summary>
            <returns>An enumeration of all matching elements</returns>
        </member>
        <member name="M:WatiN.Core.ElementFinder.Filter(WatiN.Core.Constraints.Constraint)">
            <summary>
            Creates a new finder filtered by an additional constraint.
            </summary>
            <param name="constraint">The additional constraint</param>
            <returns>The filtered element finder</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="constraint"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.ElementFinder.ElementTagsToString">
            <summary>
            Returns a string representation of the element tags.
            </summary>
        </member>
        <member name="M:WatiN.Core.ElementFinder.ConstraintToString">
            <summary>
            Returns a string representation of the constraint.
            </summary>
        </member>
        <member name="M:WatiN.Core.ElementFinder.FilterImpl(WatiN.Core.Constraints.Constraint)">
            <summary>
            Creates a new finder filtered by an additional constraint.
            </summary>
            <param name="findBy">The additional constraint, not null</param>
            <returns>The filtered element finder</returns>
        </member>
        <member name="M:WatiN.Core.ElementFinder.FindAllImpl">
            <summary>
            Finds all elements that match the finder's constraint.
            </summary>
            <returns>An enumeration of all matching elements</returns>
        </member>
        <member name="P:WatiN.Core.ElementFinder.ElementTags">
            <summary>
            Gets the read-only list of tags considered by the finder.
            </summary>
        </member>
        <member name="P:WatiN.Core.ElementFinder.ElementTagNames">
            <summary>
            Gets a list of unique tag names from <see cref="P:WatiN.Core.ElementFinder.ElementTags"/>.
            </summary>
            <value>The element tag names, which may contain null to signify that any tag is allowed</value>
        </member>
        <member name="P:WatiN.Core.ElementFinder.Constraint">
            <summary>
            Gets the constraint used by the finder to filter elements.
            </summary>
        </member>
        <member name="T:WatiN.Core.Constraints.ConstraintContext">
            <summary>
            Retains temporary state for each constraint involved in a matching operation.
            </summary>
            <remarks>
            <para>
            The constraint context is used whenever a constraint needs to store information
            across successive matches.  Consequently the constraint object itself remains
            immutable and may be shared across multiple usage.
            </para>
            <para>
            The constraint context is initially empty at the beginning of each match operation.
            </para>
            </remarks>
        </member>
        <member name="M:WatiN.Core.Constraints.ConstraintContext.#ctor">
            <summary>
            Creates an empty constraint context.
            </summary>
        </member>
        <member name="M:WatiN.Core.Constraints.ConstraintContext.SetData(WatiN.Core.Constraints.Constraint,System.Object)">
            <summary>
            Saves constraint-specific data in the context.
            </summary>
            <param name="constraint">The constraint that wishes to store its state</param>
            <param name="value">The value to be stored, or null if none</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="constraint"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.ConstraintContext.GetData(WatiN.Core.Constraints.Constraint)">
            <summary>
            Gets previously saved constraint-specific data from the context.
            </summary>
            <param name="constraint">The constraint that wishes to retrieve its state</param>
            <returns>The saved data, or null if none saved</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="constraint"/> is null</exception>
        </member>
        <member name="T:WatiN.Core.RadioButton">
            <summary>
            This class provides specialized functionality for a HTML input element of type 
            radio.
            </summary>
        </member>
        <member name="T:WatiN.Core.RadioCheck`1">
            <summary>
            Base class for <see cref="T:WatiN.Core.CheckBox"/> and <see cref="T:WatiN.Core.RadioButton"/> provides
            support for common functionality.
            </summary>
        </member>
        <member name="M:WatiN.Core.RadioCheck`1.DefaultToString">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Constraints.IndexConstraint">
            <summary>
            A constraint that matches the element with the Nth zero-based index.
            </summary>
            <remarks>
            <para>
            This constraint works by counting the number of times the match method
            is called and returning true when the counter reaches N, starting from zero.
            </para>
            </remarks>
        </member>
        <member name="M:WatiN.Core.Constraints.IndexConstraint.#ctor(System.Int32)">
            <summary>
            Creates an index constraint.
            </summary>
            <param name="index">The zero-based index of the element to match</param>
        </member>
        <member name="M:WatiN.Core.Constraints.IndexConstraint.WriteDescriptionTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.IndexConstraint.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Comparers.AlwaysTrueComparer`1">
            <summary>
            This comparer will always return <c>true</c> no matter what value it is given to
            compare with.
            </summary>
        </member>
        <member name="T:WatiN.Core.Comparers.Comparer`1">
            <summary>
            Use this class as the base to create your own comparer classes with. 
            Overide the <see cref="M:WatiN.Core.Comparers.Comparer`1.Compare(`0)"/> method and implement the desired compare logic.
            </summary>
        </member>
        <member name="M:WatiN.Core.Comparers.Comparer`1.Compare(`0)">
            <summary>
            Compares the specified value. You need to override this method
            and provide your own implementation for the comparison with the 
            given <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>Should return <c>true</c> or <c>false</c>, which is the default.</returns>
        </member>
        <member name="M:WatiN.Core.Comparers.AlwaysTrueComparer`1.Compare(`0)">
            <summary>
            Accepts a value bit it will be ignored
            </summary>
            <param name="ignoredValue">The ignored value.</param>
            <returns>Will always return <c>true</c></returns>
        </member>
        <member name="M:WatiN.Core.Comparers.AlwaysTrueComparer`1.ToString">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Comparers.AlwaysTrueComparer`1.Instance">
            <summary>
            Gets the singleton instance of the comparer.
            </summary>
        </member>
        <member name="T:WatiN.Core.Native.INativeDocument">
            <summary>
            Behaviour common to all types of browser documents.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.INativeDocument.RunScript(System.String,System.String)">
            <summary>
            Runs the script.
            </summary>
            <param name="scriptCode">
            The script code to run.
            </param>
            <param name="language">
            The language the script was written in.
            </param>
        </member>
        <member name="M:WatiN.Core.Native.INativeDocument.GetPropertyValue(System.String)">
            <summary>
            Gets the value for the corresponding <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">
            Name of the property.
            </param>
            <returns>
            The value for the corresponding <paramref name="propertyName"/>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Native.INativeDocument.GetTextBounds(System.String)">
            <summary>
            Gets the bounds of all matching text substrings within the document.
            </summary>
            <param name="text">
            The text to find
            </param>
            <returns>
            The text bounds in screen coordinates
            </returns>
        </member>
        <member name="M:WatiN.Core.Native.INativeDocument.ContainsText(System.String)">
            <summary>
            Determines whether the text inside the HTML Body element contains the given <paramref name="text" />.
            </summary>
            <param name="text">The text.</param>
            <returns>
                <c>true</c> if the specified text is contained in Html; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:WatiN.Core.Native.INativeDocument.AllElements">
            <summary>
            Gets the collection of all elements in the document.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.INativeDocument.ContainingFrameElement">
            <summary>
            Gets the containing frame element, or null if none.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.INativeDocument.Body">
            <summary>
            Gets the body element for the current docuemnt.
            </summary>
            <value>The body element.</value>
        </member>
        <member name="P:WatiN.Core.Native.INativeDocument.Url">
            <summary>
            Gets the URL for the current document.
            </summary>
            <value>The URL for the current document.</value>
        </member>
        <member name="P:WatiN.Core.Native.INativeDocument.Title">
            <summary>
            Gets the title of the current docuemnt.
            </summary>
            <value>The title of the current document.</value>
        </member>
        <member name="P:WatiN.Core.Native.INativeDocument.ActiveElement">
            <summary>
            Gets the active element.
            </summary>
            <value>The active element.</value>
        </member>
        <member name="P:WatiN.Core.Native.INativeDocument.JavaScriptVariableName">
            <summary>
            Gets the name of the java script variable.
            </summary>
            <value>The name of the java script variable.</value>
        </member>
        <member name="P:WatiN.Core.Native.INativeDocument.Frames">
            <summary>
            Gets the list of frames.
            </summary>
            <value>The list of frames of the current document.</value>
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEDocument.GetTextBounds(System.String)">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEDocument.HtmlDocument">
            <summary>
            Gets the underlying <see cref="T:mshtml.IHTMLDocument2"/> object.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEDocument.AllElements">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEDocument.ContainingFrameElement">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Native.JavaScriptEngineType">
            <summary>
            Defines the different types of javascript engine.
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.JavaScriptEngineType.Unknown">
            <summary>
            Unkown javascript engine
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.JavaScriptEngineType.JScript">
            <summary>
            JScript engine used by internet explorer http://en.wikipedia.org/wiki/JScript.
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.JavaScriptEngineType.WebKit">
            <summary>
            WebKit javascript engine used be Safari, Chrome and others http://en.wikipedia.org/wiki/WebKit
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.JavaScriptEngineType.Mozilla">
            <summary>
            Mozilla javascript engine.
            </summary>
        </member>
        <member name="T:WatiN.Core.Control`1">
            <summary>
            A control class describes the content and behaviors of a unit of interacting
            elements within a page (a user control).  Each application control can be modeled
            as a subclass of <see cref="T:WatiN.Core.Control`1"/>.
            </summary>
            <remarks>
            <para>
            A control class wraps a subtree of DOM elements and provides access to its
            contents and behaviors by defining properties and methods to represent them.
            In the typical case, the properties of a control class provide access to its
            elements and state.  Likewise, the methods of a control class perform actions
            or transactions.  The control class encapsulates the mechanisms used
            to access and manipulate the underlying DOM elements which enables test cases to
            become more focused on verifying application functionality.
            </para>
            <para>
            For example, a rich text box may be implemented in HTML using a complex combination
            of buttons, text areas and perhaps even frames.  Manipulating each UI element separately
            in a test is awkward and distracting.  So instead we can create a control class to
            describe the high-level contents and behaviors of the rich text box.  The class can have
            a "Text" property that enables the text to be read and written and an "Bold()" method to
            change the current font weight to Bold.  This moves the complexity of manipulating the
            rich text box into a single cohesive class that can be reused as often as needed.
            </para>
            <para>
            This feature can be used to create a model of a web site (a site map) which helps to
            improve readability and encourage reuse across tests.
            </para>
            <para>
            How to create a control class:
            <list type="bullet">
            <item>Identify the type of HTML element that functions as a container for the
            control on the web page.  Typically this will be a DIV that contains all of the other
            relevant sub-elements but it could be of some other type as well.</item>
            <item>Create a subclass of Control using the appropriate generic element type.  For example, if the
            element is a DIV, then create a subclass of Control&lt;Div&gt;.</item>
            <item>Optionally override <see cref="T:WatiN.Core.Constraints.ElementConstraint"/> to supply a custom constraint to help identify the
            underlying element for the control based on its properties, such as its CSS class.  If the constraint
            is sufficiently specific in nature then the <code>browser.Control&lt;MyCustomControl&gt;()</code> syntax
            can be used to find the control unambiguously (ie. wraps only DIVs that satisfy the constraint, not just any DIV).</item>
            <item>Add properties to provide access to the sub-elements of the control.  When the control
            is used, the <see cref="P:WatiN.Core.Control`1.Element"/> property will be set to the containing element
            (ie. the DIV or other element as specified).  Use this property to locate the sub-elements of
            the control.</item>
            <item>Define additional properties and methods as desired to model the state and
            behaviors of the control.</item>
            </list>
            </para>
            <para>
            Tips:
            <list type="bullet">
            <item>Consider breaking down composite controls into multiple parts.  For example, when modeling
            a data grid, create a control class derived from <code>Control&lt;Table&gt;</code> to wrap the table and
            within it create a second nested control class derived from <code>Control&lt;TableRow&gt;</code> to wrap the rows
            within the table.  Then define a property of type <code>ControlCollection&lt;MyDataGridRowControl&gt;</code>
            using <code>TableRowCollection.As&lt;MyDataGridRowControl&gt;</code> to provide custom access to the
            rows within the table.</item>
            </list>
            </para>
            </remarks>
            <example>
            <para>
            Consider a calendar user control that is represented as an HTML table with
            clickable cells.  The same calendar user control may appear in many web pages
            and need to be accessed by many tests.  Moreover, selecting dates in such a
            control could be somewhat tedious as it involved clicking on links to set the
            month and day.
            </para>
            <para>
            Here's how we might build a control class to wrap this calendar:
            </para>
            <code>
            public class CalendarControl : Control&lt;Div&gt;
            {
                private SelectList MonthSelectList { get { return Element.Select(Find.ByName("month")); } }
                private SelectList YearSelectList { get { return Element.Select(Find.ByName("year")); } }
                private Div DateLabelDiv { get { return Element.Div(Find.ByClass("dateLabel")); } }
            
                /// Gets or sets the date of the calendar control.
                public DateTime Date
                {
                    get
                    {
                        return DateTime.Parse(DateLabelDiv.Text);
                    }
                    set
                    {
                        MonthSelectList.SelectByValue(value.Month.ToString());
                        YearSelectList.SelectByValue(value.Year.ToString());
                
                        Element.Link(Find.ByText(value.Day)).Click();
                    }
                }
            
                public override Constraint ElementConstraint
                {
                    // Only find Divs that have the "calendar" class.
                    get { return Find.ByClass("calendar"); }
                }
            }
            </code>
            <para>
            Within the control class, you may also use the <see cref="T:WatiN.Core.FindByAttribute"/> and <see cref="T:WatiN.Core.DescriptionAttribute"/>
            attributes to declaratively refer to elements of the control.  Here is part of the same example
            above using attributes instead of properties.
            </para>
            <code>
            public class CalendarControl : Control&lt;Div&gt;
            {
                [FindBy(Name = "month"), Description("Month drop down.")]
                private SelectList MonthSelectList;
                
                [FindBy(Name = "year"), Description("Year drop down.")]
                private SelectList YearSelectList;
                
                [FindBy(Name = "dateLabel"), Description("Date label.")]
                private Div DateLabelDiv;
                
                // etc...
            }
            </code>
            <para>
            Finally, within the test we use the calendar control like this:
            </para>
            <code>
            browser.Control&lt;CalendarControl&gt;&gt;(Find.ById("fromDate")).Date = DateTime.Now;
            </code>
            </example>
            <typeparam name="TElement">The control element type</typeparam>
        </member>
        <member name="T:WatiN.Core.Control">
            <summary>
            This class supports the <see cref="T:WatiN.Core.Control`1"/> type and is not intended
            to be used directly from your application.
            </summary>
            <remarks>
            <para>
            Refer to <see cref="T:WatiN.Core.Control`1"/> for details about how to create custom control classes.
            </para>
            </remarks>
            <seealso cref="T:WatiN.Core.Control`1"/>
            <seealso cref="T:WatiN.Core.Page"/>
        </member>
        <member name="T:WatiN.Core.Composite">
            <summary>
            A composite component is container abstraction which has fields or properties
            representing other components.  The most common composites are <see cref="T:WatiN.Core.Page"/>
            and <see cref="T:WatiN.Core.Control`1"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.Composite.InitializeContents(WatiN.Core.IElementContainer)">
            <summary>
            Initializes the fields and properties of the composite using reflection to
            find elements within the container.
            </summary>
            <param name="container">The element container within which to find elements, or null if not available</param>
        </member>
        <member name="M:WatiN.Core.Control.Refresh">
            <summary>
            Returns true if the element wrapped by the control exists.
            </summary>
        </member>
        <member name="M:WatiN.Core.Control.CreateControl``1(WatiN.Core.Element)">
            <summary>
            Creates a control object of the desired type that wraps the specified <see cref="P:WatiN.Core.Control.Element"/>.
            </summary>
            <param name="element">The <see cref="P:WatiN.Core.Control.Element"/> that the control should wrap</param>
            <typeparam name="TControl">The <see cref="T:WatiN.Core.Control`1"/> subclass</typeparam>
            <returns>The control object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="element"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Control.CreateControl(System.Type,WatiN.Core.Element)">
            <summary>
            Creates a control object of the desired type that wraps the specified <see cref="P:WatiN.Core.Control.Element"/>.
            </summary>
            <param name="controlType">The control type</param>
            <param name="element">The <see cref="P:WatiN.Core.Control.Element"/> that the control should wrap</param>
            <returns>The control object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="controlType"/> or <paramref name="element"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="controlType"/> is not a subclass of <see cref="T:WatiN.Core.Control"/>
            or if it does not have a default constructor</exception>
        </member>
        <member name="M:WatiN.Core.Control.FindControl``1(WatiN.Core.IElementContainer,WatiN.Core.Constraints.Constraint)">
            <summary>
            Gets a control of the desired type within an element container.
            </summary>
            <typeparam name="TControl">The <see cref="T:WatiN.Core.Control`1"/> subclass</typeparam>
            <param name="elementContainer">The element container to search within</param>
            <param name="findBy">The constraint to match</param>
            <returns>The control object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="elementContainer"/> or
            <paramref name="findBy"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Control.FindControls``1(WatiN.Core.IElementContainer)">
            <summary>
            Gets a collection of controls of the desired type within an element container.
            </summary>
            <typeparam name="TControl">The <see cref="T:WatiN.Core.Control`1"/> subclass</typeparam>
            <param name="elementContainer">The element container to search within</param>
            <returns>The control object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="elementContainer"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Control.ToString">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Control.GetAdapter``1">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Control.GetAttributeValueImpl(System.String)">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Control.Element">
            <summary>
            Gets the element wrapped by the control.
            </summary>
            <exception cref="T:WatiN.Core.Exceptions.WatiNException">Thrown if the control object does not have a reference
            to an element or if the element does not satisfy the control's constraints</exception>
        </member>
        <member name="P:WatiN.Core.Control.Exists">
            <summary>
            Returns true if the element wrapped by the control exists.
            </summary>
        </member>
        <member name="P:WatiN.Core.Control.ElementConstraint">
            <summary>
            Gets a constraint that is used to help locate the element that belongs to the control.
            </summary>
            <remarks>
            <para>
            The default implementation returns <see cref="P:WatiN.Core.Find.Any"/>.
            </para>
            <para>
            Subclasses can override this method to enforce additional constraints regarding how
            the element is located.
            </para>
            </remarks>
        </member>
        <member name="M:WatiN.Core.Control`1.VerifyElementProperties(`0)">
            <summary>
            Verifies that the element represents the correct kind of element for the control.
            </summary>
            <remarks>
            <para>
            The default implementation verifies that <paramref name="element"/> satisfies <see cref="T:WatiN.Core.Constraints.ElementConstraint"/>.
            </para>
            <para>
            Subclasses can override this method to customize how verification takes place.
            </para>
            </remarks>
            <param name="element">The element to verify, not null</param>
            <exception cref="T:WatiN.Core.Exceptions.WatiNException">Thrown if the element's properties fail verification</exception>
        </member>
        <member name="M:WatiN.Core.Control`1.InitializeContents">
            <summary>
            Initializes the contents of the control object.
            </summary>
        </member>
        <member name="P:WatiN.Core.Control`1.Element">
            <summary>
            Gets the element wrapped by the control.
            </summary>
            <exception cref="T:WatiN.Core.Exceptions.WatiNException">Thrown if the control object does not have a reference
            to an element or if the element does not satisfy the control's constraints</exception>
        </member>
        <member name="T:WatiN.Core.ListItemCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.ListItem"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.ListItemCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ListItemCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.ListItemCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.TableBodyCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.TableBody"/> instances within a Document or Element. 
            </summary>
        </member>
        <member name="M:WatiN.Core.TableBodyCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.ParaCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Para"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.ParaCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ParaCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.ParaCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Exceptions.MissingAlertException">
            <summary>
            Thrown if no more alerts are available when calling PopUpWatcher.PopAlert.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.ReturnDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines whether this instance can handle the specified window by checking <see cref="P:WatiN.Core.Native.Windows.Window.StyleInHex"/>.
            equals "94C803C5" and if the window has a button with Id 1.
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if this instance [can handle dialog] the specified window; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WatiN.Core.DialogHandlers.LogonDialogHandler">
             <summary>
             This class handles the logon dialog by passing in the username and password
             and clicking the OK button.
             </summary>
             <example>
             The following code shows the use of this dialog handler
             <code>
             IE ie = new IE();
            
             ie.DialogWatcher.Add(new LogonDialogHandler(@"domain\username", "password"));
            
             ie.GoTo("https://www.somesecuresite.com");
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.LogonDialogHandler.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class.
            </summary>
            <param name="userName">Name of the user. Is required.</param>
            <param name="password">The password. If no password is required, it can be left blank (<c>null</c> or <c>String.Empty</c>). </param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.LogonDialogHandler.HandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Handles the logon dialog by filling in the username and password.
            </summary>
            <param name="window">The window.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.LogonDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines whether the specified window is a logon dialog.
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if the specified window is a logon dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEUtils.RunScript(System.Text.StringBuilder,mshtml.IHTMLWindow2)">
            <summary>
            Runs the javascript code in IE.
            </summary>
            <param name="scriptCode">The javascript code.</param>
            <param name="window">The parent window of the document.</param>
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEUtils.RunScript(System.String,mshtml.IHTMLWindow2)">
            <summary>
            Runs the javascript code in IE.
            </summary>
            <param name="scriptCode">The javascript code.</param>
            <param name="window">The parent window of the document.</param>
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEUtils.RunScript(System.String,System.String,mshtml.IHTMLWindow2)">
            <summary>
            Runs the script code in IE.
            </summary>
            <param name="scriptCode">The script code.</param>
            <param name="language">The language.</param>
            <param name="window">The parent window of the document.</param>
        </member>
        <member name="T:WatiN.Core.Native.Chrome.ChromeElementCollection">
            <summary>
            Chrome implementation of the <see cref="T:WatiN.Core.Native.INativeElementCollection"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.Chrome.ChromeElementCollection.#ctor(WatiN.Core.Native.ClientPortBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Native.Chrome.ChromeElementCollection"/> class.
            </summary>
            <param name="clientPort">
            The client port.
            </param>
            <param name="containerReference">
            The container reference.
            </param>
        </member>
        <member name="T:WatiN.Core.DialogHandlers.DialogHandlerHelper">
             <summary>
             This dialoghandler can be used when it isn't clear which DialogHandler should be used to handle a dialog. 
             The property <see cref="P:WatiN.Core.DialogHandlers.DialogHandlerHelper.CandidateDialogHandlers"/> will contain a list of dialoghandlers which can handle this dialog,
             bases on calling their <see cref="M:WatiN.Core.Interfaces.IDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window,System.IntPtr)"/> method.
             </summary>
             <example>
             Following an example on how to use this Dialoghandler. After the using helper.CandidateDialogHandlers will contain "AlertDialogHandler".
            <code>
             var helper = new DialogHandlerHelper()
             using (new UseDialogOnce(ie.DialogWatcher, helper)
             {
                 ie.Button("showAlert").Click();
             }
            </code>
             </example>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.DialogHandlerHelper.CandidateDialogHandlers">
            <summary>
            Returns a list of type names of dialoghandlers which can handle this dialog, 
            bases on calling their <see cref="M:WatiN.Core.Interfaces.IDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window,System.IntPtr)"/> method.
            </summary>
            <value>The candidate dialog handlers.</value>
        </member>
        <member name="T:WatiN.Core.ListItem">
            <summary>
            This class provides specialized functionality for a HTML li elements.
            </summary>
        </member>
        <member name="M:WatiN.Core.ListItem.#ctor(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ListItem"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="nativeElement">The HTML li element.</param>
        </member>
        <member name="M:WatiN.Core.ListItem.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ListItem"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The HTML li element.</param>
        </member>
        <member name="T:WatiN.Core.TableRowCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.TableRow"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.TableRowCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.TableRowCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.TableRowCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.IE">
            <summary>
            This is the main class to access a webpage in Internet Explorer to 
            get to all the elements and (i)frames on the page.
            
            </summary>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://watin.sourceforge.net");
                   ie.Link(Find.ByText("RSS Feeds")).Click;
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.InternetExplorers">
            <summary>
            Creates a collection of new IE instances associated with open Internet Explorer windows.
            </summary>
            <returns>An IE instance which is complete loaded.</returns>
            <example>
            This code snippet illustrates the use of this method to found out the number of open
            Internet Explorer windows.
            <code>int IECount = IE.InternetExplorers.Length;</code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.InternetExplorersNoWait">
            <summary>
            Creates a collection of new IE instances associated with open Internet Explorer windows. Use this
            method if you don't want WatiN to wait until a document is fully loaded before returning it.
            This might be handy in situations where you encounter Internet Explorer instances which are always
            busy loading and that way blocks itteration through the collection.
            </summary>
            <returns>An IE instance which might not have been complete loaded yet.</returns>
            <example>
            This code snippet illustrates the use of this method to itterate through all internet explorer instances.
            <code>
            foreach (IE ie in IE.InternetExplorersNoWait)
            {
            // do something but be aware that the page might not be completely loaded yet.
            }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor">
            <summary>
            Opens a new Internet Explorer with a blank page. 
            <note>
            When the <see cref="T:WatiN.Core.IE"/>
            instance is destroyed the created Internet Explorer window will also be closed.
            </note>
            </summary>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE();
                   ie.GoTo("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.Boolean)">
            <summary>
            Opens a new Internet Explorer with a blank page. 
            <note>
            When the <see cref="T:WatiN.Core.IE"/>
            instance is destroyed the created Internet Explorer window will also be closed.
            </note>
            </summary>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE();
                   ie.GoTo("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.String)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="url"/>.
            <note>
            When the <see cref="T:WatiN.Core.IE"/>
            instance is destroyed the created Internet Explorer window will also be closed.
            </note>
            </summary>
            <param name="url">The URL to open</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public OpenWatiNWebsite()
                 {
                   IE ie = new IE("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.String,System.Boolean)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="url"/>.
            <note>
            When the <see cref="T:WatiN.Core.IE"/>
            instance is destroyed the created Internet Explorer window will also be closed.
            </note>
            </summary>
            <param name="url">The URL to open</param>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public OpenWatiNWebsite()
                 {
                   IE ie = new IE("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.Uri)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="uri"/>.
            <note>
            When the <see cref="T:WatiN.Core.IE"/>
            instance is destroyed the created Internet Explorer window will also be closed.
            </note>
            </summary>
            <param name="uri">The Uri to open</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using System;
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public OpenWatiNWebsite()
                 {
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"));
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.Uri,System.Boolean)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="uri"/>.
            <note>
            When the <see cref="T:WatiN.Core.IE"/>
            instance is destroyed the created Internet Explorer window will also be closed.
            </note>
            </summary>
            <param name="uri">The Uri to open</param>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using System;
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public OpenWatiNWebsite()
                 {
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"));
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.String,WatiN.Core.DialogHandlers.LogonDialogHandler)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="url"/>.
            </summary>
            <param name="url">The Url to open</param>
            <param name="logonDialogHandler">A <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class instanciated with the logon credentials.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE("http://watin.sourceforge.net", logon);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.String,WatiN.Core.DialogHandlers.LogonDialogHandler,System.Boolean)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="url"/>.
            </summary>
            <param name="url">The Url to open</param>
            <param name="logonDialogHandler">A <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class instanciated with the logon credentials.</param>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE("http://watin.sourceforge.net", logon);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.Uri,WatiN.Core.DialogHandlers.LogonDialogHandler)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri to open</param>
            <param name="logonDialogHandler">A <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class instanciated with the logon credentials.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"), logon);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.Uri,WatiN.Core.DialogHandlers.LogonDialogHandler,System.Boolean)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri to open</param>
            <param name="logonDialogHandler">A <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class instanciated with the logon credentials.</param>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"), logon);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(WatiN.Core.Native.InternetExplorer.IEBrowser)">
            <summary>
            (Re)Use existing <see cref="T:WatiN.Core.Native.InternetExplorer.IEBrowser"/> object. 
            </summary>
            <param name="ieBrowser">An object implementing <see cref="T:WatiN.Core.Native.InternetExplorer.IEBrowser"/>.</param>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.Object)">
            <summary>
            Use existing InternetExplorer object. The param is of type
            object because otherwise all projects using WatiN should also
            reference the Interop.SHDocVw assembly.
            </summary>
            <param name="iwebBrowser2">An object implementing IWebBrowser2 (like Interop.SHDocVw.InternetExplorer object)</param>
        </member>
        <member name="M:WatiN.Core.IE.Close">
            <summary>
            Closes the referenced Internet Explorer. Almost
            all other functionality in this class and the element classes will give
            exceptions when used after closing the browser.
            </summary>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge. 
            <code>
            using WatiN.Core;
            using System.Diagnostics;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://watin.sourceforge.net");
                   Debug.WriteLine(ie.Html);
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.Reopen(System.Uri,WatiN.Core.DialogHandlers.LogonDialogHandler,System.Boolean)">
            <summary>
            Closes then reopens Internet Explorer and navigates to the given <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri to open</param>
            <param name="logonDialogHandler">A <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class instanciated with the logon credentials.</param>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded methods.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"), logon);
                   ie.Reopen();
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.ForceClose">
            <summary>
            Closes <i>all</i> running instances of Internet Explorer by killing the
            process these instances run in. 
            </summary>
        </member>
        <member name="M:WatiN.Core.IE.ClearCookies">
            <summary>
            Clears all browser cookies.
            </summary>
            <remarks>
            Internet Explorer maintains an internal cookie cache that does not immediately
            expire when cookies are cleared.  This is the case even when the cookies are
            cleared using the Internet Options dialog.  If cookies have been used by
            the current browser session it may be necessary to <see cref="M:WatiN.Core.Browser.Reopen"/> the
            browser to ensure the internal cookie cache is flushed.  Therefore it is
            recommended to clear cookies at the beginning of the test before navigating
            to any pages (other than "about:blank") to avoid having to reopen the browser.
            </remarks>
            <example>
            <code>
            // Clear cookies first.
            IE ie = new IE();
            ie.ClearCookies();
            
            // Then go to the site and sign in.
            ie.GoTo("http://www.example.com/");
            ie.Link(Find.ByText("Sign In")).Click();
            </code>
            </example>
            <seealso cref="M:WatiN.Core.Browser.Reopen"/>
        </member>
        <member name="M:WatiN.Core.IE.ClearCookies(System.String)">
            <summary>
            Clears the browser cookies associated with a particular site and to
            any of the site's subdomains.
            </summary>
            <remarks>
            Internet Explorer maintains an internal cookie cache that does not immediately
            expire when cookies are cleared.  This is the case even when the cookies are
            cleared using the Internet Options dialog.  If cookies have been used by
            the current browser session it may be necessary to <see cref="M:WatiN.Core.Browser.Reopen"/> the
            browser to ensure the internal cookie cache is flushed.  Therefore it is
            recommended to clear cookies at the beginning of the test before navigating
            to any pages (other than "about:blank") to avoid having to reopen the browser.
            </remarks>
            <param name="url">The site url associated with the cookie.</param>
            <example>
            <code>
            // Clear cookies first.
            IE ie = new IE();
            ie.ClearCookies("http://www.example.com/");
            
            // Then go to the site and sign in.
            ie.GoTo("http://www.example.com/");
            ie.Link(Find.ByText("Sign In")).Click();
            </code>
            </example>
            <seealso cref="M:WatiN.Core.Browser.Reopen"/>
        </member>
        <member name="M:WatiN.Core.IE.ClearCache">
            <summary>
            Clears the browser cache but leaves cookies alone.
            </summary>
            <example>
            <code>
            // Clear the cache and cookies.
            IE ie = new IE();
            ie.ClearCache();
            ie.ClearCookies();
            
            // Then go to the site and sign in.
            ie.GoTo("http://www.example.com/");
            ie.Link(Find.ByText("Sign In")).Click();
            </code>
            </example>
            <seealso cref="M:WatiN.Core.Browser.Reopen"/>
        </member>
        <member name="M:WatiN.Core.IE.GetCookie(System.String,System.String)">
            <summary>
            Gets the value of a cookie.
            </summary>
            <remarks>
            This method cannot retrieve the value of cookies protected by the <c>httponly</c> security option.
            </remarks>
            <param name="url">The site url associated with the cookie.</param>
            <param name="cookieName">The cookie name.</param>
            <returns>The cookie data of the form:
            &lt;name&gt;=&lt;value&gt;[; &lt;name&gt;=&lt;value&gt;]...
            [; expires=&lt;date:DAY, DD-MMM-YYYY HH:MM:SS GMT&gt;][; domain=&lt;domain_name&gt;]
            [; path=&lt;some_path&gt;][; secure][; httponly].  Returns null if there are no associated cookies.</returns>
            <seealso cref="M:WatiN.Core.IE.ClearCookies"/>
            <seealso cref="M:WatiN.Core.IE.SetCookie(System.String,System.String)"/>
        </member>
        <member name="M:WatiN.Core.IE.SetCookie(System.String,System.String)">
            <summary>
            Sets the value of a cookie.
            </summary>
            <remarks>
            If no expiration date is specified, the cookie expires when the session ends.
            </remarks>
            <param name="url">The site url associated with the cookie.</param>
            <param name="cookieData">The cookie data of the form:
            &lt;name&gt;=&lt;value&gt;[; &lt;name&gt;=&lt;value&gt;]...
            [; expires=&lt;date:DAY, DD-MMM-YYYY HH:MM:SS GMT&gt;][; domain=&lt;domain_name&gt;]
            [; path=&lt;some_path&gt;][; secure][; httponly].</param>
            <seealso cref="M:WatiN.Core.IE.ClearCookies"/>
            <seealso cref="M:WatiN.Core.IE.GetCookie(System.String,System.String)"/>
        </member>
        <member name="M:WatiN.Core.IE.WaitForComplete(System.Int32)">
            <summary>
            Waits till the webpage, it's frames and all it's elements are loaded. This
            function is called by WatiN after each action (like clicking a link) so you
            should have to use this function on rare occasions.
            </summary>
            <param name="waitForCompleteTimeOut">The number of seconds to wait before timing out</param>
        </member>
        <member name="M:WatiN.Core.IE.Dispose(System.Boolean)">
            <summary>
            This method must be called by its inheritor to dispose references
            to internal resources.
            </summary>
        </member>
        <member name="M:WatiN.Core.IE.HtmlDialog(WatiN.Core.Constraints.Constraint)">
            <summary>
            Find a HtmlDialog by an attribute. Currently 
            Find.ByUrl and Find.ByTitle are supported.
            </summary>
            <param name="findBy">The url of the html page shown in the dialog</param>
        </member>
        <member name="M:WatiN.Core.IE.HtmlDialog(WatiN.Core.Constraints.Constraint,System.Int32)">
            <summary>
            Find a HtmlDialog by an attribute within the given <paramref name="timeout" /> period.
            Currently Find.ByUrl and Find.ByTitle are supported.
            </summary>
            <param name="findBy">The url of the html page shown in the dialog</param>
            <param name="timeout">Number of seconds before the search times out.</param>
        </member>
        <member name="P:WatiN.Core.IE.InternetExplorer">
            <summary>
            Use this method to gain access to the IWebBrowser2 interface of Internet Explorer.
            Do this by referencing the Interop.SHDocVw assembly (supplied in the WatiN distribution)
            and cast the return value of this method to type SHDocVw.IWebBrowser2.
            </summary>
        </member>
        <member name="P:WatiN.Core.IE.AutoClose">
            <summary>
            Gets or sets a value indicating whether to auto close IE after destroying
            a reference to the corresponding IE instance.
            </summary>
            <value><c>true</c> when to auto close IE (this is the default); otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.IE.HtmlDialogs">
            <summary>
            Returns a collection of open HTML dialogs (modal as well as modeless).
            </summary>
            <value>The HTML dialogs.</value>
        </member>
        <member name="P:WatiN.Core.IE.HtmlDialogsNoWait">
            <summary>
            Returns a collection of open HTML dialogs (modal as well as modeless).
            When itterating through this collection WaitForComplete will not be
            called on a HTML dialog before returning it from the collection.
            </summary>
            <value>The HTML dialogs.</value>
        </member>
        <member name="T:WatiN.Core.FormCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Form"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.FormCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.FormCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.FormCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Exceptions.ElementDisabledException">
            <summary>
            Thrown if an element is disabled and the current action (like clicking a
            disabled link) is not allowed.
            </summary>
        </member>
        <member name="T:WatiN.Core.Comparers.UriComparer">
            <summary>
            Class that supports comparing a <see cref="T:System.Uri"/> instance with a string value.
            </summary>
        </member>
        <member name="M:WatiN.Core.Comparers.UriComparer.#ctor(System.Uri)">
            <summary>
            Constructor, querystring will not be ignored in comparisons.
            </summary>
            <param name="uri">Uri for comparison.</param>
        </member>
        <member name="M:WatiN.Core.Comparers.UriComparer.#ctor(System.Uri,System.Boolean)">
            <summary>
            Constructor, querystring can be ignored or not ignored in comparisons.
            </summary>
            <param name="uri">Uri for comparison.</param>
            <param name="ignoreQuery">Set to true to ignore querystrings in comparison.</param>
        </member>
        <member name="M:WatiN.Core.Comparers.UriComparer.Compare(System.String)">
            <summary>
            Compares the specified value. 
            </summary>
            <param name="value">The url to compare with.</param>
            <returns>
            Should return <c>true</c> or <c>false</c>, which is the default.
            </returns>
        </member>
        <member name="M:WatiN.Core.Comparers.UriComparer.Compare(System.Uri)">
            <summary>
            Compares the specified Uri.
            </summary>
            <param name="url">The Uri.</param>
            <returns><c>true</c> when equal; otherwise <c>false</c></returns>
        </member>
        <member name="M:WatiN.Core.Comparers.UriComparer.ToString">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Comparers.StringContainsAndCaseInsensitiveComparer">
            <summary>
            Class that supports a simple matching of two strings.
            </summary>
        </member>
        <member name="T:WatiN.Core.Comparers.StringComparer">
            <summary>
            Class that supports an exact comparison of two string values.
            </summary>
        </member>
        <member name="M:WatiN.Core.Comparers.StringComparer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Comparers.StringComparer"/> class.
            The string comparison done by <see cref="M:WatiN.Core.Comparers.StringComparer.Compare(System.String)"/> will ignore any case differences.
            </summary>
            <param name="expectedValue">The value used to compare against.</param>
        </member>
        <member name="M:WatiN.Core.Comparers.StringComparer.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Comparers.StringComparer"/> class and allows
            to specify the behavior regarding case sensitive comparisons.
            </summary>
            <param name="comparisonValue">The value used to compare against.</param>
            <param name="ignoreCase">if set to <c>false</c> <see cref="M:WatiN.Core.Comparers.StringComparer.Compare(System.String)"/>
            will also check the casing of the <see cref="T:System.String"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="comparisonValue"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Comparers.StringComparer.Compare(System.String)">
            <summary>
            Compares the specified value. 
            </summary>
            <param name="value">The value to compare with.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:WatiN.Core.Comparers.StringComparer.AreEqual(System.String,System.String)">
            <summary>
            Compare the two values with <seealso cref="T:System.Globalization.CultureInfo"/> set to InvariantCulture.
            </summary>
            <param name="lhs">The left hand side value.</param>
            <param name="rhs">The right hand side value.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:WatiN.Core.Comparers.StringComparer.AreEqual(System.String,System.String,System.Boolean)">
            <summary>
            Compare the two values with <seealso cref="T:System.Globalization.CultureInfo"/> set to InvariantCulture.
            </summary>
            <param name="lhs">The left hand side value.</param>
            <param name="rhs">The right hand side value.</param>
            <param name="ignoreCase">if set to <c>true</c> it compares case insensitive.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:WatiN.Core.Comparers.StringComparer.ToString">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Comparers.StringComparer.ComparisonValue">
            <summary>
            Gets the value to compare against.
            </summary>
        </member>
        <member name="M:WatiN.Core.Comparers.StringContainsAndCaseInsensitiveComparer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Comparers.StringContainsAndCaseInsensitiveComparer"/> class.
            </summary>
            <param name="comparisonValue">The value used to compare against.</param>
        </member>
        <member name="M:WatiN.Core.Comparers.StringContainsAndCaseInsensitiveComparer.Compare(System.String)">
            <summary>
            Checks if the given <paramref name="value"/> contains the string to compare against.
            Comparison is done case insensitive.
            </summary>
            <param name="value">The value to compare with.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:WatiN.Core.Comparers.StringContainsAndCaseInsensitiveComparer.ToString">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.PageAttribute">
            <summary>
            Specifies metadata about a <see cref="T:WatiN.Core.Page"/> class.
            </summary>
            <seealso cref="T:WatiN.Core.Page"/>
        </member>
        <member name="P:WatiN.Core.PageAttribute.UrlRegex">
            <summary>
            Gets or sets a regular expression that is expected to match the Url of the page.
            </summary>
            <remarks>
            The regular expression should generally exclude host name and domain information
            since it may vary between production and testing environments.  It only needs
            to match enough of the Url to reliably detect that page navigation has proceeded
            as planned.
            </remarks>
            <value>The url regular expression or null if none</value>
        </member>
        <member name="P:WatiN.Core.PageAttribute.IsSecure">
            <summary>
            Gets or sets whether the web page url is always expected to be access using the HTTPS protocol.
            </summary>
            <remarks>
            When set to <c>true</c>, page url validation will check that the HTTPS protocol appears in
            the page url.
            </remarks>
        </member>
        <member name="P:WatiN.Core.Native.Windows.Window.ProcessID">
            <summary>
            Gets the process ID in which the window is running.
            </summary>
            <value>The process ID.</value>
        </member>
        <member name="M:WatiN.Core.WaitForCompleteBase.DoWait">
            <summary>
            This method calls InitTimeOut and waits till IE is ready
            processing or the timeout period has expired.
            </summary>
        </member>
        <member name="M:WatiN.Core.WaitForCompleteBase.InitialSleep">
            <summary>
            Waits an initial small sleep time (10ms default) to allow the browser some
            time to perform any immediately pending asynchronous operations that might
            cause it to enter a busy state.
            </summary>
        </member>
        <member name="M:WatiN.Core.WaitForCompleteBase.WaitForCompleteOrTimeout">
            <summary>
            This method waits till IE is ready processing 
            or the timeout period has expired. You should
            call InitTimeout prior to calling this method.
            </summary>
        </member>
        <member name="M:WatiN.Core.WaitForCompleteBase.InitTimeout">
            <summary>
            This method is called to initialise the start time for
            determining a time out. It's set to the current time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.WaitForCompleteBase.IsTimedOut">
            <summary>
            This method evaluates the time between the last call to InitTimeOut
            and the current time. If the timespan is more than 30 seconds, the
            return value will be true.
            </summary>
            <returns>If the timespan is more than 30 seconds, the
            return value will be true</returns>
        </member>
        <member name="M:WatiN.Core.WaitForCompleteBase.ThrowExceptionWhenTimeout(System.String)">
            <summary>
            This method checks the return value of IsTimedOut. When true, it will
            throw a TimeoutException with the timeoutMessage param as message.
            </summary>
            <param name="timeoutMessage">The message to present when the TimeoutException is thrown</param>
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEWaitForComplete.WaitUntilNotNull(WatiN.Core.UtilityClasses.DoFunc{System.Nullable{System.Boolean}},WatiN.Core.UtilityClasses.BuildTimeOutExceptionMessage)">
            <summary>
            Waits until the method returns true or false.
            </summary>
            <param name="func">The function to evaluate.</param>
            <param name="exceptionMessage">A function to build an exception message.</param>
            <returns>The last function result.</returns>
            <exception cref="T:WatiN.Core.Exceptions.TimeoutException">Thrown if a timeout occurs.</exception>
        </member>
        <member name="T:WatiN.Core.Native.Chrome.ChromeBrowser">
            <summary>
            Native driver the communicates with the Chrome browser using a
            telnet session <see cref="T:WatiN.Core.Native.ClientPortBase"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.Native.JSBrowserBase">
            <summary>
            Defines behaviour common to most javascript controlled browsers.
            </summary>
        </member>
        <member name="T:WatiN.Core.Native.INativeBrowser">
            <summary>
            Provides access to native services offered by a web browser.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.INativeBrowser.NavigateTo(System.Uri)">
            <summary>
            Navigates to the specified <paramref name="url"/>.
            </summary>
            <param name="url">The URL to navigate to.</param>
        </member>
        <member name="M:WatiN.Core.Native.INativeBrowser.NavigateToNoWait(System.Uri)">
            <summary>
            Navigates to the specified <paramref name="url"/> without waiting for the page to finish loading.
            </summary>
            <param name="url">The URL to navigate to.</param>
        </member>
        <member name="M:WatiN.Core.Native.INativeBrowser.GoBack">
            <summary>
            Navigates the browser back to the previously display Url
            </summary>
            <returns><c>True</c> if succeded otherwise <c>false</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Native.INativeBrowser.GoForward">
            <summary>
            Navigates the browser forward to the next displayed Url (like the forward
            button in Internet Explorer). 
            </summary>
            <returns><c>True</c> if succeded otherwise <c>false</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Native.INativeBrowser.Reopen">
            <summary>
            Closes and then reopens the browser with a blank page.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.INativeBrowser.Refresh">
            <summary>
            Reloads the currently displayed webpage (like the Refresh/reload button in 
            a browser).
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.INativeBrowser.hWnd">
            <summary>
            Gets the window handle of the current browser.
            </summary>
            <value>Window handle of the current browser.</value>
        </member>
        <member name="M:WatiN.Core.Native.JSBrowserBase.#ctor(WatiN.Core.Native.ClientPortBase)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Native.JSBrowserBase"/> class.
            </summary>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="M:WatiN.Core.Native.JSBrowserBase.GoBack">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.JSBrowserBase.GoForward">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.JSBrowserBase.Reopen">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.JSBrowserBase.NavigateTo(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.JSBrowserBase.NavigateToNoWait(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.JSBrowserBase.Reload(System.Boolean)">
            <summary>
            Reloads this instance.
            </summary>
            <param name="forceGet">When it is <c>true</c>, causes the page to always be reloaded from the server. 
            If it is <c>false</c>, the browser may reload the page from its cache.</param>
        </member>
        <member name="M:WatiN.Core.Native.JSBrowserBase.Refresh">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.JSBrowserBase.Close">
            <summary>
            Closes the browser.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.JSBrowserBase.LoadUri(System.Uri,System.Boolean)">
            <summary>
            Load a URL into the document. see: http://developer.mozilla.org/en/docs/XUL:browser#m-loadURI
            </summary>
            <param name="url">The URL to laod.</param>
            <param name="waitForComplete">If false, makes to execution of LoadUri asynchronous.</param>
        </member>
        <member name="P:WatiN.Core.Native.JSBrowserBase.ClientPort">
            <summary>
            Gets the client port used to communicate with the instance of FireFox.
            </summary>
            <value>The client port.</value>
        </member>
        <member name="P:WatiN.Core.Native.JSBrowserBase.BrowserVariableName">
            <summary>
            Gets the name of the browser variable.
            </summary>
            <value>The name of the browser variable.</value>
        </member>
        <member name="P:WatiN.Core.Native.JSBrowserBase.hWnd">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.Chrome.ChromeBrowser.#ctor(WatiN.Core.Native.ClientPortBase)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Native.Chrome.ChromeBrowser"/> class.
            </summary>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="M:WatiN.Core.Native.Chrome.ChromeBrowser.LoadUri(System.Uri,System.Boolean)">
            <summary>
            Load a URL into the document.
            </summary>
            <param name="url">The URL to laod.</param>
            <param name="waitForComplete">If false, makes to execution of LoadUri asynchronous.</param>
        </member>
        <member name="M:WatiN.Core.Native.Chrome.ChromeBrowser.ReAttachToTab(System.Uri)">
            <summary>
            Reattaches to the first tab. This is required every time the document
            </summary>
        </member>
        <member name="T:WatiN.Core.HtmlColor">
            <summary>
            This class helps converting all kinds of html color formats
            to one uniform <see cref="T:WatiN.Core.HtmlColor"/> object. IE and FireFox return
            differently formatted results when retrieving a color, for instance backgroundColor. This class
            provides a way to keep your tests browser agnostic when it comes to checking color values.
            </summary>
            <example>
            Following some examples of valid use of this class. These all create the same
            <see cref="T:WatiN.Core.HtmlColor"/> object:
            <code>
            var blue = new HtmlCode("blue");
            var blue = new HtmlCode("#0000FF");
            var blue = new HtmlCode("#00F");
            var blue = new HtmlCode("rgb(0,0,255)");
            </code>
            The class provides factory properties for creating the 16 color names defined
            by the W3C.
            <code>
            var blue = HtmlCode.Blue;
            </code>
            The power of this class lies in the fact that you can use it in your test
            expectations no matter what color format the browser returns.
            <code>
            var backgroundColor = browser.Div("with_background_color").Style.BackgroundColor;
            Assert.That(new HtmlColor(backgroundColor), Is.EqualTo(HtmlColor.Yellow));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.HtmlColor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.HtmlColor"/> class.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.FormatException">Will be thrown if the value can't be converted
            to a color.</exception>
            <example>
            Following some examples of valid use of this class. These all create the same
            <see cref="T:WatiN.Core.HtmlColor"/> object:
            <code>
            var blue = new HtmlCode("blue");
            var blue = new HtmlCode("#0000FF");
            var blue = new HtmlCode("#00F");
            var blue = new HtmlCode("rgb(0,0,255)");
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.HtmlColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:WatiN.Core.HtmlColor"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:WatiN.Core.HtmlColor"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:WatiN.Core.HtmlColor"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:WatiN.Core.HtmlColor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:WatiN.Core.HtmlColor"/>.
            </returns>
        </member>
        <member name="M:WatiN.Core.HtmlColor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:WatiN.Core.HtmlColor"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:WatiN.Core.HtmlColor"/>.
            </returns>
        </member>
        <member name="P:WatiN.Core.HtmlColor.Color">
            <summary>
            Returns the <see cref="T:System.Drawing.Color"/> wrapped by this class.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:WatiN.Core.HtmlColor.ToName">
            <summary>
            Returns a descriptive W3C color name (Aqua, Black, Blue, Fuchsia, Gray, Green, Lime, 
            Maroon, Navy, Olive, Purple, Red, Silver, Teal, White or Yellow). If it's none
            of these colors, it will return "unknown". 
            </summary>
            <value>To name.</value>
        </member>
        <member name="P:WatiN.Core.HtmlColor.ToHexString">
            <summary>
            Returns the color in a html hex code formatted string
            </summary>
            <value>To hex string.</value>
        </member>
        <member name="P:WatiN.Core.HtmlColor.ToRgbString">
            <summary>
            Returns the color in a rgb formatted string.
            </summary>
            <value>To RGB string.</value>
        </member>
        <member name="T:WatiN.Core.UtilityClasses.SimpleTimer">
             <summary>
             This class provides a simple way to handle loops that have to time out after 
             a specified number of seconds.
             </summary>
             <example>
             This is an example how you could use this class in your code.
             <code>
             // timer should elapse after 30 seconds
             SimpleTimer timeoutTimer = new SimpleTimer(30);
            
             do
             {
               // Your check logic goes here
               
               // wait 200 miliseconds
               Thread.Sleep(200);
             } while (!timeoutTimer.Elapsed);
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.SimpleTimer.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.UtilityClasses.SimpleTimer"/> class.
            </summary>
            <param name="timeout">The timeout.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="timeout"/> is negative.</exception>
        </member>
        <member name="P:WatiN.Core.UtilityClasses.SimpleTimer.Elapsed">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.UtilityClasses.SimpleTimer"/> is elapsed.
            </summary>
            <value><c>true</c> if elapsed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.UtilityClasses.SimpleTimer.Timeout">
            <summary>
            The amount of time after which this timer times out. The time out can only be
            set through the constructor.
            </summary>
        </member>
        <member name="T:WatiN.Core.RadioButtonCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.RadioButton"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.RadioButtonCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.RadioButtonCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.RadioButtonCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Exceptions.SelectListItemNotFoundException">
            <summary>
            Thrown if the searched for selectlist item (option) can't be found.
            </summary>
        </member>
        <member name="T:WatiN.Core.ElementCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Element"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.ElementCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ElementCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.ElementCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.ElementCollection`1">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Element"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
            <typeparam name="TElement">The element type</typeparam>
        </member>
        <member name="M:WatiN.Core.ElementCollection`1.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ElementCollection`1"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.ElementCollection`1.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.DialogHandlers.DialogWatcher">
            <summary>
            This class handles alert/popup dialogs. Every second it checks if a dialog
            is shown. If so, it stores it's message in the alertQueue and closses the dialog
            by clicking the close button in the title bar.  
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.GetDialogWatcher(System.IntPtr)">
            <summary>
            Gets the dialog watcher for the specified (main) internet explorer window. 
            It creates new instance if no dialog watcher for the specified window exists.
            </summary>
            <param name="mainWindowHwnd">The (main) internet explorer window.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.#ctor(WatiN.Core.Native.Windows.Window)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.DialogWatcher"/> class.
            You are encouraged to use the Factory method <see cref="M:WatiN.Core.DialogHandlers.DialogWatcher.GetDialogWatcherFromCache(WatiN.Core.Native.Windows.Window)"/>
            instead.
            </summary>
            <param name="mainWindow">The main window handle of internet explorer.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.IncreaseReferenceCount">
            <summary>
            Increases the reference count of this DialogWatcher instance with 1.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.DecreaseReferenceCount">
            <summary>
            Decreases the reference count of this DialogWatcher instance with 1.
            When reference count becomes zero, the Dispose method will be 
            automatically called. This method will throw an <see cref="T:WatiN.Core.Exceptions.ReferenceCountException"/>
            if the reference count is zero.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.Add(WatiN.Core.Interfaces.IDialogHandler)">
            <summary>
            Adds the specified handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.Remove(WatiN.Core.Interfaces.IDialogHandler)">
            <summary>
            Removes the specified handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.RemoveAll(WatiN.Core.Interfaces.IDialogHandler)">
            <summary>
            Removes all instances that match <paramref name="handler"/>.
            This method determines equality by calling Object.Equals.
            </summary>
            <param name="handler">The object implementing IDialogHandler.</param>
            <example>
            If you want to use RemoveAll with your custom dialog handler to
            remove all instances of your dialog handler from a DialogWatcher instance,
            you should override the Equals method in your custom dialog handler class 
            like this:
            <code>
            public override bool Equals(object obj)
            {
              if (obj == null) return false;
              
              return (obj is YourDialogHandlerClassNameGoesHere);
            }                               
            </code>
            You could also inherit from <see cref="T:WatiN.Core.DialogHandlers.BaseDialogHandler"/> instead of implementing
            <see cref="T:WatiN.Core.Interfaces.IDialogHandler"/> in your custom dialog handler. <see cref="T:WatiN.Core.DialogHandlers.BaseDialogHandler"/> provides
            overrides for Equals and GetHashCode that work with RemoveAll.
            </example>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.Clear">
            <summary>
            Removes all registered dialog handlers.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.Contains(WatiN.Core.Interfaces.IDialogHandler)">
            <summary>
            Determines whether this <see cref="T:WatiN.Core.DialogHandlers.DialogWatcher"/> contains the specified dialog handler.
            </summary>
            <param name="handler">The dialog handler.</param>
            <returns>
            	<c>true</c> if [contains] [the specified handler]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.Start">
            <summary>
            Called by the constructor to start watching popups
            on a separate thread.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.HandleWindow(WatiN.Core.Native.Windows.Window)">
            <summary>
            If the window is a dialog and visible, it will be passed to
            the registered dialog handlers. I none if these can handle
            it, it will be closed if <see cref="P:WatiN.Core.DialogHandlers.DialogWatcher.CloseUnhandledDialogs"/>
            is <c>true</c>.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.DialogWatcher.Count">
            <summary>
            Gets the count of registered dialog handlers.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.DialogWatcher.CloseUnhandledDialogs">
            <summary>
            Gets or sets a value indicating whether unhandled dialogs should be closed automaticaly.
            The initial value is set to the value of <cref name="Settings.AutoCloseDialogs" />.
            </summary>
            <value>
            	<c>true</c> if unhandled dialogs should be closed automaticaly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.DialogWatcher.MainWindowHwnd">
            <summary>
            Gets the (main) internet explorer window handle this dialog watcher watches.
            </summary>
            <value>The process id.</value>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.DialogWatcher.LastException">
            <summary>
            Get the last stored exception thrown by a dialog handler while 
            calling the <see cref="M:WatiN.Core.Interfaces.IDialogHandler.HandleDialog(WatiN.Core.Native.Windows.Window)"/> method of the
            dialog handler.
            </summary>
            <value>The last exception.</value>
        </member>
        <member name="T:WatiN.Core.Constraints.LabelTextConstraint">
            <summary>
            Use this class to find a form field whose associated label contains a particular value.
            This constraint class is kindly donated by Seven Simple Machines.
            </summary>
            <example>
            This shows how to find a text field with an associated label containing the text "User name:".
            <code>ie.TextField( new LabelTextConstraint("User name:") ).TypeText("MyUserName")</code>
            or use
            <code>ie.TextField(Find.ByLabelText("User name:")).TypeText("MyUserName")</code>
            </example>
        </member>
        <member name="T:WatiN.Core.Constraints.AttributeConstraint">
            <summary>
            This is the base class for finding elements by a specified attribute. Use
            this class or one of it's subclasses to implement your own comparison logic.
            </summary>
            <example>
            <code>ie.Link(new Attribute("id", "testlinkid")).Url</code>
            or use 
            <code>ie.Link(Find.By("id", "testlinkid")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Constraints.AttributeConstraint.#ctor(System.String,System.String)">
            <summary>
            Creates an attribute constraint to search for an exact match by string value.
            </summary>
            <param name="attributeName">Name of the attribute as recognised by Internet Explorer.</param>
            <param name="comparisonValue">The value to look for</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="attributeName"/>
            or <paramref name="comparisonValue"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="attributeName"/> is empty</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.AttributeConstraint.#ctor(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Creates an attribute constraint to search for a match by regular expression.
            </summary>
            <param name="attributeName">Name of the attribute as recognised by Internet Explorer.</param>
            <param name="regex">The regular expression to look for</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="attributeName"/>
            or <paramref name="regex"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="attributeName"/> is empty</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.AttributeConstraint.#ctor(System.String,WatiN.Core.Comparers.Comparer{System.String})">
            <summary>
            Creates an attribute constraint to search for a match using a custom comparer.
            </summary>
            <param name="attributeName">Name of the attribute as recognised by Internet Explorer.</param>
            <param name="comparer">The attribute value comparer</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="attributeName"/>
            or <paramref name="comparer"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="attributeName"/> is empty</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.AttributeConstraint.WriteDescriptionTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.AttributeConstraint.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Constraints.AttributeConstraint.AttributeName">
            <summary>
            Gets the name of the attribute.
            </summary>
            <value>The name of the attribute.</value>
        </member>
        <member name="P:WatiN.Core.Constraints.AttributeConstraint.Comparer">
            <summary>
            Gets the comparer used to match the expected attribute value with 
            the actual attribute value of an html element on a webpage.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="M:WatiN.Core.Constraints.LabelTextConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Constraints.LabelTextConstraint"/> class;
            </summary>
            <param name="labelText">The text that represents the label for the form element.</param>
        </member>
        <member name="M:WatiN.Core.Constraints.LabelTextConstraint.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Constraints.LabelTextConstraint"/> class;
            </summary>
            <param name="labelText">The text that represents the label for the form element.</param>
        </member>
        <member name="M:WatiN.Core.Constraints.LabelTextConstraint.#ctor(System.Predicate{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Constraints.LabelTextConstraint"/> class;
            </summary>
            <param name="comparer">The text that represents the label for the form element.</param>
        </member>
        <member name="M:WatiN.Core.Constraints.LabelTextConstraint.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.LabelTextConstraint.WriteDescriptionTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Comparers.TypeComparer">
            <summary>
            Class that supports comparing the given Type with the type of a subclass of <see cref="T:WatiN.Core.Element"/>
            </summary>
        </member>
        <member name="M:WatiN.Core.Comparers.TypeComparer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Comparers.TypeComparer"/> class.
            </summary>
            <param name="type">The type to compare against.</param>
        </member>
        <member name="M:WatiN.Core.Comparers.TypeComparer.Compare(WatiN.Core.Element)">
            <summary>
            Compares the specified element with the Type .
            </summary>
            <param name="element">The element to compare with.</param>
            <returns>Returns <c>true</c> if the <paramref name="element"/> is the exact type, otherwise it will return <c>false</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Comparers.TypeComparer.ToString">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Comparers.TypeComparer.Type">
            <summary>
            Gets the type to compare against.
            </summary>
        </member>
        <member name="T:WatiN.Core.Comparers.StringEqualsAndCaseInsensitiveComparer">
            <summary>
            Class that supports a simple matching of two strings. For a match, the given strings
            should be equal (this includes the casing of the strings).
            You can also use <seealso cref="M:WatiN.Core.Comparers.StringComparer.#ctor(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.PageMetadata">
            <summary>
            Provides metadata about a page.
            </summary>
        </member>
        <member name="M:WatiN.Core.PageMetadata.#ctor(System.Type)">
            <summary>
            Creates a page metadata object about a particular subclass of <see cref="T:WatiN.Core.Page"/>.
            </summary>
            <param name="pageType">The page type</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="pageType"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="pageType"/> is not a subclass
            of <see cref="T:WatiN.Core.Page"/></exception>
        </member>
        <member name="P:WatiN.Core.PageMetadata.PageType">
            <summary>
            Gets the subclass of <see cref="T:WatiN.Core.Page"/> that describes the page.
            </summary>
        </member>
        <member name="P:WatiN.Core.PageMetadata.UrlRegex">
            <summary>
            Gets a regular expression that is expected to match the Url of the page, or null if unknown.
            </summary>
        </member>
        <member name="P:WatiN.Core.PageMetadata.IsSecure">
            <summary>
            Returns true if the page is expected to always be accessed using HTTPS.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FFDocument.GetTextBounds(System.String)">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FFDocument.ClientPort">
            <summary>
            Gets the FireFox client port.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FFDocument.DocumentReference">
            <summary>
            Gets the name of a variable that stores a reference to the document within FireFox.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FFDocument.AllElements">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FFDocument.ContainingFrameElement">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FFDocument.Body">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FFDocument.Url">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FFDocument.Title">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.ControlCollection`1">
            <summary>
            A collection of user-defined control objects.
            </summary>
            <typeparam name="TControl">The control subclass</typeparam>
            <seealso cref="T:WatiN.Core.Control`1"/>
        </member>
        <member name="M:WatiN.Core.ControlCollection`1.CreateControlCollection``1(WatiN.Core.IElementCollection{``0})">
            <summary>
            Creates a control collection from an element collection.
            </summary>
            <typeparam name="TElement">The element type</typeparam>
            <param name="elements">The element collection to wrap</param>
            <returns>The control collection</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="elements"/> is null</exception>
        </member>
        <member name="T:WatiN.Core.Logging.StringLogWriter">
            <summary>
            This logger class writes it's output to a string
            </summary>
            <example>
            The following code attaches the StringLogWriter to WatiN and writes a
            LogAction.
            <code>
            Logger.LogWriter = new StringLogWriter();
            Logger.LogAction("Attached StringLogWriter");
            </code>
            </example>
        </member>
        <member name="F:WatiN.Core.Logging.StringLogWriter.Builder">
            <summary>
            private StringBuilder keeping the log
            </summary>
        </member>
        <member name="M:WatiN.Core.Logging.StringLogWriter.WriteLogLine(System.String)">
            <summary>
            private method to write the log line
            </summary>
            <param name="message">message to write</param>
        </member>
        <member name="M:WatiN.Core.Logging.StringLogWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:WatiN.Core.Logging.StringLogWriter.IncludeTimestamp">
            <summary>
            flag to indicate inclusion of a timestamp (in "yyyy-mm-ddThh:nn:ss" format)
            </summary>
        </member>
        <member name="P:WatiN.Core.Logging.StringLogWriter.LogString">
            <summary>
            data string containing the log
            </summary>
        </member>
        <member name="T:WatiN.Core.TableCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Table"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.TableCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.TableCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.TableCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.TableCell">
            <summary>
            This class provides specialized functionality for a HTML td element.
            </summary>
        </member>
        <member name="P:WatiN.Core.TableCell.ContainingTable">
            <summary>
            Gets the table that contains this cell.
            </summary>
        </member>
        <member name="P:WatiN.Core.TableCell.ContainingTableBody">
            <summary>
            Gets the table body that contains this cell.
            </summary>
        </member>
        <member name="P:WatiN.Core.TableCell.ContainingTableRow">
            <summary>
            Gets the table row that contains this cell.
            </summary>
        </member>
        <member name="P:WatiN.Core.TableCell.ParentTableRow">
            <summary>
            Gets the table row that contains this cell.
            </summary>
        </member>
        <member name="P:WatiN.Core.TableCell.Index">
            <summary>
            Gets the index of the <see cref="T:WatiN.Core.TableCell"/> in the <see cref="T:WatiN.Core.TableCellCollection"/> of the parent <see cref="T:WatiN.Core.TableRow"/>.
            </summary>
            <value>The index of the cell.</value>
        </member>
        <member name="T:WatiN.Core.Para">
            <summary>
            This class provides specialized functionality for a HTML para element.
            </summary>
        </member>
        <member name="T:WatiN.Core.Frame">
            <summary>
            This class provides specialized functionality for a Frame or IFrame.
            </summary>
        </member>
        <member name="M:WatiN.Core.Frame.#ctor(WatiN.Core.DomContainer,WatiN.Core.Native.INativeDocument)">
            <summary>
            This constructor will mainly be used by the constructor of FrameCollection
            to create an instance of a Frame.
            </summary>
            <param name="domContainer">The domContainer</param>
            <param name="frameDocument">The document within the frame</param>
        </member>
        <member name="M:WatiN.Core.Frame.GetAttributeValueImpl(System.String)">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Frame.NativeDocument">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Exceptions.FrameNotFoundException">
            <summary>
            Thrown if the searched for frame can't be found.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.VbScriptMsgBoxDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines whether VbScriptMsgBoxDialogHandler can handle the specified window by checking <see cref="P:WatiN.Core.Native.Windows.Window.StyleInHex"/>.
            Valid value is "94C803C5".
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if VbScriptMsgBoxDialogHandler can handle the dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.VbScriptMsgBoxDialogHandler.IfOKButtonThenGetTheRightButtonId(WatiN.Core.Native.Windows.Window,WatiN.Core.DialogHandlers.VbScriptMsgBoxDialogHandler.Button)">
            <summary>
            When OK is the only button on the msgbox (buttons value = 1)
            then the button Id = 2. In all other situations the button Id
            for OK is 1.
            </summary>
            <param name="window"></param>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.PromptDialogHandler.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.PromptDialogHandler"/> class.
            </summary>
            <param name="cancel">if set to <c>true</c> <see cref="M:WatiN.Core.DialogHandlers.PromptDialogHandler.HandleDialog(WatiN.Core.Native.Windows.Window)"/> will click on the Cancel button of the prompt dialog.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.PromptDialogHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.PromptDialogHandler"/> class.
            </summary>
            <param name="input">The text will be entered in the input field of the prompt dialog after which the OK button will be clicked.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.PromptDialogHandler.HandleDialog(WatiN.Core.Native.Windows.Window)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.DialogHandlers.PromptDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines whether the window is a prompt dialog by checking the <see cref="P:WatiN.Core.Native.Windows.Window.StyleInHex"/>.
            Valid value is "94C800C4".
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if window is a prompt dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.CertificateWarningHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.CertificateWarningHandler"/> class.
            This handler will click the "Yes" button at the certificate warning dialog.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.CertificateWarningHandler.#ctor(WatiN.Core.DialogHandlers.CertificateWarningHandler.ButtonsEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.CertificateWarningHandler"/> class.
            </summary>
            <param name="buttonToPush">The button to push.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.CertificateWarningHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines whether the specified window is a certificate dialog by checking <see cref="P:WatiN.Core.Native.Windows.Window.StyleInHex"/>.
            valid value is "94C808C4".
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if the specified window is a certificate dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WatiN.Core.Native.ClientPortBase">
            <summary>
            Common client port behaviour.
            </summary>
        </member>
        <member name="T:WatiN.Core.Native.IClientPort">
            <summary>
            Common behavior for a client port used to communicate with a browsers remote automation server.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.IClientPort.Write(System.String,System.Object[])">
            <summary>
            Writes the specified data to the jssh server.
            </summary>
            <param name="data">The data to write.</param>
            <param name="args">Arguments to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
        </member>
        <member name="M:WatiN.Core.Native.IClientPort.WriteAndReadIgnoreError(System.String,System.Object[])">
            <summary>
            Writes the specified data ignoring any errors and reads the response.
            </summary>
            <param name="data">The data to write.</param>
            <param name="args">The arguments to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <returns>The response to the data written.</returns>
        </member>
        <member name="M:WatiN.Core.Native.IClientPort.WriteAndRead(System.String,System.Object[])">
            <summary>
            Writes the specified data and reads the response.
            </summary>
            <param name="data">The data to write.</param>
            <param name="args">The arguments to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <returns>The response to the data written.</returns>
        </member>
        <member name="M:WatiN.Core.Native.IClientPort.WriteAndReadAsBool(System.String,System.Object[])">
            <summary>
            Writes the specified data and read the response parsing it as a boolean.
            </summary>
            <param name="data">The data to write.</param>
            <param name="args">The arguments to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <returns>A boolean value from the response to the data written.</returns>
        </member>
        <member name="M:WatiN.Core.Native.IClientPort.WriteAndReadAsInt(System.String,System.Object[])">
            <summary>
            Writes the and read as int.
            </summary>
            <param name="data">The data to write.</param>
            <param name="args">The arguments to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <returns>An integer value parsed from the response.</returns>
        </member>
        <member name="M:WatiN.Core.Native.IClientPort.InitializeDocument">
            <summary>
            Initializes the document.
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.ClientPortBase.VariableNameHelper">
            <summary>
            Used by CreateElementVariableName
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.ClientPortBase._lastResponse">
            <summary>
            Gets the last response recieved from the jssh server
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.ClientPortBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Native.ClientPortBase"/> class.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.ClientPortBase.Write(System.String,System.Object[])">
            <summary>
            Writes the specified data to the jssh server.
            </summary>
            <param name="data">The data to write.</param>
            <param name="args">Arguments to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
        </member>
        <member name="M:WatiN.Core.Native.ClientPortBase.WriteAndReadIgnoreError(System.String,System.Object[])">
            <summary>
            Writes the specified data ignoring any errors and reads the response.
            </summary>
            <param name="data">The data to write.</param>
            <param name="args">The arguments to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <returns>The response to the data written.</returns>
        </member>
        <member name="M:WatiN.Core.Native.ClientPortBase.WriteAndRead(System.String,System.Object[])">
            <summary>
            Writes the specified data and reads the response.
            </summary>
            <param name="data">The data to write.</param>
            <param name="args">The arguments to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <returns>The response to the data written.</returns>
        </member>
        <member name="M:WatiN.Core.Native.ClientPortBase.WriteAndReadAsBool(System.String,System.Object[])">
            <summary>
            Writes the specified data and read the response parsing it as a boolean.
            </summary>
            <param name="data">The data to write.</param>
            <param name="args">The arguments to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <returns>A boolean value from the response to the data written.</returns>
        </member>
        <member name="M:WatiN.Core.Native.ClientPortBase.WriteAndReadAsInt(System.String,System.Object[])">
            <summary>
            Writes the and read as int.
            </summary>
            <param name="data">The data to write.</param>
            <param name="args">The arguments to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <returns>An integer value parsed from the response.</returns>
        </member>
        <member name="M:WatiN.Core.Native.ClientPortBase.InitializeDocument">
            <summary>
            Initializes the document.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.ClientPortBase.CreateVariableName">
            <summary>
            Creates a unique variable name, i.e. doc.watin23
            </summary>
            <returns>A unique variable.</returns>
        </member>
        <member name="M:WatiN.Core.Native.ClientPortBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:WatiN.Core.Native.ClientPortBase.Connect(System.String)">
            <summary>
            Connects to the Chrome browser and navigates to the specified URL.
            </summary>
            <param name="url">The URL to connect to.</param>
        </member>
        <member name="M:WatiN.Core.Native.ClientPortBase.SendAndRead(System.String,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Writes the specified data to the jssh server.
            </summary>
            <param name="data">The data to write.</param>
            <param name="resultExpected"><c>true</c> if a result is expected.</param>
            <param name="checkForErrors"><c>true</c> if error checking should be applied.</param>
            <param name="args">Arguments to format with the data.</param>        
        </member>
        <member name="M:WatiN.Core.Native.ClientPortBase.AddToLastResponse(System.String)">
            <summary>
            Adds the specified <paramref name="response"/> to the last response field.
            </summary>
            <param name="response">The response to add.</param>
        </member>
        <member name="P:WatiN.Core.Native.ClientPortBase.DocumentVariableName">
            <summary>
            Gets the name of the javascript variable that references the DOM:document object.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.ClientPortBase.JavaScriptEngine">
            <summary>
            Gets the type of java script engine.
            </summary>
            <value>The type of java script engine.</value>
        </member>
        <member name="P:WatiN.Core.Native.ClientPortBase.BrowserVariableName">
            <summary>
            Gets the name of the browser variable.
            </summary>
            <value>The name of the browser variable.</value>
        </member>
        <member name="P:WatiN.Core.Native.ClientPortBase.Process">
            <summary>
            Gets or sets the browser process.
            </summary>
            <value>The browser process.</value>
        </member>
        <member name="P:WatiN.Core.Native.ClientPortBase.LastResponseRaw">
            <summary>
            Gets or sets the last response without any cleaning applied to it.
            </summary>
            <value>The last response raw.</value>
        </member>
        <member name="P:WatiN.Core.Native.ClientPortBase.Response">
            <summary>
            Gets or sets the entire response from the remote server so far.
            </summary>
            <value>The response from the remote server so far.</value>
        </member>
        <member name="P:WatiN.Core.Native.ClientPortBase.LastResponse">
            <summary>
            Gets or sets the last reponse recieved from the jssh server
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.ClientPortBase.LastResponseAsBool">
            <summary>
            Gets a value indicating whether the last response was <c>true</c>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.ClientPortBase.LastResponseIsNull">
            <summary>
            Gets a value indicating whether last response is null.
            </summary>
            <value><c>true</c> if last response is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Native.ClientPortBase.LastResponseAsInt">
            <summary>
            Gets LastResponseAsInt.
            </summary>
            <value>
            The last response as int.
            </value>
        </member>
        <member name="T:WatiN.Core.Native.Chrome.ChromeException">
            <summary>
            Exceptions thrown by the Chrome web browser.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.Chrome.ChromeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Native.Chrome.ChromeException"/> class.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.Chrome.ChromeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Native.Chrome.ChromeException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:WatiN.Core.Native.Chrome.ChromeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Native.Chrome.ChromeException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerexception">The innerexception.</param>
        </member>
        <member name="M:WatiN.Core.Native.Chrome.ChromeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Native.Chrome.ChromeException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:WatiN.Core.ComponentFinder">
            <summary>
            Assists with finding components generically by type.
            </summary>
        </member>
        <member name="T:WatiN.Core.UtilityClasses.CaptureWebPage">
            <summary>
            This class contains functionality to capture an image from a web page and save it to a file.
            The code was written by Doug Weems at http://www.codeproject.com/KB/graphics/IECapture.aspx
            </summary>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.CaptureWebPage.CaptureWebPageToFile(System.String,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Captures an image of the current page on the current browser via _domContainer to disk
            </summary>
            <param name="filename">The filename.</param>
            <param name="writeUrl">Place the url text as an overlay on the screenshot.</param>
            <param name="showGuides">Draws guides on the image to show which part of the page is visible for different resolutions. Off by default</param>
            <param name="scalePercentage">Percentage for scaling, default is 100.</param>
            <param name="quality">
            0-100 - The Quality category specifies the level of compression for an image. When used to construct an 
            EncoderParameter, the range of useful values for the quality category is from 0 to 100. The lower the number specified, 
            the higher the compression and therefore the lower the quality of the image. Zero would give you the lowest quality image and 
            100 the highest.
            </param>
        </member>
        <member name="T:WatiN.Core.Form">
            <summary>
            This class provides specialized functionality for a HTML Form element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Form.DefaultToString">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Exceptions.TimeoutException">
            <summary>
            Thrown if waiting for a webpage or element times out.
            </summary>
        </member>
        <member name="T:WatiN.Core.Div">
            <summary>
            This class provides specialized functionality for a HTML div element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Div.#ctor(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Div"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="nativeElement">The HTML div element.</param>
        </member>
        <member name="M:WatiN.Core.Div.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Div"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The HTML div element.</param>
        </member>
        <member name="T:WatiN.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WatiN.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WatiN.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WatiN.Core.Properties.Resources.BaseComponentCollection_CollectionIsReadonly">
            <summary>
              Looks up a localized string similar to Collection is read-only.
            </summary>
        </member>
        <member name="P:WatiN.Core.Properties.Resources.BaseComponentCollection_DoesNotSupportSearchingByEquality">
            <summary>
              Looks up a localized string similar to Collection does not support searching by equality..
            </summary>
        </member>
        <member name="P:WatiN.Core.Properties.Resources.Control_HasAlreadyBeenInitialized">
            <summary>
              Looks up a localized string similar to The control has already been initialized..
            </summary>
        </member>
        <member name="P:WatiN.Core.Properties.Resources.IE_Dispose">
            <summary>
              Looks up a localized string similar to Closing IE instance.
            </summary>
        </member>
        <member name="P:WatiN.Core.Properties.Resources.PageMetadata_PageTypeIsExpectedToBeASubclassOfPage">
            <summary>
              Looks up a localized string similar to The page type is expected to be a subclass of Page..
            </summary>
        </member>
        <member name="P:WatiN.Core.Properties.Resources.ReEntryException_MessageFormat">
            <summary>
              Looks up a localized string similar to A match operation has been aborted because it appeared to be re-entrant.  The exception occurred in an instance of &apos;{0}&apos; with constraint: {1}..
            </summary>
        </member>
        <member name="P:WatiN.Core.Properties.Resources.sizzle">
            <summary>
              Looks up a localized string similar to (function(){var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|[&apos;&quot;][^&apos;&quot;]*[&apos;&quot;]|[^\[\]&apos;&quot;]+)+\]|\\.|[^ &gt;+~,(\[\\]+)+|[&gt;+~])(\s*,\s*)?((?:.|\r|\n)*)/g,b=0,c=Object.prototype.toString,d=!1,e=!0;[0,0].sort(function(){e=!1;return 0});var f=function(b,d,e,i){e=e||[],d=d||document;var j=d;if(d.nodeType!==1&amp;&amp;d.nodeType!==9)return[];if(!b||typeof b!==&quot;string&quot;)return e;var l,m,n,o,p,r,s,t,u=!0,v=f.isXML(d),w=[],x=b;do{a.exec(&quot;&quot;),l=a.exec(x);if(l){x=l[3],w.push(l[1]);if(l[2]){o=l[3];break}}}while(l);if(w.length&gt;1&amp;&amp; [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="T:WatiN.Core.Native.Mozilla.FFBrowser">
            <summary>
            Wrapper around the XUL:browser class, see: http://developer.mozilla.org/en/docs/XUL:browser
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FFBrowser.#ctor(WatiN.Core.Native.ClientPortBase)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Native.Mozilla.FFBrowser"/> class.
            </summary>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FFBrowser.LoadUri(System.Uri,System.Boolean)">
            <summary>
            Load a URL into the document. see: http://developer.mozilla.org/en/docs/XUL:browser#m-loadURI
            </summary>
            <param name="url">The URL to laod.</param>
            <param name="waitForComplete">If false, makes to execution of LoadUri asynchronous.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.CloseIEDialogHandler.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.CloseIEDialogHandler"/> class.
            </summary>
            <param name="clickOnOK">if set to <c>true</c> the OK button will be clicked on. Otherwise the Cancel button will be clicked.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.CloseIEDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Checks if <see cref="P:WatiN.Core.Native.Windows.Window.StyleInHex"/> of the <paramref name="window"/> is equal to "94C801C5".
            </summary>
            <param name="window">The window to validate</param>
            <returns></returns>
        </member>
        <member name="T:WatiN.Core.Comparers.PredicateComparer`2">
            <summary>
            A covariant comparer implementation based on a predicate delegate.
            </summary>
        </member>
        <member name="M:WatiN.Core.Comparers.PredicateComparer`2.#ctor(System.Predicate{`0})">
            <summary>
            Creates a predicate-based comparer.
            </summary>
            <param name="predicate">The predicate.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="predicate"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Comparers.PredicateComparer`2.Compare(`1)">
            <summary>
            Compares the specified element using the predicate passed in as parameter in the constructor.
            </summary>
            <param name="element">The element to evaluate.</param>
            <returns>The result of the comparison done by the predicate</returns>
        </member>
        <member name="M:WatiN.Core.Comparers.PredicateComparer`2.ToString">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.SelectListCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.SelectList"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.SelectListCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.SelectListCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.SelectListCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.FrameCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Frame"/> instances within a <see cref="T:WatiN.Core.Document"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.FrameCollection.CreateFilteredCollection(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.FrameCollection.GetComponents">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Button">
            <summary>
            This class provides specialized functionality for a HTML input element of type 
            button, submit, image and reset.
            </summary>
        </member>
        <member name="M:WatiN.Core.Button.#ctor(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Button"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="element">The input button or button element.</param>
        </member>
        <member name="M:WatiN.Core.Button.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Button"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="finder">The input button or button element.</param>
        </member>
        <member name="M:WatiN.Core.Button.DefaultToString">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Button.Value">
            <summary>
            The text displayed at the button.
            </summary>
            <value>The displayed text.</value>
        </member>
        <member name="P:WatiN.Core.Button.Text">
            <summary>
            The text displayed at the button (alias for the Value property).
            </summary>
            <value>The displayed text.</value>
        </member>
        <member name="T:WatiN.Core.Page">
            <summary>
            A page class describes the content and behaviors of a single web page or frame within
            a web site.  Each application page can be modeled as a subclass of <see cref="T:WatiN.Core.Page"/>.
            </summary>
            <remarks>
            <para>
            A page class typically provides access to the content and behaviors of the page
            by defining properties and methods to represent them.  In the typical case, the properties
            of a page class provide access to its elements and state.  Likewise, the methods of a page
            class perform actions or transactions.  The page class encapsulates the mechanisms used
            to access and manipulate the underlying DOM elements which enables test cases to
            become more focused on verifying application functionality.
            </para>
            <para>
            For example, instead of referring to a text box by its HTML ID everywhere it is used,
            we can create a page class to describe how the text box is accessed and what it represents
            (semantically) in terms of the application.  In this way, we can create an appropriately
            named property to provide access to the text box and clearly indicate
            that it belongs to a given web page in our application.
            </para>
            <para>
            This feature can be used to create a model of a web site (a site map) which helps to
            improve readability and encourage reuse across tests.
            </para>
            <para>
            How to create a page class:
            <list type="bullet">
            <item>Create a subclass of Page.</item>
            <item>Add a [Page] attribute to the newly created page.  Set the UrlRegex
            property to a regular expression that is expected to match part of the page's Url.
            If the page is only accessible via HTTPS then also set the IsSecure property to true.</item>
            <item>Add properties to provide access to the sub-elements of the page.  When the page
            is used, the <see cref="P:WatiN.Core.Page.Document"/> property will be set to the containing document
            (eg. the web browser or a frame).  Use this property to locate the sub-elements of the page.</item>
            <item>Define additional properties and methods as desired to model the state and
            behaviors of the page.</item>
            </list>
            </para>
            <para>
            Tips:
            <list type="bullet">
            <item>Multiple pages might share the same basic layout.  You can model this structure by
            using a super class to describe the "master page" or by defining one or more
            <see cref="T:WatiN.Core.Control`1"/> to capture recurring elements such as the page header or
            footer.</item>
            </list>
            </para>
            </remarks>
            <example>
            <para>
            Consider a web page that has a username text field, a password text field
            and a sign in button.  Before writing the test for this page, we
            create a new page class to describe how these controls are found.
            We can also add a convenient SignIn method that sets both text fields
            and clicks on the sign in button all at once.
            </para>
            <para>
            Here's how the page class will look:
            </para>
            <code>
            [Page(UrlRegex = "SignIn.aspx", IsSecure = true)]
            public class SignInPage : Page
            {
                public TextField UserNameTextField { get { return Document.TextField(Find.ByName("username")); } }
                public TextField PasswordNameTextField { get { return Document.TextField(Find.ByName("password")); } }
                public TextField SignInButton { get { return Document.Button(Find.ByName("signin")); } }
            
                public void SignIn(string userName, string password)
                {
                    // Fill in the username and password fields.
                    UserNameTextField.TypeText(userName);
                    PasswordTextField.TypeText(password);
            
                    // Click the sign in button.
                    SignInButton.Click();
                }
            }
            </code>
            <para>
            Within the page class, you may also use the <see cref="T:WatiN.Core.FindByAttribute"/> and <see cref="T:WatiN.Core.DescriptionAttribute"/>
            attributes to declaratively refer to elements of the page.  Here is part of the same example
            above using attributes instead of properties.
            </para>
            <code>
            [Page(UrlRegex = "SignIn.aspx", IsSecure = true)]
            public class SignInPage : Page
            {
                [FindBy(Name = "username"), Description("User name text field.")]
                public TextField UserNameTextField;
                
                [FindBy(Name = "password"), Description("Password text field.")]
                public TextField PasswordNameTextField;
                
                [FindBy(Name = "signIn"), Description("Sign in button.")]
                public TextField SignInButton;
                
                // etc...
            }
            </code>
            <para>
            Finally, within the test we use the functionality of the sign in page like this:
            </para>
            <code>
            browser.Page&lt;SignInPage&gt;&gt;().SignIn("somebody", "letmein");
            </code>
            </example>
            <seealso cref="T:WatiN.Core.PageAttribute"/>
        </member>
        <member name="M:WatiN.Core.Page.#ctor">
            <summary>
            Creates an uninitialized page instance.
            </summary>
        </member>
        <member name="M:WatiN.Core.Page.VerifyDocumentProperties(WatiN.Core.Document,WatiN.Core.Page.ErrorReporter)">
            <summary>
            Verifies that the document represents the correct page (has the correct Url, etc.).
            </summary>
            <remarks>
            <para>
            The default implementation calls <see cref="M:WatiN.Core.Page.VerifyDocumentUrl(System.String,WatiN.Core.Page.ErrorReporter)"/> to verify the <paramref name="document"/>'s Url.
            </para>
            <para>
            Subclasses can override this method to customize how document verification takes place.
            </para>
            </remarks>
            <param name="document">The document to verify, not null</param>
            <param name="errorReporter">The error reporter to invoke is the document's properties fail verification</param>
        </member>
        <member name="M:WatiN.Core.Page.VerifyDocumentUrl(System.String,WatiN.Core.Page.ErrorReporter)">
            <summary>
            Verifies that the document represents a Url that matches the page metadata.
            </summary>
            <remarks>
            <para>
            The default implementation uses information from the associated <see cref="T:WatiN.Core.PageMetadata"/>
            to validate the <paramref name="url"/>.
            </para>
            <para>
            Subclasses can override this method to customize how document Url verification takes place.
            </para>
            </remarks>
            <param name="url">The document url to verify, not null</param>
            <param name="errorReporter">The error reporter to invoke is the document's properties fail verification</param>
        </member>
        <member name="M:WatiN.Core.Page.VerifyDocumentIsSecure(System.String,WatiN.Core.Page.ErrorReporter)">
            <summary>
            Verifies that the document is secure if the page metadata says it should be.
            </summary>
            <remarks>
            <para>
            The default implementation uses information from the associated <see cref="T:WatiN.Core.PageMetadata"/>
            to validate the <paramref name="url"/>.
            </para>
            <para>
            Subclasses can override this method to customize how document Url verification takes place.
            </para>
            </remarks>
            <param name="url">The document url to verify, not null</param>
            <param name="errorReporter">The error reporter to invoke is the document's properties fail verification</param>
        </member>
        <member name="M:WatiN.Core.Page.CreatePage``1(WatiN.Core.Document)">
            <summary>
            Creates an initialized page object from a document.
            </summary>
            <typeparam name="TPage">The page type</typeparam>
            <param name="document">The document or frame represented by the page</param>
            <returns>The page object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="document"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Page.CreatePage(System.Type,WatiN.Core.Document)">
            <summary>
            Creates an initialized page object from a document.
            </summary>
            <param name="pageType">The page type</param>
            <param name="document">The document or frame represented by the page</param>
            <returns>The page object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="pageType"/> or <paramref name="document"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="pageType"/> is not a subclass of <see cref="T:WatiN.Core.Page"/>
            or if it does not have a default constructor</exception>
        </member>
        <member name="M:WatiN.Core.Page.ToString">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Page.GetAdapter``1">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Page.GetAttributeValueImpl(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Page.InitializeContents">
            <summary>
            Initializes the contents of the page object.
            </summary>
        </member>
        <member name="P:WatiN.Core.Page.Metadata">
            <summary>
            Gets declarative metadata about the page.
            </summary>
        </member>
        <member name="P:WatiN.Core.Page.Document">
            <summary>
            Gets the document or frame that holds the page content.
            </summary>
            <remarks>
            <para>
            This method calls <see cref="M:WatiN.Core.Page.VerifyDocumentProperties(WatiN.Core.Document,WatiN.Core.Page.ErrorReporter)"/> to ensure that
            the current document represents the correct page (has the correct Url, etc.).
            If this verification fails then an exception is thrown.
            </para>
            </remarks>
            <exception cref="T:WatiN.Core.Exceptions.WatiNException">Thrown if the page object does not have a reference
            to a document or if the document's properties fail validation.</exception>
        </member>
        <member name="P:WatiN.Core.Page.IsCurrentDocument">
            <summary>
            Returns true if the current document represents this page (has the correct Url, etc.).
            The actual check(s) is done by the protected method <see cref="M:WatiN.Core.Page.VerifyDocumentProperties(WatiN.Core.Document,WatiN.Core.Page.ErrorReporter)"/>
            </summary>
        </member>
        <member name="T:WatiN.Core.Page.ErrorReporter">
            <summary>
            Reports an error message.
            </summary>
            <param name="errorMessage">The error message to report.</param>
        </member>
        <member name="T:WatiN.Core.PageVerificationException">
            <summary>
            Will be thrown when the set expectations using the <see cref="T:WatiN.Core.PageAttribute"/> don't match.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEBrowser.NavigateTo(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEBrowser.NavigateToNoWait(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEBrowser.GoBack">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEBrowser.GoForward">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEBrowser.Reopen">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEBrowser.Refresh">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEBrowser.hWnd">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Constraints.OrConstraint">
            <summary>
            A combined constraint that is satisfied only when at least one of two other constraints is satisifed.
            </summary>
        </member>
        <member name="M:WatiN.Core.Constraints.OrConstraint.#ctor(WatiN.Core.Constraints.Constraint,WatiN.Core.Constraints.Constraint)">
            <summary>
            Creates a new OR constraint.
            </summary>
            <param name="first">The first constraint</param>
            <param name="second">The second constraint</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="first"/> or <paramref name="second"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.OrConstraint.WriteDescriptionTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.OrConstraint.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Logging.FileLogWriter">
            <summary>
            This logger class writes it's output to a file
            </summary>
            <example>
            The following code attaches the FileLogWriter to WatiN and writes a
            LogAction.
            <code>
            Logger.LogWriter = new FileLogWriter("LogFile.txt");
            Logger.LogAction("Attached FileLogWriter");
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Logging.FileLogWriter.#ctor(System.String)">
            <summary>
            Constructor method creating a text file for writing
            </summary>
            <param name="filename">full filepath to write the new log</param>
        </member>
        <member name="M:WatiN.Core.Logging.FileLogWriter.WriteLogLine(System.String)">
            <summary>
            private method to write the log line
            </summary>
            <param name="message">message to write</param>
        </member>
        <member name="P:WatiN.Core.Logging.FileLogWriter.IncludeTimestamp">
            <summary>
            flag to indicate inclusion of a timestamp (in "yyyy-mm-ddThh:nn:ss" format)
            </summary>
        </member>
        <member name="T:WatiN.Core.UtilityClasses.UtilityClass">
            <summary>
            Class with some utility methods to explore the HTML of a <see cref="T:WatiN.Core.Document"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.UtilityClass.#ctor">
            <summary>
            Prevent creating an instance of this class (contains only static members)
            </summary>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.UtilityClass.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether the specified <paramref name="value" /> is null or empty.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.UtilityClass.IsNotNullOrEmpty(System.String)">
            <summary>
            Determines whether the specified <paramref name="value" /> is null or empty.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.UtilityClass.StringFormat(System.String,System.Object[])">
            <summary>
            Formats the string in the same sense as string.Format but checks 
            if args is null before calling string.Format to prevent FormatException
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.UtilityClass.TurnStyleAttributeIntoProperty(System.String)">
            <summary>
            Turns the style attribute into property syntax.
            </summary>
            <example>
            "font-size" will turn into "fontSize"
            </example>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="T:WatiN.Core.ElementFactory">
            <summary>
            Creates typed wrappers of native elements.
            </summary>
        </member>
        <member name="M:WatiN.Core.ElementFactory.RegisterElementTypes(System.Reflection.Assembly)">
            <summary>
            Registers all element types within an assembly with WatiN.
            </summary>
            <remarks>
            <para>
            This method registers new element types with WatiN for elements that are not
            supported out of the box (eg. H1, etc...).  It ensures that the correct element type
            can be returned from find operations that do not specify the type natively.
            </para>
            <para>
            This method does nothing if a given type has already been registered.
            </para>
            </remarks>
            <param name="assembly">The assembly containing the <see cref="T:WatiN.Core.Element"/> subclasses to register</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="assembly"/> is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the any element type within the assembly
            is not correctly defined because it is missing a constructor or has no element tag attributes specified</exception>
        </member>
        <member name="M:WatiN.Core.ElementFactory.RegisterElementType(System.Type)">
            <summary>
            Registers an element type with WatiN.
            </summary>
            <remarks>
            <para>
            This method registers new element types with WatiN for elements that are not
            supported out of the box (eg. H1, etc...).  It ensures that the correct element type
            can be returned from find operations that do not specify the type natively.
            </para>
            <para>
            This method does nothing if the type has already been registered.
            </para>
            </remarks>
            <param name="elementType">The <see cref="T:WatiN.Core.Element"/> subclass to register</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="elementType"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="elementType"/> is not a subclass
            of <see cref="T:WatiN.Core.Element"/> or if it is abstract</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="elementType"/>
            is not correctly defined because it is missing a constructor or has no element tag attributes specified</exception>
        </member>
        <member name="M:WatiN.Core.ElementFactory.CreateElement(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            Creates a typed element wrapper for a given native element.
            </summary>
            <remarks>
            <para>
            The returned element will be a subclass of <see cref="T:WatiN.Core.Element"/> that is
            appropriate for element's tag.
            </para>
            </remarks>
            <param name="domContainer">The element's DOM container</param>
            <param name="nativeElement">The native element to wrap, or null if none</param>
            <returns>The typed element, or null if none</returns>
        </member>
        <member name="M:WatiN.Core.ElementFactory.CreateElement``1(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            Creates a typed element wrapper for a given native element and ensures it is of
            a particular type.
            </summary>
            <remarks>
            <para>
            The returned element will be a subclass of <see cref="T:WatiN.Core.Element"/> that is
            appropriate for element's tag.
            </para>
            </remarks>
            <param name="domContainer">The element's DOM container</param>
            <param name="nativeElement">The native element to wrap, or null if none</param>
            <returns>The typed element, or null if none</returns>
            <typeparam name="TElement">The element type</typeparam>
        </member>
        <member name="M:WatiN.Core.ElementFactory.CreateElement``1(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Creates a typed element wrapper for a given element finder and ensures it is of
            a particular type.
            </summary>
            <remarks>
            <para>
            The returned element will be a subclass of <see cref="T:WatiN.Core.Element"/> that is
            appropriate for element's tag.
            </para>
            </remarks>
            <param name="domContainer">The element's DOM container</param>
            <param name="elementFinder">The element finder to wrap, or null if none</param>
            <returns>The typed element, or null if none</returns>
            <typeparam name="TElement">The element type</typeparam>
        </member>
        <member name="M:WatiN.Core.ElementFactory.CreateUntypedElement(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            Creates an untyped element wrapper for a given native element.
            </summary>
            <remarks>
            <para>
            The returned element is just a generic element container.
            </para>
            </remarks>
            <param name="domContainer">The element's DOM container</param>
            <param name="nativeElement">The native element to wrap, or null if none</param>
            <returns>The untyped element, or null if none</returns>
        </member>
        <member name="M:WatiN.Core.ElementFactory.CreateUntypedElement(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Creates an untyped element wrapper for a given element finder.
            </summary>
            <remarks>
            <para>
            The returned element is just a generic element container.
            </para>
            </remarks>
            <param name="domContainer">The element's DOM container</param>
            <param name="elementFinder">The element finder to wrap, or null if none</param>
            <returns>The untyped element, or null if none</returns>
        </member>
        <member name="M:WatiN.Core.ElementFactory.GetElementTags(System.Type)">
            <summary>
            Gets the list of tags supported by the specified element type class.
            </summary>
            <param name="elementType">The element type</param>
            <returns>The list of supported tags</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="elementType"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="elementType"/> is not a valid element type</exception>
        </member>
        <member name="M:WatiN.Core.ElementFactory.GetElementTags``1">
            <summary>
            Gets the list of tags supported by the specified element type class.
            </summary>
            <returns>The list of supported tags</returns>
            <typeparam name="TElement">The element type</typeparam>
        </member>
        <member name="T:WatiN.Core.TableBody">
            <summary>
            This class provides specialized functionality for a HTML tbody element. 
            </summary>
            <remarks>
            <para>
            To find rows that contain particular cell values use the <see cref="M:WatiN.Core.Find.ByTextInColumn(System.String,System.Int32)"/>
            constraint as in the following example:
            </para>
            <code>
            // Find a table row with "some text" in the 3rd (!) column.
            TableBody tableBody = document.Table("my_table").OwnTableBodies[0];
            table.OwnTableRow(Find.ByTextInColumn("some text", 2));
            </code>
            <para>
            To find rows based on other properties of their contents use the <see cref="M:WatiN.Core.Find.ByExistenceOfRelatedElement``1(WatiN.Core.ElementSelector{``0})"/>
            constraint as in the following example:
            </para>
            <code>
            // Find a table row with "some text" in any of its columns.
            TableBody tableBody = document.Table("my_table").OwnTableBodies[0];
            table.OwnTableRow(Find.ByExistenceOfRelatedElement(row =&gt; row.OwnTableCell("some text")));
            </code>
            </remarks>
        </member>
        <member name="M:WatiN.Core.TableBody.OwnTableRow(System.String)">
            <summary>
            Finds a table row within the table body itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="elementId">The element id</param>
            <returns>The table row</returns>
        </member>
        <member name="M:WatiN.Core.TableBody.OwnTableRow(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a table row within the table body itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="elementId">The element id regular expression</param>
            <returns>The table row</returns>
        </member>
        <member name="M:WatiN.Core.TableBody.OwnTableRow(WatiN.Core.Constraints.Constraint)">
            <summary>
            Finds a table row within the table body itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="findBy">The constraint</param>
            <returns>The table row</returns>
        </member>
        <member name="M:WatiN.Core.TableBody.OwnTableRow(System.Predicate{WatiN.Core.TableRow})">
            <summary>
            Finds a table row within the table body itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="predicate">The predicate</param>
            <returns>The table row</returns>
        </member>
        <member name="P:WatiN.Core.TableBody.ContainingTable">
            <summary>
            Gets the table that contains this body.
            </summary>
        </member>
        <member name="P:WatiN.Core.TableBody.OwnTableRows">
            <summary>
            Gets a collection of all table rows within the table body itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <returns>The table row collection</returns>
        </member>
        <member name="P:WatiN.Core.TableBody.TableRowsDirectChildren">
            <summary>
            Gets the table rows that are direct children of this <see cref="T:WatiN.Core.TableBody"/>, leaving
            out table rows of any nested tables within this <see cref="T:WatiN.Core.TableBody"/>.
            </summary>
            <value>The table rows collection.</value>
        </member>
        <member name="T:WatiN.Core.Table">
            <summary>
            This class provides specialized functionality for a HTML table element.
            </summary>
            <remarks>
            <para>
            To find rows that contain particular cell values use the <see cref="M:WatiN.Core.Find.ByTextInColumn(System.String,System.Int32)"/>
            constraint as in the following example:
            </para>
            <code>
            // Find a table row with "some text" in the 3rd (!) column.
            Table table = document.Table("my_table");
            table.OwnTableRow(Find.ByTextInColumn("some text", 2));
            </code>
            <para>
            To find rows based on other properties of their contents use the <see cref="M:WatiN.Core.Find.ByExistenceOfRelatedElement``1(WatiN.Core.ElementSelector{``0})"/>
            constraint as in the following example:
            </para>
            <code>
            // Find a table row with "some text" in any of its columns.
            Table table = document.Table("my_table");
            table.OwnTableRow(Find.ByExistenceOfRelatedElement(row =&gt; row.OwnTableCell("some text")));
            </code>
            </remarks>
        </member>
        <member name="M:WatiN.Core.Table.OwnTableRow(System.String)">
            <summary>
            Finds a table row within the table itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="elementId">The element id</param>
            <returns>The table row</returns>
        </member>
        <member name="M:WatiN.Core.Table.OwnTableRow(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a table row within the table itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="elementId">The element id regular expression</param>
            <returns>The table row</returns>
        </member>
        <member name="M:WatiN.Core.Table.OwnTableRow(WatiN.Core.Constraints.Constraint)">
            <summary>
            Finds a table row within the table itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="findBy">The constraint</param>
            <returns>The table row</returns>
        </member>
        <member name="M:WatiN.Core.Table.OwnTableRow(System.Predicate{WatiN.Core.TableRow})">
            <summary>
            Finds a table row within the table itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="predicate">The predicate</param>
            <returns>The table row</returns>
        </member>
        <member name="M:WatiN.Core.Table.OwnTableBody(System.String)">
            <summary>
            Finds a table body within the table itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="elementId">The element id</param>
            <returns>The table body</returns>
        </member>
        <member name="M:WatiN.Core.Table.OwnTableBody(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a table body within the table itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="elementId">The element id regular expression</param>
            <returns>The table body</returns>
        </member>
        <member name="M:WatiN.Core.Table.OwnTableBody(WatiN.Core.Constraints.Constraint)">
            <summary>
            Finds a table body within the table itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="findBy">The constraint</param>
            <returns>The table body</returns>
        </member>
        <member name="M:WatiN.Core.Table.OwnTableBody(System.Predicate{WatiN.Core.TableBody})">
            <summary>
            Finds a table body within the table itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="predicate">The predicate</param>
            <returns>The table body</returns>
        </member>
        <member name="M:WatiN.Core.Table.FindRow(System.String,System.Int32)">
            <summary>
            Finds te first row that has an exact match with <paramref name="findText"/> in <paramref name="inColumn"/> 
            defined as a TD html element. If no match is found, null is returned. This method will look for rows in the
            first <see cref="T:WatiN.Core.TableBody"/> including rows in nested tables.
            </summary>
            <param name="findText">The text to find.</param>
            <param name="inColumn">Index of the column to find the text in.</param>
            <returns>The searched for <see cref="T:WatiN.Core.TableRow"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Table.FindRowInOwnTableRows(System.String,System.Int32)">
            <summary>
            Finds te first row that has an exact match with <paramref name="findText"/> in <paramref name="inColumn"/> 
            defined as a TD html element. If no match is found, null is returned. This method will look for rows in all
            <see cref="T:WatiN.Core.TableBody"/> elements but will ignore rows in nested tables.
            </summary>
            <param name="findText">The text to find.</param>
            <param name="inColumn">Index of the column to find the text in.</param>
            <returns>The searched for <see cref="T:WatiN.Core.TableRow"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Table.FindRow(System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Finds te first row that matches <paramref name="findTextRegex"/> in <paramref name="inColumn"/>
            defined as a TD html element. If no match is found, <c>null</c> is returned. This method will look for rows in the
            first <see cref="T:WatiN.Core.TableBody"/> including rows in nested tables.
            </summary>
            <param name="findTextRegex">The regular expression the cell text must match.</param>
            <param name="inColumn">Index of the column to find the text in.</param>
            <returns>The searched for <see cref="T:WatiN.Core.TableRow"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Table.FindRowInOwnTableRows(System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Finds te first row that matches <paramref name="findTextRegex"/> in <paramref name="inColumn"/>
            defined as a TD html element. If no match is found, <c>null</c> is returned. This method will look for rows in all
            <see cref="T:WatiN.Core.TableBody"/> elements but will ignore rows in nested tables.
            </summary>
            <param name="findTextRegex">The regular expression the cell text must match.</param>
            <param name="inColumn">Index of the column to find the text in.</param>
            <returns>The searched for <see cref="T:WatiN.Core.TableRow"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Table.FindRow(WatiN.Core.Comparers.Comparer{System.String},System.Int32)">
            <summary>
            Finds te first row that matches <paramref name="comparer"/> in <paramref name="inColumn"/> 
            defined as a TD html element. If no match is found, <c>null</c> is returned. This method will look for rows in the
            first <see cref="T:WatiN.Core.TableBody"/> including rows in nested tables.
            </summary>
            <param name="comparer">The comparer that the cell text must match.</param>
            <param name="inColumn">Index of the column to find the text in.</param>
            <returns>The searched for <see cref="T:WatiN.Core.TableRow"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Table.FindRowInOwnTableRows(WatiN.Core.Comparers.Comparer{System.String},System.Int32)">
            <summary>
            Finds te first row that matches <paramref name="comparer"/> in <paramref name="inColumn"/> 
            defined as a TD html element. If no match is found, <c>null</c> is returned. This method will look for rows in all
            <see cref="T:WatiN.Core.TableBody"/> elements but will ignore rows in nested tables.
            </summary>
            <param name="comparer">The comparer that the cell text must match.</param>
            <param name="inColumn">Index of the column to find the text in.</param>
            <returns>The searched for <see cref="T:WatiN.Core.TableRow"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Table.FindRow(System.Predicate{System.String},System.Int32)">
            <summary>
            Finds te first row that matches <paramref name="predicate"/> in <paramref name="inColumn"/> 
            defined as a TD html element. If no match is found, <c>null</c> is returned. This method will look for rows in the
            first <see cref="T:WatiN.Core.TableBody"/> including rows in nested tables.
            </summary>
            <param name="predicate">The predicate that the cell text must match.</param>
            <param name="inColumn">Index of the column to find the text in.</param>
            <returns>The searched for <see cref="T:WatiN.Core.TableRow"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Table.FindRowInOwnTableRows(System.Predicate{System.String},System.Int32)">
            <summary>
            Finds te first row that matches <paramref name="predicate"/> in <paramref name="inColumn"/> 
            defined as a TD html element. If no match is found, <c>null</c> is returned. This method will look for rows in all
            <see cref="T:WatiN.Core.TableBody"/> elements but will ignore rows in nested tables.
            </summary>
            <param name="predicate">The predicate that the cell text must match.</param>
            <param name="inColumn">Index of the column to find the text in.</param>
            <returns>The searched for <see cref="T:WatiN.Core.TableRow"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Table.FindRow(System.Predicate{WatiN.Core.TableCell},System.Int32)">
            <summary>
            Finds te first row that matches <paramref name="predicate"/> in <paramref name="inColumn"/> 
            defined as a TD html element. If no match is found, <c>null</c> is returned. This method will look for rows in the
            first <see cref="T:WatiN.Core.TableBody"/> including rows in nested tables.
            </summary>
            <param name="predicate">The predicate that the cell text must match.</param>
            <param name="inColumn">Index of the column to find the text in.</param>
            <returns>The searched for <see cref="T:WatiN.Core.TableRow"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Table.FindRowInOwnTableRows(System.Predicate{WatiN.Core.TableCell},System.Int32)">
            <summary>
            Finds te first row that matches <paramref name="predicate"/> in <paramref name="inColumn"/> 
            defined as a TD html element. If no match is found, <c>null</c> is returned.  This method will look for rows in all
            <see cref="T:WatiN.Core.TableBody"/> elements but will ignore rows in nested tables.
            </summary>
            <param name="predicate">The predicate that the cell text must match.</param>
            <param name="inColumn">Index of the column to find the text in.</param>
            <returns>The searched for <see cref="T:WatiN.Core.TableRow"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Table.DefaultToString">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Table.OwnTableRows">
            <summary>
            Gets a collection of all table rows within the table itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <returns>The table row collection</returns>
        </member>
        <member name="P:WatiN.Core.Table.OwnTableBodies">
            <summary>
            Gets a collection of all table bodies within the table itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <returns>The table body collection</returns>
        </member>
        <member name="T:WatiN.Core.HtmlDialogCollection">
            <summary>
            A typed collection of open <see cref="T:WatiN.Core.HtmlDialog"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.HtmlDialogCollection.CreateFilteredCollection(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.HtmlDialogCollection.GetComponents">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Exceptions.InvalidAttributeException">
            <summary>
            Thrown if the specified attribute isn't a valid attribute of the element. 
            For example doing <c>TextField.GetAttribute("src")</c> will throw 
            this exception.
            </summary>
        </member>
        <member name="T:WatiN.Core.ElementTag">
            <summary>
            This struct is mainly used by WatiN internally and defines 
            the supported html tags for inheritors of <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.ElementTag.#ctor(System.String)">
            <summary>
            Creates an element tag.
            </summary>
            <param name="tagName">The tag name, or null to represent any element</param>
        </member>
        <member name="M:WatiN.Core.ElementTag.#ctor(System.String,System.String)">
            <summary>
            Creates an element tag with an input tag type qualifier.
            </summary>
            <param name="tagName">The tag name, or null to represent any element</param>
            <param name="inputType">The input tag type qualifier, or null if none</param>
        </member>
        <member name="M:WatiN.Core.ElementTag.FromNativeElement(WatiN.Core.Native.INativeElement)">
            <summary>
            Creates an element tag object from a native element.
            </summary>
            <param name="nativeElement">The native element</param>
            <returns>The element tag object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nativeElement"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.ElementTag.IsMatch(WatiN.Core.Native.INativeElement)">
            <summary>
            Returns true if this tag object matches the specified element.
            </summary>
            <param name="nativeElement">The element to consider</param>
            <returns>True if the tag matches the specified element</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nativeElement"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.ElementTag.IsMatch(WatiN.Core.ElementTag)">
            <summary>
            Returns true if this tag object matches the specified tag.
            </summary>
            <param name="elementTag">The element tag to consider</param>
            <returns>True if the tag matches the specified element tag</returns>
        </member>
        <member name="M:WatiN.Core.ElementTag.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementTag.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementTag.Equals(WatiN.Core.ElementTag)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.ElementTag.ToString">
            <summary>
            Returns a human-readable string representation of the tag.
            </summary>
            <returns>The tag as a string</returns>
        </member>
        <member name="M:WatiN.Core.ElementTag.IsMatch(System.Collections.Generic.IEnumerable{WatiN.Core.ElementTag},WatiN.Core.Native.INativeElement)">
            <summary>
            Returns true if any tag object in the list matches the specified element.
            </summary>
            <param name="tags">The tags against which to match</param>
            <param name="nativeElement">The element to consider</param>
            <returns>True if the tag matches the specified element</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="tags"/> or <paramref name="nativeElement"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.ElementTag.IsMatch(System.Collections.Generic.IEnumerable{WatiN.Core.ElementTag},WatiN.Core.ElementTag)">
            <summary>
            Returns true if any tag object in the list matches the specified tag.
            </summary>
            <param name="tags">The tags against which to match</param>
            <param name="elementTag">The element tag to consider</param>
            <returns>True if the tag matches the specified element tag</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="tags"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.ElementTag.ElementTagsToString(System.Collections.Generic.IList{WatiN.Core.ElementTag})">
            <summary>
            Converts a list of tags to a human-readable string.
            </summary>
            <param name="elementTags">The list of element tags</param>
            <returns>The element tags as a string</returns>
        </member>
        <member name="P:WatiN.Core.ElementTag.TagName">
            <summary>
            Gets the tag name, or null to represent any element.
            </summary>
        </member>
        <member name="P:WatiN.Core.ElementTag.InputType">
            <summary>
            Gets the input tag type qualifier, or null if none.
            </summary>
        </member>
        <member name="P:WatiN.Core.ElementTag.IsInputElement">
            <summary>
            Returns true if the tag represents an input element.
            </summary>
        </member>
        <member name="P:WatiN.Core.ElementTag.IsAny">
            <summary>
            Returns true if the tag matches any element.
            </summary>
        </member>
        <member name="P:WatiN.Core.ElementTag.Any">
            <summary>
            Returns a special tag object that can match any element.
            </summary>
        </member>
        <member name="T:WatiN.Core.Style">
            <summary>
            Represent the CSS style rule.
            </summary>
        </member>
        <member name="M:WatiN.Core.Style.#ctor(WatiN.Core.Native.INativeElement)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Style"/> class.
            </summary>
            <param name="nativeElement">The underlying <see cref="T:WatiN.Core.Native.INativeElement"/>.</param>
        </member>
        <member name="M:WatiN.Core.Style.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            The value of <see cref="P:WatiN.Core.Style.CssText"/>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Style.GetAttributeValue(System.String)">
            <summary>
            This methode can be used if the attribute isn't available as a property of
            of this <see cref="T:WatiN.Core.Style"/> class.
            </summary>
            <param name="attributeName">The attribute name. This could be different then named in
            the HTML. It should be the name of the property exposed by IE on it's style object.</param>
            <returns>The value of the attribute if available; otherwise <c>null</c> is returned.</returns>
        </member>
        <member name="P:WatiN.Core.Style.Color">
            <summary>
            Retrieves the color of the text of the element.
            Visit http://msdn.microsoft.com/workshop/author/dhtml/reference/colors/colors_name.asp
            for a full list of supported RGB colors and their names.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:WatiN.Core.Style.BackgroundColor">
            <summary>
            Retrieves the color behind the content of the element.
            Visit http://msdn.microsoft.com/workshop/author/dhtml/reference/colors/colors_name.asp
            for a full list of supported RGB colors and their names.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:WatiN.Core.Style.FontFamily">
            <summary>
            Retrieves the name of the font used for text in the element.
            </summary>
            <value>The font family.</value>
        </member>
        <member name="P:WatiN.Core.Style.FontSize">
            <summary>
            Retrieves a value that indicates the font size used for text in the element. 
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:WatiN.Core.Style.FontStyle">
            <summary>
            Retrieves the font style of the element as italic, normal, or oblique.
            </summary>
            <value>The fount style.</value>
        </member>
        <member name="P:WatiN.Core.Style.Height">
            <summary>
            Retrieves the height of the element.
            </summary>
            <value>The height of the element.</value>
        </member>
        <member name="P:WatiN.Core.Style.Display">
            <summary>
            Retrieves wheter the object is rendered.
            </summary>
            <remarks>For a complete list of the values visit 
            http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/display.asp .</remarks>
            <value>The display mode.</value>
        </member>
        <member name="P:WatiN.Core.Style.CssText">
            <summary>
            Retrieves the CSS text.
            </summary>
            <value>The CSS text.</value>
        </member>
        <member name="T:WatiN.Core.Logging.DebugLogWriter">
            <summary>
            This logger class writes it's output to the debug window.
            </summary>
            <example>
            The following code attaches the DebugLogWriter to WatiN and writes a
            LogAction. Open de output window in your debugger to see the result.
            <code>
            Logger.LogWriter = new DebugLogWriter;
            Logger.LogAction("Attached DebugLogWriter");
            </code>
            </example>
        </member>
        <member name="T:WatiN.Core.Exceptions.BrowserNotFoundException">
            <summary>
            Thrown if the searched for Browser type can't be found.
            </summary>
        </member>
        <member name="T:WatiN.Core.Exceptions.HtmlDialogNotFoundException">
            <summary>
            Thrown if the searched for HtmlDialog can't be found.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.AlertAndConfirmDialogHandler.Pop">
            <summary>
            Pops the most recent message from a queue of displayed alert and confirm windows.
            Use this method to get the displayed message.
            </summary>
            <returns>The displayed message.</returns>
            <exception cref="T:WatiN.Core.Exceptions.MissingAlertException">if no alerts are present</exception>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.AlertAndConfirmDialogHandler.Peek">
            <summary>
            Peeks at the most recent message from a queue of displayed alert and confirm windows, but does not remove it.
            Use this method to look at the first displayed message but not to remove it.
            </summary>
            <returns>The first displayed message.</returns>
            <exception cref="T:WatiN.Core.Exceptions.MissingAlertException">if no alerts are present</exception>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.AlertAndConfirmDialogHandler.Clear">
            <summary>
            Clears all the messages from the queue of displayed alert and confirm windows.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.AlertAndConfirmDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            See if the dialog has a static control with a controlID 
            of 0xFFFF. This is unique for alert and confirm dialogboxes.
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.AlertAndConfirmDialogHandler.Count">
            <summary>
            Gets the count of the messages in the queue of displayed alert and confirm windows.
            </summary>
            <value>The count of the alert and confirm messages in the queue.</value>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.AlertAndConfirmDialogHandler.Alerts">
            <summary>
            Gets the alert and confirm messages in the queue of displayed alert and confirm windows.
            </summary>
            <value>The alert and confirm messages in the queue.</value>
        </member>
        <member name="T:WatiN.Core.Native.InternetExplorer.WindowsEnumerator">
            <summary> 
            Enumerate top-level and child windows 
            </summary> 
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.WindowsEnumerator.GetTopLevelWindows">
            <summary> 
            Get all top-level window information 
            </summary> 
            <returns>List of window information objects</returns> 
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.WindowsEnumerator.GetChildWindows(System.IntPtr)">
            <summary> 
            Get all child windows for the specific windows handle (hwnd). 
            </summary> 
            <returns>List of child windows for parent window</returns> 
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElementCollection.GetElements">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElementCollection.GetElementsByTag(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElementCollection.GetElementsById(System.String)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Constraints.ComponentConstraint">
            <summary>
            A component-based constraint using a comparer.
            </summary>
        </member>
        <member name="M:WatiN.Core.Constraints.ComponentConstraint.#ctor(WatiN.Core.Comparers.Comparer{WatiN.Core.Component})">
            <summary>
            Creates an component constraint.
            </summary>
            <param name="comparer">The comparer</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="comparer"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.ComponentConstraint.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.ComponentConstraint.WriteDescriptionTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Constraints.ComponentConstraint.Comparer">
            <summary>
            Gets the component comparer.
            </summary>
        </member>
        <member name="T:WatiN.Core.Constraints.AnyConstraint">
            <summary>
            A constraint that matches anything.
            </summary>
        </member>
        <member name="M:WatiN.Core.Constraints.AnyConstraint.WriteDescriptionTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.AnyConstraint.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Constraints.AnyConstraint.Instance">
            <summary>
            Gets the singleton instance of the Any constraint.
            </summary>
        </member>
        <member name="T:WatiN.Core.Settings">
            <summary>
            This class is used to define the default settings used by WatiN. 
            Use <c>Settings.Instance</c> to access or change these settings.
            </summary>
            <example>
            The following example shows you how to change the default time out which is used
            by the AttachtToIE(findBy) method to attach to an already existing Internet Explorer window 
            or to an Internet Explorer window that will show up within 60 seconds after calling
            the AttachToIE(findBy) method.
            <code>
            public void AttachToIEExample()
            {
              // Change de default time out from 30 to 60 seconds.
              Settings.AttachToBrowserTimeOut = 60;
            
              // Start Internet Explorer manually and type 
              // http://watin.sourceforge.net in the navigation bar.
            
              // Now Attach to an existing Internet Explorer window
              IE ie = IE.AttachToIE(Find.ByTitle("WatiN");
            
              System.Diagnostics.Debug.WriteLine(ie.Url);
            }
            </code>
            When you frequently want to change these settings you could also create
            two or more instances of the Settings class, set the desired defaults 
            and set the settings class to Settings.
            <code>
            public void ChangeSettings()
            {
              Settings.Instance = LongTimeOut();
              
              // Do something here that requires more time then the defaults
            
              Settings.Instance = ShortTimeOut();
            
              // Do something here if you want a short time out to get
              // the exception quickly incase the item isn't found.  
            }
            
            public Settings LongTimeOut()
            {
              Settings settings = new Settings();
            
              settings.AttachToBrowserTimeOut = 60;
              settings.WaitUntilExistsTimeOut = 60;
              settings.WaitForCompleteTimeOut = 60;
            
              return settings;
            }
            
            public Settings ShortTimeOut()
            {
              Settings settings = new Settings();
            
              settings.AttachToBrowserTimeOut = 5;
              settings.WaitUntilExistsTimeOut = 5;
              settings.WaitForCompleteTimeOut = 5;
            
              return settings;
            }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Settings.Reset">
            <summary>
            Resets this instance to the initial defaults.
            </summary>
        </member>
        <member name="M:WatiN.Core.Settings.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WatiN.Core.Settings.AttachToBrowserTimeOut">
            <summary>
            Get or set the default time out used when calling IE ie = IE.AttachToIE(findBy).
            The default value is 30 seconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.WaitUntilExistsTimeOut">
            <summary>
            Get or set the default time out used when calling Element.WaitUntilExists().
            The default value is 30 seconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.WaitForCompleteTimeOut">
            <summary>
            Get or set the default time out used when calling ie.WaitForComplete().
            The default value is 30 seconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.SleepTime">
            <summary>
            Get or set the default sleep time before WatiN starts checking if a page is loaded
            in IE. This setting is not applicable to FireFox.
            The default value is 30 milliseconds. Setting this to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.HighLightElement">
            <summary>
            Turn highlighting of elements by WatiN on (<c>true</c>) or off (<c>false</c>).
            Highlighting of an element is done when WatiN fires an event on an
            element or executes a methode (like TypeText).
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.HighLightColor">
            <summary>
            Set or get the color to highlight elements. Will be used if
            HighLightElement is set to <c>true</c>.
            Visit http://msdn.microsoft.com/workshop/author/dhtml/reference/colors/colors_name.asp
            for a full list of supported RGB colors and their names.
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.AutoCloseDialogs">
            <summary>
            Turn auto closing of dialogs on (<c>true</c>) or off (<c>false</c>).
            You need to set this value before creating or attaching to any 
            Internet Explorer to have effect.
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.AutoStartDialogWatcher">
            <summary>
            Gets or sets a value indicating whether to auto start the dialog watcher at all.
            This value is evaluated everytime a new IE instance is created
            </summary>
            <value>
            	<c>true</c> if dialog watcher should be started when a new IE instance is created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.Settings.AutoMoveMousePointerToTopLeft">
            <summary>
            Gets or sets a value indicating whether to move the cursor to the top left
            of the screen everytime a new IE instance is created.
            </summary>
            <value>
            	<c>true</c> when mouse should be moved to top left; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.Settings.MakeNewIeInstanceVisible">
            <summary>
            Gets or sets a value indicating whether to make a new <see cref="T:WatiN.Core.IE"/> instance visible.
            </summary>
            <value>
            	<c>true</c> if you want to make a new <see cref="T:WatiN.Core.IE"/> instance visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.Settings.FindByDefaultFactory">
            <summary>
            Gets or sets a factory to find element by their default characteristics.
            </summary>
            <remarks>
            The default value is a <see cref="P:WatiN.Core.Settings.FindByDefaultFactory"/> which finds elements
            by id.
            </remarks>
        </member>
        <member name="P:WatiN.Core.Settings.MakeNewIe8InstanceNoMerge">
            <summary>
            Gets or sets a value indicating whether to make a new <see cref="T:WatiN.Core.IE"/> instance without session cookie merging.
            </summary>
            <value>
            	<c>true</c> if you want to make a new <see cref="T:WatiN.Core.IE"/> instance with cookie merging; otherwise, <c>false</c>.
            </value>
            <remarks>read the section on NoMerge at http://blogs.msdn.com/ie/archive/2008/07/28/ie8-and-reliability.aspx</remarks>
        </member>
        <member name="P:WatiN.Core.Settings.CloseExistingFireFoxInstances">
            <summary>
            Gets or sets a value indicating whether existing FireFox instances will be closed before creating a new instance.
            </summary>
            <value>
            	<c>true</c> if existing FireFox instances need to be closed otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WatiN.Core.NativeElementFinder">
            <summary>
            Finds elements within native element containers.
            </summary>
        </member>
        <member name="M:WatiN.Core.NativeElementFinder.#ctor(WatiN.Core.NativeElementFinder.NativeElementCollectionFactory,WatiN.Core.DomContainer,System.Collections.Generic.IList{WatiN.Core.ElementTag},WatiN.Core.Constraints.Constraint)">
            <summary>
            Creates an element finder.
            </summary>
            <param name="domContainer">The DOM container</param>
            <param name="factory">The factory to get the element(s) to search in</param>
            <param name="elementTags">The element tags considered by the finder, or null if all tags considered</param>
            <param name="constraint">The constraint used by the finder to filter elements, or null if no additional constraint</param>
        </member>
        <member name="M:WatiN.Core.NativeElementFinder.FilterImpl(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementFinder.FindAllImpl">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementFinder.GetElementIdHint(WatiN.Core.Constraints.Constraint)">
            <summary>
            If the constraint can only match on element with a particular id, returns the id,
            otherwise returns null.
            </summary>
            <returns>The id or null if the constraint could match elements with no particular id</returns>
        </member>
        <member name="T:WatiN.Core.Interfaces.IFindByDefaultFactory">
            <summary>
            Used to find elements by a default characteristic such as by id or by
            some other application-specific rule.
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IFindByDefaultFactory.ByDefault(System.String)">
            <summary>
            Gets a constraint to find an element by matching its default characteristics
            against the specified string.
            </summary>
            <param name="value">The string to match against</param>
            <returns>A constraint</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IFindByDefaultFactory.ByDefault(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets a constraint to find an element by matching its default characteristics
            against the specified regular expression.
            </summary>
            <param name="value">The regular expression to match against</param>
            <returns>A constraint</returns>
        </member>
        <member name="T:WatiN.Core.UtilityClasses.LazyList`1">
            <summary>
            A lazily populated list that fills itself up gradually from an enumeration on demand.
            </summary>
            <typeparam name="T">The type of element in the list</typeparam>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.LazyList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a lazily populated list from an enumeration.
            </summary>
            <param name="source">The enumeration of elements from which to populate the list lazily</param>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.LazyList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.UtilityClasses.LazyList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.UtilityClasses.LazyList`1.Count">
            <summary>
            Gets the total number of elements in the list.
            </summary>
        </member>
        <member name="P:WatiN.Core.UtilityClasses.LazyList`1.Item(System.Int32)">
            <summary>
            Gets the element with the specified index in the list.
            </summary>
            <param name="index">The zero-based index</param>
            <returns>The element</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if <paramref name="index"/> is
            out of range</exception>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.#ctor(WatiN.Core.DialogHandlers.FileDownloadOptionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.FileDownloadHandler"/> class.
            Use this constructor if you want to Run, Open or Cancel the download.
            </summary>
            <param name="option">The option to choose on the File Download dialog.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.FileDownloadHandler"/> class.
            Use this contructor if you want to download and save a file.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.HandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Handles the dialogs to download (and save) a file
            Mainly used internally by WatiN.
            </summary>
            <param name="window">The window.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.IsFileDownloadDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines whether the specified window is a file download dialog by
            checking the style property of the window. It should match
            <c>window.StyleInHex == "94C80AC4"</c>
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if the specified window is a file download dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.IsDownloadProgressDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines whether the specified window is a download progress dialog by
            checking the style property of the window. It should match
            <c>(window.StyleInHex == "9CCA0BC4") || (window.StyleInHex == "94CA0BC4")</c>
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if the specified window is a download progress dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.IsFileSaveDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines whether the specified window is a file save as dialog by
            checking the style property of the window. It should match
            <c>(window.StyleInHex == "96CC20C4") || (window.StyleInHex == "96CC02C4")</c>
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if the specified window is a file save as dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.Exists(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines if a dialog still exists by checking the the existance of the 
            window.Hwnd and checking if the window is visible.
            </summary>
            <param name="dialog">The dialog.</param>
            <returns><c>true</c> if exists and visible, otherwise <c>false</c></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.ExistsOrNull(WatiN.Core.Native.Windows.Window)">
            <summary>
            Checks if window is null or <see cref="M:WatiN.Core.DialogHandlers.FileDownloadHandler.Exists(WatiN.Core.Native.Windows.Window)"/>.
            </summary>
            <param name="dialog">The dialog.</param>
            <returns><c>true</c> if null or exists, otherwise <c>false</c></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.WaitUntilFileDownloadDialogIsHandled(System.Int32)">
            <summary>
            Wait until the save/open/run dialog opens.
            This exists because some web servers are slower to start a file than others.
            </summary>
            <param name="waitDurationInSeconds">duration in seconds to wait</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.WaitUntilDownloadCompleted(System.Int32)">
            <summary>
            Wait until the download progress window does not exist any more
            </summary>
            <param name="waitDurationInSeconds">duration in seconds to wait</param>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.FileDownloadHandler.HasHandledFileDownloadDialog">
            <summary>
            Gets a value indicating whether this instance has handled a file download dialog.
            </summary>
            <value>
            	<c>true</c> if this instance has handled a file download dialog; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.FileDownloadHandler.SaveAsFilename">
            <summary>
            Gets the full save as filename used when the downloaded file will be saved to disk.
            </summary>
            <value>The save as filename.</value>
        </member>
        <member name="T:WatiN.Core.Comparers.BoolComparer">
            <summary>
            Class that supports comparing a <see cref="T:System.Boolean"/> instance with a string value.
            </summary>
        </member>
        <member name="M:WatiN.Core.Comparers.BoolComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Comparers.BoolComparer"/> class.
            </summary>
            <param name="referenceValue">If the value is true, then will compare case-insensitively with "true"
            otherwise will compare case-insensitively with "false"</param>
        </member>
        <member name="T:WatiN.Core.Native.Chrome.ChromeDocument">
            <summary>
            The chrome document class, giving access to common document elements.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.Chrome.ChromeDocument.#ctor(WatiN.Core.Native.ClientPortBase)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Native.Chrome.ChromeDocument"/> class.
            </summary>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="M:WatiN.Core.Native.Chrome.ChromeDocument.RunScript(System.String,System.String)">
            <summary>
            Runs the script.
            </summary>
            <param name="scriptCode">
            The script code to run.
            </param>
            <param name="language">
            The language the script was written in.
            </param>
        </member>
        <member name="M:WatiN.Core.Native.Chrome.ChromeDocument.GetPropertyValue(System.String)">
            <summary>
            Gets the value for the corresponding <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">
            Name of the property.
            </param>
            <returns>
            The value for the corresponding <paramref name="propertyName"/>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Native.Chrome.ChromeDocument.GetTextBounds(System.String)">
            <summary>
            Gets the bounds of all matching text substrings within the document.
            </summary>
            <param name="text">
            The text to find
            </param>
            <returns>
            The text bounds in screen coordinates
            </returns>
        </member>
        <member name="P:WatiN.Core.Native.Chrome.ChromeDocument.ClientPort">
            <summary>
            Gets the FireFox client port.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.Chrome.ChromeDocument.AllElements">
            <summary>
            Gets the collection of all elements in the document.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.Chrome.ChromeDocument.ContainingFrameElement">
            <summary>
            Gets the containing frame element, or null if none.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.Chrome.ChromeDocument.Body">
            <summary>
            Gets the body element for the current docuemnt.
            </summary>
            <value>The body element.</value>
        </member>
        <member name="P:WatiN.Core.Native.Chrome.ChromeDocument.Url">
            <summary>
            Gets the URL for the current document.
            </summary>
            <value>The URL for the current document.</value>
        </member>
        <member name="P:WatiN.Core.Native.Chrome.ChromeDocument.Title">
            <summary>
            Gets the title of the current docuemnt.
            </summary>
            <value>The title of the current document.</value>
        </member>
        <member name="P:WatiN.Core.Native.Chrome.ChromeDocument.ActiveElement">
            <summary>
            Gets the active element.
            </summary>
            <value>The active element.</value>
        </member>
        <member name="P:WatiN.Core.Native.Chrome.ChromeDocument.JavaScriptVariableName">
            <summary>
            Gets the name of the java script variable.
            </summary>
            <value>The name of the java script variable.</value>
        </member>
        <member name="P:WatiN.Core.Native.Chrome.ChromeDocument.Frames">
            <summary>
            Gets the list of frames.
            </summary>
            <value>The list of frames of the current document.</value>
        </member>
        <member name="P:WatiN.Core.Native.Chrome.ChromeDocument.DocumentReference">
            <summary>
            Gets or sets the document reference.
            </summary>
            <value>The document reference.</value>
        </member>
        <member name="T:WatiN.Core.AreaCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Area"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.AreaCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.AreaCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.AreaCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Constraints.AndConstraint">
            <summary>
            A combined constraint that is satisfied only when two other constraints are both satisifed.
            </summary>
        </member>
        <member name="M:WatiN.Core.Constraints.AndConstraint.#ctor(WatiN.Core.Constraints.Constraint,WatiN.Core.Constraints.Constraint)">
            <summary>
            Creates a new AND constraint.
            </summary>
            <param name="first">The first constraint</param>
            <param name="second">The second constraint</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="first"/> or <paramref name="second"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.AndConstraint.WriteDescriptionTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.AndConstraint.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Constraints.AndConstraint.First">
            <summary>
            Gets the first constraint that will be evaluated.
            </summary>
            <value>The first <see cref="T:WatiN.Core.Constraints.Constraint"/>.</value>
        </member>
        <member name="P:WatiN.Core.Constraints.AndConstraint.Second">
            <summary>
            Gets the second constraint that will be evaluated.
            </summary>
            <value>The second <see cref="T:WatiN.Core.Constraints.Constraint"/>.</value>
        </member>
        <member name="T:WatiN.Core.List">
            <summary>
            This class provides specialized functionality for a HTML ul and ol elements.
            </summary>
        </member>
        <member name="M:WatiN.Core.List.#ctor(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.List"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="nativeElement">The HTML ul or ol element.</param>
        </member>
        <member name="M:WatiN.Core.List.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.List"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The HTML ul or ol element.</param>
        </member>
        <member name="M:WatiN.Core.List.OwnListItem(System.String)">
            <summary>
            Finds a list item within the list itself (excluding content from any lists that
            might be nested within it).
            </summary>
            <param name="elementId">The element id</param>
            <returns>The list item</returns>
        </member>
        <member name="M:WatiN.Core.List.OwnListItem(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a list item within the list itself (excluding content from any lists that
            might be nested within it).
            </summary>
            <param name="elementId">The element id regular expression</param>
            <returns>The list item</returns>
        </member>
        <member name="M:WatiN.Core.List.OwnListItem(WatiN.Core.Constraints.Constraint)">
            <summary>
            Finds a list item within the list itself (excluding content from any lists that
            might be nested within it).
            </summary>
            <param name="findBy">The constraint</param>
            <returns>The list item</returns>
        </member>
        <member name="M:WatiN.Core.List.OwnListItem(System.Predicate{WatiN.Core.ListItem})">
            <summary>
            Finds a list item within the list itself (excluding content from any lists that
            might be nested within it).
            </summary>
            <param name="predicate">The predicate</param>
            <returns>The list item</returns>
        </member>
        <member name="P:WatiN.Core.List.OwnListItems">
            <summary>
            Gets a collection of all table rows within the table itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <returns>The table row collection</returns>
        </member>
        <member name="T:WatiN.Core.UtilityClasses.TryFuncUntilTimeOut">
            <summary>
            This class provides an easy way of retrying an action for a given number of seconds.
            <example>
            The following code shows a basic usage:
            <code>
            var action = new TryFuncUntilTimeOut(5);
            var result = action.Try(() => false == true);
            </code>
            </example>
            </summary>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.TryFuncUntilTimeOut.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.UtilityClasses.TryFuncUntilTimeOut"/> class.
            </summary>
            <param name="timeout">The timeout in seconds.</param>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.TryFuncUntilTimeOut.#ctor(WatiN.Core.UtilityClasses.SimpleTimer)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.UtilityClasses.TryFuncUntilTimeOut"/> class.
            </summary>
            <param name="timer">The timer instance which will be used when executing <see cref="M:WatiN.Core.UtilityClasses.TryFuncUntilTimeOut.Try``1(WatiN.Core.UtilityClasses.DoFunc{``0})"/>.</param>
        </member>
        <member name="M:WatiN.Core.UtilityClasses.TryFuncUntilTimeOut.Try``1(WatiN.Core.UtilityClasses.DoFunc{``0})">
            <summary>
            Tries the specified action until the result of the action is not equal to <c>default{T}</c>
            or the time out is reached.
            </summary>
            <typeparam name="T">The result type of the action</typeparam>
            <param name="func">The action.</param>
            <returns>The result of the action of <c>default{T}</c> when time out occured.</returns>
        </member>
        <member name="P:WatiN.Core.UtilityClasses.TryFuncUntilTimeOut.SleepTime">
            <summary>
            Gets or sets the maximum interval between retries of the action.
            </summary>
        </member>
        <member name="P:WatiN.Core.UtilityClasses.TryFuncUntilTimeOut.Timeout">
            <summary>
            Returns the time out period.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:WatiN.Core.UtilityClasses.TryFuncUntilTimeOut.LastException">
            <summary>
            Returns the last exception (thrown by the action) before the time out occured.
            </summary>
            <value>The last exception.</value>
        </member>
        <member name="P:WatiN.Core.UtilityClasses.TryFuncUntilTimeOut.DidTimeOut">
            <summary>
            Returns a value indicating whether a time out occured.
            </summary>
            <value><c>true</c> if did time out; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.UtilityClasses.TryFuncUntilTimeOut.ExceptionMessage">
            <summary>
            Gets or sets the exception message. If set a <see cref="T:System.TimeoutException"/> will be thrown
            if the action did time out.
            </summary>
            <value>The exception message.</value>
        </member>
        <member name="T:WatiN.Core.Option">
            <summary>
            This class provides specialized functionality for a HTML option element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Option.#ctor(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Option"/> class.
            </summary>
            <param name="domContainer">The domContainer.</param>
            <param name="element">The option element.</param>
        </member>
        <member name="M:WatiN.Core.Option.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Option"/> class.
            </summary>
            <param name="domContainer">The domContainer.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.Option.Clear">
            <summary>
            De-selects this option in the selectlist (if selected),
            fires the "onchange" event on the selectlist and waits for it
            to complete.
            </summary>
        </member>
        <member name="M:WatiN.Core.Option.ClearNoWait">
            <summary>
            De-selects this option in the selectlist (if selected),
            fires the "onchange" event on the selectlist and does not wait for it
            to complete.
            </summary>
        </member>
        <member name="M:WatiN.Core.Option.Select">
            <summary>
            Selects this option in the selectlist (if not selected),
            fires the "onchange" event on the selectlist and waits for it
            to complete.
            </summary>
        </member>
        <member name="M:WatiN.Core.Option.SelectNoWait">
            <summary>
            Selects this option in the selectlist (if not selected),
            fires the "onchange" event on the selectlist and does not wait for it
            to complete.
            </summary>
        </member>
        <member name="M:WatiN.Core.Option.DefaultToString">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Option.Value">
            <summary>
            Returns the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:WatiN.Core.Option.Selected">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Option"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Option.Index">
            <summary>
            Returns the index of this <see cref="T:WatiN.Core.Option"/> in the <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:WatiN.Core.Option.DefaultSelected">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Option"/> is selected by default.
            </summary>
            <value><c>true</c> if selected by default; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Option.ParentSelectList">
            <summary>
            Gets the parent <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
            <value>The parent <see cref="T:WatiN.Core.SelectList"/>.</value>
        </member>
        <member name="T:WatiN.Core.Logging.ConsoleLogWriter">
            <summary>
            This logger class writes it's output to the console.
            </summary>
            <example>
            The following code attaches the ConsoleLogWriter to WatiN and writes a
            LogAction.
            <code>
            Logger.LogWriter = new ConsoleLogWriter;
            Logger.LogAction("Attached ConsoleLogWriter");
            </code>
            </example>
        </member>
        <member name="T:WatiN.Core.ImageCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Image"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.ImageCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ImageCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.ImageCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.FindByDefaultFactory">
            <summary>
            A find by default factory that finds elements by id.
            </summary>
        </member>
        <member name="M:WatiN.Core.FindByDefaultFactory.ByDefault(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.FindByDefaultFactory.ByDefault(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Exceptions.ElementReadOnlyException">
            <summary>
            Thrown if an element is readonly and the current action (like TextField.TypeText) a
            is not allowed.
            </summary>
        </member>
        <member name="T:WatiN.Core.CheckBox">
            <summary>
            This class provides specialized functionality for a HTML input element of type 
            checkbox.
            </summary>
        </member>
        <member name="M:WatiN.Core.CheckBox.#ctor(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.CheckBox"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The domContainer.</param>
            <param name="inputElement">The input element.</param>
        </member>
        <member name="M:WatiN.Core.CheckBox.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.CheckBox"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The domContainer.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="T:WatiN.Core.Native.Mozilla.FireFoxClientPort">
            <summary>
            The firefox client port used to communicate with the remote automation server jssh.
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.Mozilla.FireFoxClientPort.WindowVariableName">
            <summary>
            Name of the javascript variable that references the DOM:window object.
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.Mozilla.FireFoxClientPort.GetChildElementsFunctionName">
            <summary>
            Name of the javascript function to retrieve only child elements (skip text nodes).
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.Mozilla.FireFoxClientPort._disposed">
            <summary>
            <c>true</c> if the <see cref="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.Dispose"/> method has been called to release resources.
            </summary>
        </member>
        <member name="F:WatiN.Core.Native.Mozilla.FireFoxClientPort._telnetSocket">
            <summary>
            Underlying socket used to create a <see cref="T:System.Net.Sockets.NetworkStream"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WatiN.Core.Native.Mozilla.FireFoxClientPort"/> class. 
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:WatiN.Core.FireFox"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.Connect(System.String)">
            <summary>
            </summary>
            <param name="url">
            The url.
            </param>
            <exception cref="T:WatiN.Core.Native.Mozilla.FireFoxException">
            </exception>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.ConnectToExisting">
            <summary>
            </summary>
            <exception cref="T:WatiN.Core.Native.Mozilla.FireFoxException">
            </exception>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.InitializeDocument">
            <summary>
            Reloads the javascript variables that are scoped at the document level.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.SendAndRead(System.String,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Writes the specified data to the jssh server.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="resultExpected">
            </param>
            <param name="checkForErrors">
            </param>
            <param name="args">
            </param>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.CheckForError(System.String)">
            <summary>
            </summary>
            <param name="response">
            The response.
            </param>
            <exception cref="T:WatiN.Core.Native.Mozilla.FireFoxException">
            </exception>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.CleanTelnetResponse(System.String)">
            <summary>
            Cleans the response.
            </summary>
            <param name="response">
            The response.
            </param>
            <returns>
            Response from FireFox with out any of the telnet UI characters
            </returns>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.DefineDefaultJSVariablesForWindow(System.Int32)">
            <summary>
            Defines the default JS variables used to automate this FireFox window.
            </summary>
            <param name="windowIndex">Index of the window.</param>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.ReadResponse(System.Boolean,System.Boolean)">
            <summary>
            Reads the response from the jssh server.
            </summary>
            <param name="resultExpected">
            The result Expected.
            </param>
            <param name="checkForErrors">
            The check For Errors.
            </param>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.SendCommand(System.String)">
            <summary>
            Sends a command to the FireFox remote server.
            </summary>
            <param name="data">
            The data to send.
            </param>
            <exception cref="T:WatiN.Core.Native.Mozilla.FireFoxException">When not connected.</exception>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.CloseExistingFireFoxInstances">
            <summary>
            </summary>
            <exception cref="T:WatiN.Core.Native.Mozilla.FireFoxException">
            </exception>
        </member>
        <member name="M:WatiN.Core.Native.Mozilla.FireFoxClientPort.WaitForConnectionEstablished">
            <summary>
            Writes a line to the jssh server.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FireFoxClientPort.Connected">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Native.Mozilla.FireFoxClientPort"/> is connected.
            </summary>
            <value><c>true</c> if connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FireFoxClientPort.DocumentVariableName">
            <summary>
            Gets the name of the javascript variable that references the DOM:document object.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FireFoxClientPort.JavaScriptEngine">
            <summary>
            Gets the type of java script engine.
            </summary>
            <value>The type of java script engine.</value>
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FireFoxClientPort.BrowserVariableName">
            <summary>
            Gets the name of the browser variable.
            </summary>
            <value>The name of the browser variable.</value>
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FireFoxClientPort.IsMainWindowVisible">
            <summary>
            Gets a value indicating whether the main FireFox window is visible, it's possible that the
            main FireFox window is not visible if a previous shutdown didn't complete correctly
            in which case the restore / resume previous session dialog may be visible.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.Mozilla.FireFoxClientPort.IsRestoreSessionDialogVisible">
            <summary>
            Gets a value indicating whether IsRestoreSessionDialogVisible.
            </summary>
            <value>
            The is restore session dialog visible.
            </value>
        </member>
        <member name="T:WatiN.Core.ElementSelector`1">
            <summary>
            A delegate that selects an element in a position relative to another element.
            </summary>
            <typeparam name="TElement">The reference element type</typeparam>
            <param name="referenceElement">The reference element from which the search begins</param>
            <returns>The selected element, possibly a descendant or ancestor of the reference element</returns>
        </member>
        <member name="T:WatiN.Core.ListCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.List"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.ListCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ListCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.ListCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Body">
            <summary>
            This class represents an HTML "body" element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Body.#ctor(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Body"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="element">The input button or button element.</param>
        </member>
        <member name="M:WatiN.Core.Body.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Body"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="finder">The input button or button element.</param>
        </member>
        <member name="T:WatiN.Core.ComponentExtensions">
            <summary>
            Provides extension methods for <see cref="T:WatiN.Core.Component"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.ComponentExtensions.WithDescription``1(``0,System.String)">
            <summary>
            Assigns a description to a component and returns it.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="component">The component.</param>
            <param name="description">The description, or null if none.</param>
            <returns>The component.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="component"/> is null.</exception>
        </member>
        <member name="T:WatiN.Core.TableRow">
            <summary>
            This class provides specialized functionality for a HTML tr element.
            </summary>
        </member>
        <member name="M:WatiN.Core.TableRow.OwnTableCell(System.String)">
            <summary>
            Finds a table cell within the table row itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="elementId">The element id</param>
            <returns>The table cell</returns>
        </member>
        <member name="M:WatiN.Core.TableRow.OwnTableCell(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a table cell within the table row itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="elementId">The element id regular expression</param>
            <returns>The table cell</returns>
        </member>
        <member name="M:WatiN.Core.TableRow.OwnTableCell(WatiN.Core.Constraints.Constraint)">
            <summary>
            Finds a table cell within the table row itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="findBy">The constraint</param>
            <returns>The table cell</returns>
        </member>
        <member name="M:WatiN.Core.TableRow.OwnTableCell(System.Predicate{WatiN.Core.TableCell})">
            <summary>
            Finds a table cell within the table row itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <param name="predicate">The predicate</param>
            <returns>The table cell</returns>
        </member>
        <member name="M:WatiN.Core.TableRow.IsHeaderRow">
            <summary>
            Returns a <see cref="T:WatiN.Core.Constraints.Constraint"/> which can be applied on a <see cref="T:WatiN.Core.TableRowCollection"/>
            to filter out <see cref="T:WatiN.Core.TableRow"/> elements contained in a thead section.
            </summary>
            <returns></returns>
            <seealso cref="M:WatiN.Core.TableRow.IsFooterRow"/>
            <example>
            Following example shows how to get only the rows inside a thead section:
            <code>
            var browser = new IE("www.watin.net/examples/tables.htm");
            var tableRows = browser.Table("table_id").OwnTableRows;
            
            var headerRows = tableRows.Filter(TableRow.IsHeaderRow());
            </code>
            If you don't want header rows in your tablerows collection apply to <see cref="T:WatiN.Core.Constraints.NotConstraint"/>:
            <code>
            var browser = new IE("www.watin.net/examples/tables.htm");
            var tableRows = browser.Table("table_id").OwnTableRows;
            
            var noHeaderRows = tableRows.Filter(!TableRow.IsHeaderRow());
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.TableRow.IsFooterRow">
            <summary>
            Returns a <see cref="T:WatiN.Core.Constraints.Constraint"/> which can be applied on a <see cref="T:WatiN.Core.TableRowCollection"/>
            to filter out <see cref="T:WatiN.Core.TableRow"/> elements contained in a tfoot section.
            </summary>
            <returns></returns>
            <seealso cref="M:WatiN.Core.TableRow.IsHeaderRow"/>
            <example>
            Following example shows how to get only the rows inside a tfoot section:
            <code>
            var browser = new IE("www.watin.net/examples/tables.htm");
            var tableRows = browser.Table("table_id").OwnTableRows;
            
            var footerRows = tableRows.Filter(TableRow.IsFooterRow());
            </code>
            If you don't want header rows in your tablerows collection apply to <see cref="T:WatiN.Core.Constraints.NotConstraint"/>:
            <code>
            var browser = new IE("www.watin.net/examples/tables.htm");
            var tableRows = browser.Table("table_id").OwnTableRows;
            
            var noFooterRows = tableRows.Filter(!TableRow.IsFooterRow());
            </code>
            </example>
        </member>
        <member name="P:WatiN.Core.TableRow.ContainingTable">
            <summary>
            Gets the table that contains this row.
            </summary>
        </member>
        <member name="P:WatiN.Core.TableRow.ContainingTableBody">
            <summary>
            Gets the table body that contains this row.
            </summary>
        </member>
        <member name="P:WatiN.Core.TableRow.ParentTable">
            <summary>
            Gets the table that contains this row.
            </summary>
        </member>
        <member name="P:WatiN.Core.TableRow.Index">
            <summary>
            Gets the index of the <see cref="T:WatiN.Core.TableRow"/> in the <see cref="T:WatiN.Core.TableRowCollection"/> of the parent <see cref="T:WatiN.Core.Table"/>.
            </summary>
            <value>The index of the row.</value>
        </member>
        <member name="P:WatiN.Core.TableRow.OwnTableCells">
            <summary>
            Gets a collection of all table cells within the table row itself (excluding content from any tables that
            might be nested within it).
            </summary>
            <returns>The table cell collection</returns>
        </member>
        <member name="P:WatiN.Core.TableRow.TableCellsDirectChildren">
            <summary>
            Gets the table cells that are direct children of this <see cref="T:WatiN.Core.TableRow"/>, leaving
            out table cells of any nested tables within this <see cref="T:WatiN.Core.TableRow"/>.
            </summary>
            <value>The table cells collection.</value>
        </member>
        <member name="T:WatiN.Core.LabelCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Label"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.LabelCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.LabelCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.LabelCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.IECollection">
            <summary>
            A typed collection of open <see cref="T:WatiN.Core.IE"/> instances.
            </summary>
        </member>
        <member name="M:WatiN.Core.IECollection.CreateFilteredCollection(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.IECollection.GetComponents">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.DivCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Div"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.DivCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DivCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.DivCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.CheckBoxCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.CheckBox"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.CheckBoxCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.CheckBoxCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.CheckBoxCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Native.InternetExplorer.WinInet">
            <summary>
            Provides low-level support for manipulating cookies, clearing caches and
            setting internet options.
            </summary>
            <remarks author="jeff.brown">
            This cookie clearing code is based on the sample code from the following MS KB article:
            http://support.microsoft.com/default.aspx?scid=kb;EN-US;326201
            Beware, the code presented in that article is somewhat buggy so it has been
            completely rewritten here.
            </remarks>
        </member>
        <member name="T:WatiN.Core.Native.InternetExplorer.WinInet.ClearCookiesCommand">
            <summary>
            Holds state for the duration of the clear cookies operation because we
            don't have anonymous delegates in .Net 1.1.
            </summary>
        </member>
        <member name="T:WatiN.Core.NativeElementCollectionAdapter">
            <summary>
            Wraps a <see cref="T:WatiN.Core.DomContainer"/> and <see cref="T:WatiN.Core.Native.INativeElementCollection"/> as
            an implementation of <see cref="T:WatiN.Core.IElementContainer"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.#ctor(WatiN.Core.DomContainer,WatiN.Core.NativeElementFinder.NativeElementCollectionFactory)">
            <summary>
            Creates a new adapter.
            </summary>
            <param name="domContainer">The DOM container</param>
            <param name="factory">The native element collection</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="domContainer"/> or
            <paramref name="factory"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.Child(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.Child(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.Child(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.Child(System.Predicate{WatiN.Core.Element})">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.Children">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.ChildOfType``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.ChildOfType``1(System.Text.RegularExpressions.Regex)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.ChildOfType``1(WatiN.Core.Constraints.Constraint)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.ChildOfType``1(System.Predicate{``0})">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.ChildrenOfType``1">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.ChildWithTag(System.String,WatiN.Core.Constraints.Constraint,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.ChildrenWithTag(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.NativeElementCollectionAdapter.ChildrenWithTag(System.Collections.Generic.IList{WatiN.Core.ElementTag})">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Logging.LogMessageType">
            <summary>
            enumeration of the logging types
            </summary>
        </member>
        <member name="F:WatiN.Core.Logging.LogMessageType.Action">
            <summary>
            action logging type
            </summary>
        </member>
        <member name="F:WatiN.Core.Logging.LogMessageType.Debug">
            <summary>
            debug logging type
            </summary>
        </member>
        <member name="P:WatiN.Core.Actions.TypeTextAction.TextField">
            <summary>
            The <see cref="P:WatiN.Core.Actions.TypeTextAction.TextField"/> wrapped by this <see cref="T:WatiN.Core.Actions.TypeTextAction"/> instance.
            </summary>
        </member>
        <member name="T:WatiN.Core.Span">
            <summary>
            This class provides specialized functionality for a HTML span element.
            </summary>
        </member>
        <member name="T:WatiN.Core.SelectList">
            <summary>
            This class provides specialized functionality for a HTML select element.
            </summary>
        </member>
        <member name="M:WatiN.Core.SelectList.#ctor(WatiN.Core.DomContainer,WatiN.Core.Native.INativeElement)">
            <summary>
            Returns an initialized instance of a SelectList object.
            Mainly used by the collectionclass SelectLists.
            </summary>
            <param name="domContainer">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="element">The HTML select element.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Returns an instance of a SelectList object.
            Mainly used internally.
            </summary>
            <param name="domContainer">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="finder">The element finder to use.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.ClearList">
            <summary>
            This method clears the selected items in the select box and waits for the 
            onchange event to complete after the list is cleared
            </summary>
        </member>
        <member name="M:WatiN.Core.SelectList.Select(System.String)">
            <summary>
            This method selects an item by text.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.Select(System.Text.RegularExpressions.Regex)">
            <summary>
            This method selects an item by text using the supplied regular expression.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.SelectByValue(System.String)">
            <summary>
            Selects an item in a select box, by value.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.SelectByValue(System.Text.RegularExpressions.Regex)">
            <summary>
            Selects an item in a select box by value using the supplied regular expression.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.Option(System.String)">
            <summary>
            Returns the <see cref="P:WatiN.Core.SelectList.Options"/> which matches the specified <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns><see cref="P:WatiN.Core.SelectList.Options"/></returns>
        </member>
        <member name="M:WatiN.Core.SelectList.Option(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns the <see cref="P:WatiN.Core.SelectList.Options"/> which matches the specified <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns><see cref="P:WatiN.Core.SelectList.Options"/></returns>
        </member>
        <member name="M:WatiN.Core.SelectList.Option(WatiN.Core.Constraints.Constraint)">
            <summary>
            Returns the <see cref="P:WatiN.Core.SelectList.Options"/> which matches the specified <paramref name="findBy"/>.
            </summary>
            <param name="findBy">The find by to use.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.SelectList.Option(System.Predicate{WatiN.Core.Option})">
            <summary>
            Returns the <see cref="P:WatiN.Core.SelectList.Options"/> which matches the specified expression.
            </summary>
            <param name="predicate">The expression to use.</param>
            <returns></returns>
        </member>
        <member name="P:WatiN.Core.SelectList.Multiple">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.SelectList"/> allows multiple select.
            </summary>
            <value><c>true</c> if multiple; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.SelectList.AllContents">
            <summary>
            Returns all the items in the select list as an array.
            An empty array is returned if the select box has no contents.
            </summary>
        </member>
        <member name="P:WatiN.Core.SelectList.Options">
            <summary>
            Returns all the <see cref="T:WatiN.Core.Option"/> elements in the <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.SelectList.SelectedOptions">
            <summary>
            Returns the selected option(s) in an array list.
            </summary>
        </member>
        <member name="P:WatiN.Core.SelectList.SelectedItems">
            <summary>
            Returns the selected item(s) in a <see cref="T:System.Collections.Specialized.StringCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.SelectList.SelectedItem">
            <summary>
            Returns the first selected item in the selectlist. Other items may be selected.
            Use SelectedItems to get a StringCollection of all selected items.
            When there's no item selected, the return value will be null.
            </summary>
        </member>
        <member name="P:WatiN.Core.SelectList.SelectedOption">
            <summary>
            Returns the first selected option in the selectlist. Other options may be selected.
            Use SelectedOptions to get an ArrayList of all selected options.
            When there's no option selected, the return value will be null.
            </summary>
        </member>
        <member name="P:WatiN.Core.SelectList.HasSelectedItems">
            <summary>
            Gets a value indicating whether this instance has selected items.
            </summary>
            <value>
            	<c>true</c> if this instance has selected items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WatiN.Core.OptionCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Option"/> elements within a <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.OptionCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.OptionCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.OptionCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.LinkCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Link"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.LinkCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.LinkCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.LinkCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Label">
            <summary>
            This class provides specialized functionality for a HTML label element.
            </summary>
        </member>
        <member name="T:WatiN.Core.Image">
            <summary>
            This class provides specialized functionality for a HTML img element.
            </summary>
        </member>
        <member name="T:WatiN.Core.Exceptions.RunScriptException">
            <summary>
            Thrown if a (java) script failed to run. The innerexception returns the actual exception.
            </summary>
        </member>
        <member name="T:WatiN.Core.Comparers.RegexComparer">
            <summary>
            This class supports matching a regular expression with a string value.
            </summary>
        </member>
        <member name="M:WatiN.Core.Comparers.RegexComparer.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Comparers.RegexComparer"/> class.
            </summary>
            <param name="regex">The regex to be used by the <see cref="M:WatiN.Core.Comparers.RegexComparer.Compare(System.String)"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Comparers.RegexComparer.Compare(System.String)">
            <summary>
            Matches the given value with the regex. You can override this method
            and provide your own implementation for the comparison with the
            given <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            Should return <c>true</c> or <c>false</c>, which is the default.
            </returns>
        </member>
        <member name="M:WatiN.Core.Comparers.RegexComparer.ToString">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Comparers.RegexComparer.Regex">
            <summary>
            Gets the regular expression to compare against.
            </summary>
        </member>
        <member name="T:WatiN.Core.ButtonCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Button"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.ButtonCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ButtonCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.ButtonCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.ShellWindows2.GetEnumerator">
            <exclude />
        </member>
        <member name="T:WatiN.Core.Native.InternetExplorer.IEElement">
            <summary>
            Summary description for IEElement.
            </summary>
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.GetAttributeValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.SetAttributeValue(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.SetFocus">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.FireEvent(System.String,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.FireEventNoWait(System.String,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.Select">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.SubmitForm">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.SetFileUploadFile(WatiN.Core.DialogHandlers.DialogWatcher,System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.GetStyleAttributeValue(System.String)">
            <summary>
            This methode can be used if the attribute isn't available as a property of
            of this <see cref="T:WatiN.Core.Style"/> class.
            </summary>
            <param name="attributeName">The attribute name. This could be different then named in
            the HTML. It should be the name of the property exposed by IE on it's style object.</param>
            <returns>The value of the attribute if available; otherwise <c>null</c> is returned.</returns>
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.SetStyleAttributeValue(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.IsElementReferenceStillValid">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.WaitUntilReady">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.GetElementBounds">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEElement.GetJavaScriptElementReference">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.AsHtmlElement">
            <summary>
            Gets the underlying <see cref="T:mshtml.IHTMLElement"/> object.
            </summary>
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.Children">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.AllDescendants">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.TableRows">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.TableBodies">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.TableCells">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.Options">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.TextAfter">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.TextBefore">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.NextSibling">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.PreviousSibling">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.Parent">
            <inheritdoc />
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.AsDispHTMLBaseElement">
            <summary>
            Gets the DispHtmlBaseElement />.
            </summary>
            <value>The DispHtmlBaseElement.</value>
        </member>
        <member name="P:WatiN.Core.Native.InternetExplorer.IEElement.TagName">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEFireEventHandler.FireEventNoWait(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Fires the event on the element but doesn't wait for it to complete
            </summary>
            <param name="eventName">Name of the event to fire</param>
            <param name="eventProperties">The event object properties.</param>
        </member>
        <member name="M:WatiN.Core.Native.InternetExplorer.IEFireEventHandler.FireEvent(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Fires the event on the given element.
            </summary>
            <param name="eventName">Name of the event to fire</param>
            <param name="eventProperties">The event object properties.</param>
        </member>
        <member name="T:WatiN.Core.TextFieldCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.TextField"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.TextFieldCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.TextFieldCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.TextFieldCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.TableCellCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.TableCell"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.TableCellCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.TableCellCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.TableCellCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.SpanCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Span"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.SpanCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.SpanCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.SpanCollection.CreateFilteredCollection(WatiN.Core.ElementFinder)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.Logging.Logger">
            <summary>
            This class provides some basic means to write actions to a logger class.
            WatiN uses this class to log which actions are done while driving Internet
            Explorer.
            </summary>
        </member>
        <member name="M:WatiN.Core.Logging.Logger.LogAction(System.String,System.Object[])">
            <summary>
            Logs the action. These should be messages about "user" actions done by WatiN. 
            </summary>
            <param name="message">A message containing zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format</param>
            <example>
            Call this function from your code like this:
            <code>
            Logger.LogAction("Some message");
            </code>
            or
            <code>
            Logger.LogAction("Some message with an {0} to {1}, "item", "format");
            </code>
            
            </example>
        </member>
        <member name="M:WatiN.Core.Logging.Logger.LogDebug(System.String,System.Object[])">
            <summary>
            Logs the debug message. These should be technical messages from within WatiN.
            </summary>
            <param name="message">A message containing zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format</param>
            <example>
            Call this function from your code like this:
            <code>
            Logger.LogDebug("Some message");
            </code>
            or
            <code>
            Logger.LogDebug("Some message with an {0} to {1}, "item", "format");
            </code>
            
            </example>
        </member>
        <member name="M:WatiN.Core.Logging.Logger.Log(WatiN.Core.Logging.LogMessageType,System.String,System.Object[])">
            <summary>
            base logging method to send data
            </summary>
            <param name="logType">LogTypes enumeration item</param>
            <param name="message">A message containing zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format</param>
        </member>
        <member name="M:WatiN.Core.Logging.Logger.Log(WatiN.Core.Logging.LogMessageType,WatiN.Core.Logging.LogMessageCallback)">
            <summary>
            Base logging method to send data and create the message only when a logWriter is attached
            </summary>
            <param name="logType">LogTypes enumeration item</param>
            <param name="callback">A delegate to create the log message.</param>
        </member>
        <member name="P:WatiN.Core.Logging.Logger.LogWriter">
            <summary>
            Gets or sets the log writer.
            </summary>
            <value>The log writer.</value>
        </member>
        <member name="T:WatiN.Core.Link">
            <summary>
            This class provides specialized functionality for a HTML link element.
            </summary>
        </member>
        <member name="T:WatiN.Core.HtmlDialog">
            <summary>
            This is the main class to access a webpage within a modal or modeless
            HTML dialog.
            </summary>
        </member>
        <member name="M:WatiN.Core.HtmlDialog.GetAttributeValueImpl(System.String)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.DialogHandlers.PrintDialogHandler">
             <summary>
             This class handles the print dialog clicking the Print, 
             Cancel or Apply button.
             </summary>
             <example>
             The following code shows the use of this dialog handler
             <code>
             IE ie = new IE();
            
             ie.DialogWatcher.Add(new PrintDialogHandler(PrintDialogHandler.ButtonsEnum.Cancel));
            
             ie.GoTo("http://www.someprintdialog.com");
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.PrintDialogHandler.CanHandleDialog(WatiN.Core.Native.Windows.Window)">
            <summary>
            Determines whether the specified window is a print dialog by checking the <see cref="P:WatiN.Core.Native.Windows.Window.StyleInHex"/>.
            Valid values are "96C820C4" or "96C800C4".
            </summary>
            <param name="window">The window.</param>
            <returns>
            <c>true</c> if the specified window is a print dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WatiN.Core.Constraints.NotConstraint">
            <summary>
            A constraint that produces the inverse result of another constraint.
            </summary>
        </member>
        <member name="M:WatiN.Core.Constraints.NotConstraint.#ctor(WatiN.Core.Constraints.Constraint)">
            <summary>
            Creates a new NOT constraint.
            </summary>
            <param name="inner">The inner constraint</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="inner"/> is null</exception>
        </member>
        <member name="M:WatiN.Core.Constraints.NotConstraint.WriteDescriptionTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:WatiN.Core.Constraints.NotConstraint.MatchesImpl(WatiN.Core.Interfaces.IAttributeBag,WatiN.Core.Constraints.ConstraintContext)">
            <inheritdoc />
        </member>
        <member name="T:WatiN.Core.IdHinter">
            <summary>
            This class determines if it is possible to get an element by its Id based on the given Constraint.
            If so it will return an id
            </summary>
            <example>
            Following an example on how to use this class:
            <code>
            var idHint = IdHinter.GetIdHint(Find.ById("someId"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IdHinter.GetIdHint(WatiN.Core.Constraints.Constraint)">
            <summary>
            Gets the id hint. Only returns an Id if <paramref name="constraint"/> is an <see cref="T:WatiN.Core.Constraints.AttributeConstraint"/> on an exact Id or
            if the <paramref name="constraint"/> is an <see cref="T:WatiN.Core.Constraints.AndConstraint"/> with an <see cref="T:WatiN.Core.Constraints.AttributeConstraint"/> on an exact Id 
            and an <see cref="T:WatiN.Core.Constraints.AnyConstraint"/>.
            </summary>
            <param name="constraint">The constraint to get the id Hint from.</param>
            <returns></returns>
        </member>
    </members>
</doc>
